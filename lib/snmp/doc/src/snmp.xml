<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1996</year><year>2024</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    </legalnotice>

    <title>snmp</title>
    <prepared></prepared>
    <responsible></responsible>
    <docno></docno>
    <approved></approved>
    <checked></checked>
    <date></date>
    <rev></rev>
    <file>snmp.xml</file>
  </header>
  <module since="">snmp</module>
  <modulesummary>Interface functions to the SNMP toolkit</modulesummary>
  <description>
    <p>The module <c>snmp</c> contains interface functions to the 
      SNMP toolkit.</p>
  </description>

  <datatypes>
    <datatype>
      <name name="oid"/>
      <desc>
	<p>
	  Represent an ASN.1 OBJECT IDENTIFIER.
	</p>
      </desc>
    </datatype>

    <datatype>
      <name name="row_index"/>
      <desc>
	<p>
	  Denotes the last part of the OID which specifies the index of the
	  row in the table (see RFC1212, 4.1.6 for more information about
	  INDEX).
	</p>
      </desc>
    </datatype>

    <datatype>
      <name name="bits"/>
      <desc>
	<p>
	  The Erlang representation of the SNMP BITS (pseudo) data type.
	</p>
      </desc>
    </datatype>

    <datatype>
      <name name="octet"/>
      <!--
      <desc>
	<p>
	  TBD.
	</p>
      </desc>
	-->
    </datatype>

    <datatype>
      <name name="octet_string"/>
      <!--
      <desc>
	<p>
	  TBD.
	</p>
      </desc>
	-->
    </datatype>

    <datatype>
      <name name="rfc1903_date_and_time"/>
      <desc>
	<p>
	  The data type DateAndTime, an OCTET STRING, as specified in RFC1903.
	</p>
      </desc>
    </datatype>

    <datatype>
      <name name="date_and_time_validator_kind"/>
      <!--
      <desc>
	<p>
	  TBD.
	</p>
      </desc>
	-->
    </datatype>

    <datatype>
      <name name="date_and_time_validator"/>
      <desc>
	<p>The input to the validator fun looks like this: </p>
	<pre>
	  Kind             Data
	  --------------   ----------------------
	  year             {Year1, Year2}
	  month            Month
	  day              Day
	  hour             Hour
	  minute           Minute
	  seconds          Seconds
	  deci_seconds     DeciSeconds
	  diff             [Sign, Hour, Minute]
	  valid_date       {Year, Month, Day}
	</pre>
      </desc>
    </datatype>

    <datatype>
      <name name="log_size"/>
      <desc>
	<p>
	  This is basically a copy of the
	  <seetype marker="disk_log#dlog_size">dlog_size()</seetype>.
	</p>
      </desc>
    </datatype>

    <datatype>
      <name name="log_time"/>
      <!--
      <desc>
	<p>
	  TBD
	</p>
      </desc>
      -->
    </datatype>

    <datatype>
      <name name="algorithm"/>
      <!--
      <desc>
	<p>
	  TBD
	</p>
      </desc>
      -->
    </datatype>

    <datatype>
      <name name="mib"/>
      <!--
      <desc>
	<p>
	  TBD
	</p>
      </desc>
      -->
    </datatype>

    <datatype>
      <name name="mib_name"/>
      <!--
      <desc>
	<p>
	  TBD
	</p>
      </desc>
      -->
    </datatype>

    <datatype>
      <name name="asn1_type"/>
      <!--
      <desc>
	<p>
	  TBD
	</p>
      </desc>
      -->
    </datatype>

    <datatype>
      <name name="void"/>
      <desc>
	<p>
	  The type is used when a functions return is to be ignored.
	</p>
      </desc>
    </datatype>

  </datatypes>

  <funcs>
    <func>
      <name name="config" arity="0" clause_i="1" since=""/>
      <fsummary>Configure with a simple interactive tool</fsummary>
      <desc>
        <p>A simple interactive configuration tool. Simple
	configuration files can be generated, but more complex
	configurations still have to be edited manually. </p>
        <p>The tool is a textual based tool that asks some questions
	and generates <c>sys.config</c> and <c>*.conf</c> files. </p>
        <p><em>Note</em> that if the application shall support version 3, 
	then the crypto app must be started before running this function 
	(password generation). </p>
	<p><em>Note</em> also that some of the configuration files for the 
	agent and manager share the same names. This means that 
	they have to be stored in <em>different</em> directories!</p>

	<marker id="start"></marker>
      </desc>
    </func>

    <func>
      <name name="start" arity="0" clause_i="1" since=""/>
      <name name="start" arity="1" clause_i="1" since=""/>
      <fsummary>Start the SNMP application</fsummary>
      <desc>
	<p>Starts the SNMP application.</p>
	<p></p>
	<p>See <seeerl marker="kernel:application">application</seeerl>
	for more info.</p>

        <marker id="stop"></marker>
      </desc>
    </func>

    <func>
      <name name="stop" arity="0" clause_i="1" since=""/>
      <fsummary>Stop the SNMP application</fsummary>
      <desc>
	<p>Stops the SNMP application.</p>
	<p></p>
	<p>See <seeerl marker="kernel:application">application</seeerl>
	for more info.</p>

        <marker id="start_agent"></marker>
      </desc>
    </func>

    <func>
      <name name="start_agent" arity="0" clause_i="1" since=""/>
      <name name="start_agent" arity="1" clause_i="1" since=""/>
      <fsummary>Start the agent part of the SNMP application</fsummary>
      <desc>
        <p>The SNMP application consists of several entities, of which the
	agent is one. This function starts the agent entity of the 
	application. </p>

	<p>Note that the only way to actually start the agent in this way is
	to add the agent related config after starting the application (e.g
	it cannot be part of the normal application config; sys.config).
	This is done by calling: 
	<c><![CDATA[application:set_env(snmp, agent, Conf)]]></c>. </p>

	<p>The default value for <c><![CDATA[Type]]></c> is
	<c><![CDATA[normal]]></c>. </p>
	
	<marker id="start_manager"></marker>
      </desc>
    </func>

    <func>
      <name name="start_manager" arity="0" clause_i="1" since=""/>
      <name name="start_manager" arity="1" clause_i="1" since=""/>
      <fsummary>Start the manager part of the SNMP application</fsummary>
      <desc>
        <p>The SNMP application consists of several entities, of which the
	manager is one. This function starts the manager entity of the 
	application. </p>

	<p>Note that the only way to actually start the manager in this way is
	to add the manager related config after starting the application (e.g
	it cannot be part of the normal application config; sys.config).
	This is done by calling: 
	<c><![CDATA[application:set_env(snmp, manager, Conf)]]></c>. </p>

	<p>The default value for <c><![CDATA[Type]]></c> is
	<c><![CDATA[normal]]></c>.</p>

        <marker id="dat"></marker>
        <marker id="date_and_time"></marker>
      </desc>
    </func>

    <func>
      <name name="date_and_time" arity="0" clause_i="1" since=""/>
      <fsummary>Return the current date and time as an OCTET STRING</fsummary>
      <desc>
        <p>Returns current date and time as the data type DateAndTime,
	as specified in RFC1903. This is an OCTET STRING.</p>
	  
	<marker id="dat2ut_dst"></marker>
	<marker id="date_and_time_to_universal_time_dst"></marker>
      </desc>
    </func>

    <func>
      <name name="date_and_time_to_universal_time_dst" arity="1" clause_i="1" since=""/>
      <fsummary>Convert a DateAndTime value to a list of possible utc()</fsummary>
      <desc>
        <p>Converts a DateAndTime list to a list of possible universal 
	time(s). The universal time value on the same format as defined in
	calendar(3). </p>

	<marker id="dat2s"></marker>
	<marker id="date_and_time_to_string"></marker>
	<marker id="date_and_time_to_string1_1"></marker>
	<marker id="date_and_time_to_string1_2"></marker>
      </desc>
    </func>

    <func>
      <name name="date_and_time_to_string" arity="1" clause_i="1" since=""/>
      <name name="date_and_time_to_string" arity="2" clause_i="1" since=""/>
      <fsummary>Convert a DateAndTime value to a string</fsummary>
      <desc>
	<p>Converts a DateAndTime list to a printable string, according
	to the DISPLAY-HINT definition in RFC2579.</p>

        <p>The validation fun,  <c>Validate</c>, allows for a more "flexible" 
	validation of the <c>DateAndTime</c> argument. Whenever the data 
	is found to not follow RFC2579, the fun is called to allow a more
	"lax" validation. 
	See the <seeerl marker="#vdat">validate_date_and_time/2</seeerl> 
	function for more info on the <c>Validate</c> fun. </p>

	<marker id="dat2s2"></marker>
	<marker id="date_and_time_to_string2"></marker>
      </desc>
    </func>

    <func>
      <name name="date_and_time_to_string2" arity="1" clause_i="1" since=""/>
      <fsummary>Convert a DateAndTime value to a string</fsummary>
      <desc>
	<p>Converts a DateAndTime list to a printable string, according
	to the DISPLAY-HINT definition in RFC2579, with the extension 
	that it also allows the values "hours from UTC" = 14 together with 
	"minutes from UTC" = 0. </p>

	<marker id="lt2dat_dst"></marker>
	<marker id="local_time_to_date_and_time_dst"></marker>
      </desc>
    </func>

    <func>
      <name name="local_time_to_date_and_time_dst" arity="1" clause_i="1" since=""/>
      <fsummary>Convert a Local time value to a list of possible DateAndTime(s)</fsummary>
      <desc>
        <p>Converts a local time value to a list of possible DateAndTime 
	list(s). The local time value on the same format as defined in 
	calendar(3).</p>

	<marker id="ut2dat"></marker>
      </desc>
    </func>

    <func>
      <name name="universal_time_to_date_and_time" arity="1" clause_i="1" since=""/>
      <fsummary>Convert a UTC value to DateAndTime</fsummary>
      <desc>
        <p>Converts a universal time value to a DateAndTime list.  The
	universal time value on the same format as defined in calendar(3).</p>

        <marker id="vdat"></marker>
      </desc>
    </func>

    <func>
      <name name="validate_date_and_time" arity="1" clause_i="1" since=""/>
      <name name="validate_date_and_time" arity="2" clause_i="1" since=""/>
      <fsummary>Check if a DateAndTime value is correct</fsummary>
      <desc>
        <p>Checks if <c>DateAndTime</c> is a correct DateAndTime
	value, as specified in RFC2579.  This function can be used in
	instrumentation functions to validate a DateAndTime value.</p>

        <p>The validation fun, <c>Validate</c>, allows for a more "flexible" 
	validation of the <c>DateAndTime</c> argument. Whenever the data 
	is found to not follow RFC2579, the fun is called to allow a more
	"lax" validation. </p>

        <marker id="passwd2localized_key"></marker>
      </desc>
    </func>

    <func>
      <name name="passwd2localized_key" arity="3" clause_i="1" since=""/>
      <fsummary>Generates an localized key</fsummary>
      <desc>
        <p>Generates a key that can be used as an authentication
	or privacy key using MD5, SHA, SHA224, SHA256, SHA384 or SHA512.
	The key is localized for EngineID.</p>

        <marker id="octet_string_to_bits"></marker>
      </desc>
    </func>

    <func>
      <name name="octet_string_to_bits" arity="1" clause_i="1" since=""/>
      <fsummary>Convert an OCTET-STRING to BITS</fsummary>
      <desc>
        <p>Utility function for converting a value of type 
	<c>OCTET-STRING</c> to <c>BITS</c>,
	according to RFC1906, section 8. </p>

        <marker id="bits_to_octet_string"></marker>
      </desc>
    </func>

    <func>
      <name name="bits_to_octet_string" arity="1" clause_i="1" since=""/>
      <fsummary>Convert an OCTET-STRING to BITS</fsummary>
      <desc>
        <p>Utility function for converting a value of type <c>BITS</c> 
	to <c>OCTET-STRING</c>, according to RFC1906, section 8. </p>

        <marker id="read_mib"></marker>
      </desc>
    </func>

    <func>
      <name name="read_mib" arity="1" clause_i="1" since=""/>
      <fsummary></fsummary>
      <desc>
        <p>Read a compiled mib.</p>

        <marker id="log_to_txt"></marker>
      </desc>
    </func>

    <func>
      <name name="log_to_txt" arity="5" clause_i="1" since=""/>
      <name name="log_to_txt" arity="6" clause_i="1" since=""/>
      <name name="log_to_txt" arity="6" clause_i="2" since=""/>
      <name name="log_to_txt" arity="7" clause_i="1" since=""/>
      <name name="log_to_txt" arity="7" clause_i="2" since=""/>
      <name name="log_to_txt" arity="8" clause_i="1" since="OTP R16B03"/>
      <fsummary>Convert an Audit Trail Log to text format</fsummary>
      <desc>
	<p>Converts an Audit Trail Log to a readable text file, where
	each item has a trailing TAB character, and any TAB
	character in the body of an item has been replaced by ESC
	TAB. </p>
        <p>The function can be used on a running system, or by copying
	the entire log directory and calling this function. SNMP
	must be running in order to provide MIB information. </p>
        <p><c>LogDir</c> is the name of the directory where the audit
	trail log is stored. 
	<c>Mibs</c> is a list of Mibs to be used. The function uses 
	the information in the Mibs to convert for example object 
	identifiers to their symbolic name. 
	<c>OutFile</c> is the name of the generated text-file.
	<c>LogName</c> is the name of the log, 
	<c>LogFile</c> is the name of the log file. 
	<c>Start</c> is the start (first) date and time from which 
	log events will be converted and 
	<c>Stop</c> is the stop (last) date and time to which log 
	events will be converted.
	The <c>Block</c> argument indicates if the log should be blocked
	during conversion. This could be useful when converting large 
	logs (when otherwise the log could wrap during conversion). 
	Defaults to <c>true</c>. 
	</p>
	<p>The format of an audit trail log text item is as follows: </p>
	<p><c>Tag Addr - Community [TimeStamp] Vsn</c><br></br>
	<c>PDU</c></p>
	<p>where <c>Tag</c> is <c>request</c>, <c>response</c>, 
	<c>report</c>, <c>trap</c> or <c>inform</c>; Addr is 
	<c>IP:Port</c> (or comma space separated list of such);
	<c>Community</c> is the community parameter (SNMP version
	v1 and v2), or <c>SecLevel:"AuthEngineID":"UserName"</c>
	(SNMP v3); <c>TimeStamp</c> is a date and time stamp,
	and <c>Vsn</c> is the SNMP version. <c>PDU</c> is a textual
	version of the protocol data unit. There is a new line
	between <c>Vsn</c> and <c>PDU</c>.</p>

	<p>If the entire log is successfully converted, the function 
	will return <c>ok</c>. 
	If one of more entries fail to convert, the function will instead
	return <c>{ok, {NumOK, NumERR}}</c>, where the counters indicate
	how many valid and erroneous entries where found. 
	If instead <c>{error, Reason}</c> is returned, the conversion 
	encountered a fatal error and where either never done of aborted
	midway. </p>
	
        <marker id="log_to_io"></marker>
      </desc>
    </func>

    <func>
      <name name="log_to_io" arity="4" clause_i="1" since="OTP R15B01"/>
      <name name="log_to_io" arity="5" clause_i="1" since="OTP R15B01"/>
      <name name="log_to_io" arity="5" clause_i="2" since="OTP R15B01"/>
      <name name="log_to_io" arity="6" clause_i="1" since="OTP R15B01"/>
      <name name="log_to_io" arity="6" clause_i="2" since="OTP R15B01"/>
      <name name="log_to_io" arity="7" clause_i="1" since="OTP R16B03"/>
      <fsummary>Convert an Audit Trail Log to text format</fsummary>
      <desc>
        <p>Converts an Audit Trail Log to a readable format and 
	prints it on stdio. See 
	<seeerl marker="snmp#log_to_txt">log_to_txt</seeerl> 
	above for more info.</p>

        <marker id="change_log_size"></marker>
      </desc>
    </func>

    <func>
      <name name="change_log_size" arity="2" clause_i="1" since=""/>
      <fsummary>Change the size of the Audit Trail Log</fsummary>
      <desc>
        <p>Changes the log size of the Audit Trail Log.  The
	application must be configured to use the audit trail log
	function. Please refer to disk_log(3) in Kernel Reference 
	Manual for a description of how to change the log size.
	</p>

	<p>The change is permanent, as long as the log is not deleted. 
	That means, the log size is remembered across reboots.</p>

	<marker id="print_version_info"></marker>
      </desc>
    </func>

    <func>
      <name name="print_version_info" arity="0" clause_i="1" since=""/>
      <name name="print_version_info" arity="1" clause_i="1" since=""/>
      <fsummary>Formatted print of result of the versions functions</fsummary>
      <desc>
        <p>Utility function(s) to produce a formatted printout of the versions
	info generated by the <c>versions1</c> function</p>

	<p>This is the same as doing, e.g.: </p>
        <pre>
           {ok, V} = snmp:versions1(), 
           snmp:print_versions(V).
        </pre>

	<marker id="versions1"></marker>
	<marker id="versions2"></marker>
      </desc>
    </func>

    <func>
      <name name="versions1" arity="0" clause_i="1" since=""/>
      <name name="versions2" arity="0" clause_i="1" since=""/>
      <fsummary>Retrieve various system and application info</fsummary>
      <desc>
        <p>Utility functions used to retrieve some system and
	application info.</p>

	<p>The difference between the two functions is in how they get
	the modules to check. <c>versions1</c> uses the app-file and
	<c>versions2</c> uses the function <c>application:get_key</c>.</p>

        <marker id="print_versions"></marker>
      </desc>
    </func>

    <func>
      <name name="print_versions" arity="1" clause_i="1" since=""/>
      <name name="print_versions" arity="2" clause_i="1" since=""/>
      <fsummary>Formatted print of result of the versions functions</fsummary>
      <desc>
        <p>Utility function to produce a formatted printout of the versions
	info generated by the <c>versions1</c> and <c>versions2</c>
	functions</p>
        <p>Example: </p>
        <pre>
           {ok, V} = snmp:versions1(), 
           snmp:print_versions(V).
        </pre>

        <marker id="enable_trace"></marker>
      </desc>
    </func>

    <func>
      <name name="enable_trace" arity="0" clause_i="1" since=""/>
      <fsummary>Starts a tracer</fsummary>
      <desc>
        <p>Starts a dbg tracer that prints trace events to stdout (using
	plain io:format after a minor formatting). </p>

        <marker id="disable_trace"></marker>
      </desc>
    </func>

    <func>
      <name name="disable_trace" arity="0" clause_i="1" since=""/>
      <fsummary>Stop the tracer</fsummary>
      <desc>
        <p>Stop the tracer. </p>

        <marker id="set_trace1"></marker>
      </desc>
    </func>

    <func>
      <name name="set_trace" arity="1" clause_i="1" since=""/>
      <fsummary>Set trace target</fsummary>
      <desc>
        <p>This function is used to set up default trace on function(s) 
	for the given module or modules. The scope of the trace will be 
	all <em>exported</em> functions (both the call info and the return 
	value). Timestamp info will also be included. </p>

        <marker id="reset_trace"></marker>
      </desc>
    </func>

    <func>
      <name name="reset_trace" arity="1" clause_i="1" since=""/>
      <fsummary>Reset trace target</fsummary>
      <desc>
        <p>This function is used to reset (disable) trace for the 
	given module(s). </p>
      
	<marker id="set_trace2"></marker>
      </desc>
    </func>

    <func>
      <name name="set_trace" arity="2" clause_i="1" since=""/>
      <fsummary>Set trace target</fsummary>
      <desc>
        <p>This function is used to set up trace on function(s) for the given
	  module or modules. </p>

	<p>The example below sets up trace on the exported functions (default) 
	  of module <c>snmp_generic</c> and all functions of module 
	  <c>snmp_generic_mnesia</c>. With return values (which is default)
          and timestamps in both cases (which is also default): </p>

	<pre>
	  snmp:enable_trace(),
	  snmp:set_trace([snmp_generic, 
                          {snmp_generic_mnesia, [{scope, all_functions}]}]),
	  .
	  .
	  .
          snmp:set_trace(snmp_generic, disable),
	  .
	  .
	  .
	  snmp:disable_trace(),
	</pre>

      </desc>
    </func>

  </funcs>

  <section>
    <title>See Also</title>
    <p>calendar(3)
      </p>
  </section>
  
</erlref>

