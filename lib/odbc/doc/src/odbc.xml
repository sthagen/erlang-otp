<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE erlref SYSTEM "erlref.dtd">

<erlref>
  <header>
    <copyright>
      <year>1999</year><year>2021</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.

    </legalnotice>

    <title>odbc</title>
    <prepared>Ingela Anderton Andin</prepared>
    <responsible></responsible>
    <docno></docno>
    <date></date>
    <rev></rev>
  </header>
  <module since="">odbc</module>
  <modulesummary>Erlang ODBC application</modulesummary>
  <description>
    <p>This application provides an Erlang interface to communicate
      with relational SQL-databases. It is built on top of Microsofts
      ODBC interface and therefore requires that you have an ODBC driver
      to the database that you want to connect to.</p>
    <note>
      <p>The functions <c>first/[1,2]</c>, <c>last/[1,2]</c>,
        <c>next/[1,2]</c>, <c>prev[1,2]</c> and <c>select/[3,4]</c>
        assumes there is a result set associated with the connection to
        work on. Calling the function <c>select_count/[2,3]</c>
        associates such a result set with the connection. Calling
        select_count again will remove the current result set
        association and create a new one. Calling a function which dose
        not operate on an associated result sets, such as
        <c>sql_query/[2,3]</c>, will remove the current result set
        association.</p>
      <p>Alas some drivers only support sequential traversal of the
        result set, e.i. they do not support what in the ODBC world is
        known as scrollable cursors. This will have the effect that
        functions such as <c>first/[1,2]</c>, <c>last/[1,2]</c>,
        <c>prev[1,2]</c>, etc will return <c>{error, driver_does_not_support_function}</c></p>
    </note>
  </description>

 <!--
      ================================================================
      =  Data types                                                  =
      ================================================================
  -->

  <datatypes>
    <datatype_title>Types used in ODBC application</datatype_title>

     <datatype> 
       <name name="connection_reference"/>
       <desc>
	<p>Opaque reference to an ODBC connection as returnded by connect/2.</p>
       </desc>
     </datatype>

      <datatype>
      <name name="col_name"/>
       <desc>
	<p> Name of column in the result set.</p>
      </desc>
      </datatype>

        <datatype>
	  <name name="row"/>
	  <desc>
	    <p>A tuple, with the number of elements selected form columns in a database row, containg the values of the columns
	    such as <c>{value(), value() ... value()} </c>.
	   </p>
	  </desc>
	</datatype>

	<datatype>
          <name name="value"/>
          <desc>
            <p>Erlang data type that corresponds to the ODBC data type being handled.</p>
          </desc>
        </datatype>
	
	<datatype>
	  <name name="selected"/>
	  <desc>
	    <p>Return value for queries that select data from database tabels.</p>
	  </desc>
	</datatype>
	
	    <datatype>
	      <name name="updated"/>
	      <desc>
		<p>Return value for queries that update database tables.</p>
	      </desc>
	    </datatype>

	    <datatype>
	      <name name="n_rows"/>
	        <desc>
		  <p> The number of affected rows for UPDATE,
		  INSERT, or DELETE queries. For other query types the value
		  is driver defined, and hence should be ignored.   </p>
		</desc>
	    </datatype>

	    <datatype>
	      <name name="odbc_data_type"/>
	      <desc>
		<p> Data type used by ODBC, to learn which Erlang data type
		corresponds to an ODBC data type see the Erlang to ODBC
		data type <seeguide marker="databases#type">mapping</seeguide> in the User's Guide.</p>
	      </desc>
	    </datatype>

	    <datatype>
	      <name name="common_reason"/>
	      <desc>
		<p> An explanation of what went wrong. For common errors there will be atom decriptions.</p>
	      </desc>
	    </datatype>

	    <datatype>
	      <name name="extended_error"/>
	      <desc>
		<p>extended error type with ODBC and native database error codes, as well as the base reason that would have been
		returned had extended_errors not been enabled.</p>
	      </desc>
	    </datatype>
  </datatypes>

  <section>
    <title>ERROR HANDLING </title>
    <p>The error handling strategy and possible errors sources are
      described in the Erlang ODBC <seeguide marker="error_handling">User's Guide.</seeguide></p>
  </section>
  <funcs>
    <func>
      <name since="" name="commit" arity="2"></name>
      <name since="" name="commit" arity="3"></name>
      <fsummary>Commits or rollbacks a transaction. </fsummary>
      <desc>
        <p>Commits or rollbacks a transaction. Needed on connections
          where automatic commit is turned off.</p>
      </desc>
    </func>
    <func>
      <name since="" name="connect" arity="2"></name>
      <fsummary>Opens a connection to the database. </fsummary>
      <desc>
        <p>Opens a connection to the database. The connection is
          associated with the process that created it and can only be
          accessed through it. This function may spawn new processes
          to handle the connection. These processes will terminate if
          the process that created the connection dies or if you call
          disconnect/1.</p>
	    
	  <p>If automatic commit mode is turned on, each query will be
          considered as an individual transaction and will be
          automatically committed after it has been executed. If you want
          more than one query to be part of the same transaction the automatic
          commit mode should be turned off. Then you will have to call
          commit/3 explicitly to end a transaction. </p>

	  <p>The default timeout is infinity </p>
	  
	  <p> If the option binary_strings is turned on all strings
	  will be returned as binaries and strings inputted to
	  param_query will be expected to be binaries. The user needs
	  to ensure that the binary is in an encoding that the
	  database expects. By default this option is turned off.</p>
	  
        <p>As default result sets are returned as a lists of
          tuples. The <c>TupleMode</c> option still exists to keep some
          degree of backwards compatibility. If the option is set to
          off, result sets will be returned as a lists of lists
          instead of a lists of tuples.</p>
	  
        <p>Scrollable cursors are nice but causes some overhead. For
          some connections speed might be more important than flexible
          data access and then you can disable scrollable cursor for a
          connection, limiting the API but gaining speed.</p>

	  <note><p>Turning the scrollable_cursors option off is noted
	  to make old odbc-drivers able to connect that will otherwise fail.</p></note>
	  
        <p>If trace mode is turned on this tells the ODBC driver to
          write a trace log to the file SQL.LOG that is placed in the
          current directory of the erlang emulator. This information
          may be useful if you suspect there might be a bug in the
          erlang ODBC application, and it might be relevant for you to
          send this file to our support. Otherwise you will probably
          not have much use of this.</p>
	  
        <note>
          <p>For more information about the <c>ConnectStr</c> see
            description of the function SQLDriverConnect in [1].</p>
        </note>

	<p>The <c>extended_errors</c> option enables extended ODBC
	error information when an operation fails. Rather than
	returning <c>{error, Reason}</c>, the failing function will
	return <c>{error, {ODBCErrorCode, NativeErrorCode,
	Reason}}</c>.  Note that this information is probably of
	little use when writing database-independent code, but can be
	of assistance in providing more sophisticated error handling
	when dealing with a known underlying database.
	</p>
	<list type="bulleted">
	  <item><c>ODBCErrorCode</c> is the ODBC error string returned
	  by the ODBC driver.</item>
	  <item><c>NativeErrorCode</c> is the numeric error code returned by the underlying database. The possible values
	  and their meanings are dependent on the database being used.</item>
	  <item><c>Reason</c> is as per the <c>Reason</c> field when extended errors are not enabled.</item>
	</list>
	
        <note>
            <p>The current implementation spawns a port program
            written in C that utilizes the actual ODBC driver. There
            is a default timeout of 5000 msec for this port program
            to connect to the Erlang ODBC application. This timeout
            can be changed by setting an application specific
            environment variable 'port_timeout' with the number of
            milliseconds for the ODBC application. E.g.: [{odbc,
            [{port_timeout, 60000}]}] to set it to 60 seconds.
            </p>
        </note>
      </desc>
    </func>
    <func>
      <name since="" name="disconnect" arity="1"></name>
      <fsummary>Closes a connection to a database. </fsummary>
      <desc>
        <p>Closes a connection to a database. This will also terminate
        all processes that may have been spawned when the connection
        was opened. This call will always succeed.  If the connection
        cannot be disconnected gracefully it will be brutally
        killed. However you may receive an error message as result if
        you try to disconnect a connection started by another process.
        <marker id="describe_table"></marker>
	</p>
      </desc>
    </func>
    <func>
      <name since="" name="describe_table" arity="2"></name>
      <name since="" name="describe_table" arity="3"></name>
      <fsummary>Queries the database to find out the data types of the columns of the table <c>Table</c>. </fsummary>
      <desc>
        <p>Queries the database to find out the ODBC data types of the
          columns of the table <c>Table</c>. </p>
      </desc>
    </func>
    <func>
      <name since="" name="first" arity="1"></name>
      <name since="" name="first" arity="2"></name>
      <fsummary>Returns the first row of the result set and positions a cursor at this row.</fsummary>
      <desc>
        <p>Returns the first row of the result set and positions a
          cursor at this row.</p>
      </desc>
    </func>
    <func>
      <name since="" name="last" arity="1"></name>
      <name since="" name="last" arity="2"></name>
      <fsummary>Returns the last row of the result set and positions a cursor at this row. </fsummary>
      <desc>
        <p>Returns the last row of the result set and positions a
          cursor at this row.</p>
      </desc>
    </func>
    <func>
      <name since="" name="next" arity="1"></name>
      <name since="" name="next" arity="2"></name>
      <fsummary>Returns the next row of the result set relative the current cursor position and positions the cursor at this row. </fsummary>
      <desc>
        <p>Returns the next row of the result set relative the
          current cursor position and positions the cursor at this
          row. If the cursor is positioned at the last row of the
          result set when this function is called the returned value
          will be <c>{selected, ColNames,[]}</c> e.i. the list of row
          values is empty indicating that there is no more data to fetch.
                    <marker id="param_query"></marker>
	</p>
      </desc>
    </func>
    <func>
      <name since="" name="param_query" arity="3"></name>
      <name since="" name="param_query" arity="4"></name>
      <fsummary>Executes a parameterized SQL query.</fsummary>
      <desc>
        <p>Executes a parameterized SQL query. For an
          example see the <seeguide marker="getting_started#param_query">"Using the Erlang API"</seeguide> in the Erlang ODBC 
          User's Guide.</p>
        <note>
          <p>Use the function describe_table/[2,3] to find out which
            ODBC data type that is expected for each column of that
            table. If a column has a data type that is described with
            capital letters, alas it is not currently supported by the
            param_query function. To learn which Erlang data type
            corresponds to an ODBC data type see the Erlang to ODBC
            data type <seeguide marker="databases#type">mapping</seeguide> in the User's Guide.</p>
        </note>
      </desc>
    </func>
    <func>
      <name since="" name="prev" arity="1"></name>
      <name since="" name="prev" arity="2"></name>
      <fsummary>Returns the previous row of the result set relative
      the current cursor position and positions the cursor at this
      row. </fsummary>
      <desc>
        <p>Returns the previous row of the result set relative the
          current cursor position and positions the
          cursor at this row.</p>
      </desc>
    </func>

    <func>
      <name since="" name="start" arity="0"></name>
      <name since="" name="start" arity="1"></name>
      <fsummary>Starts the odb application. </fsummary>      
      <desc>
	<p> Starts the odbc application. Default type
	  is temporary.
	  <seeerl marker="kernel:application">See application(3)</seeerl>
	</p>
      </desc>
    </func>

    <func>
      <name since="" name="stop" arity="0"></name>
      <fsummary> Stops the odbc application.</fsummary>
      
      <desc>
	<p> Stops the odbc application.
	  <seeerl marker="kernel:application">See application(3)</seeerl>
	</p>
      </desc>
    </func>
    
    <func>
      <name since="" name="sql_query" arity="2"></name>
      <name since="" name="sql_query" arity="3"></name>
      <fsummary>Executes a SQL query or a batch of SQL queries. If it
      is a SELECT query the result set is returned, on the
      format<c>{selected, ColNames, Rows}</c>. For other query types
      the tuple <c>{updated, NRows}</c>is returned, and for batched
      queries, if the driver supports them, this function can also
      return a list of result tuples.</fsummary>
      <desc>
        <p>Executes a SQL query or a batch of SQL queries. If it
          is a SELECT query the result set is returned, on the format
          <c>{selected, ColNames, Rows}</c>. For other query types the
          tuple <c>{updated, NRows}</c> is returned, and for batched
          queries, if the driver supports them, this function can also
          return a list of result tuples.</p>
        <note>
          <p>Some drivers may not have the information of the number
            of affected rows available and then the return value may
            be <c>{updated, undefined} </c>. </p>
          <p>The list of column names is ordered in the same way as the
            list of values of a row, e.g. the first <c>ColName</c> is
            associated with the first <c>Value</c> in a <c>Row</c>.</p>
        </note>
        <br></br>
      </desc>
    </func>
    <func>
      <name since="" name="select_count" arity="2"></name>
      <name since="" name="select_count" arity="3"></name>
      <fsummary>Executes a SQL SELECT query and associates the result
      set with the connection. A cursor is positioned before the first
      row in the result set and the tuple <c>{ok, NrRows}</c>is
      returned. </fsummary>
      <desc>
        <p>Executes a SQL SELECT query and associates the result set
          with the connection. A cursor is positioned before the first
          row in the result set and the tuple <c>{ok, NrRows}</c> is
          returned. </p>
        <note>
          <p>Some drivers may not have the information of the number of
            rows in the result set, then <c>NrRows</c> will have the value
            <c>undefined</c>. </p>
        </note>
      </desc>
    </func>
    <func>
      <name since="" name="select" arity="3"></name>
      <name since="" name="select" arity="4"></name>
      <fsummary>Selects <c>N</c>consecutive rows of the result set.</fsummary>
      <desc>
        <p>Selects <c>N</c> consecutive rows of the result set. If
          <c>Position</c> is <c>next</c> it is semantically equivalent
          of calling <c>next/[1,2]</c> <c>N</c> times. If
          <c>Position</c> is <c>{relative, Pos}</c>, <c>Pos</c> will be
          used as an offset from the current cursor position to
          determine the first selected row. If <c>Position</c> is
          <c>{absolute, Pos}</c>, <c>Pos</c> will be the number of the
          first row selected. After this function has returned the
          cursor is positioned at the last selected row. If there is
          less then <c>N</c> rows left of the result set the length of
          <c>Rows</c> will be less than <c>N</c>. If the first row to
          select happens to be beyond the last row of the result set,
          the returned value will be <c>{selected, ColNames,[]}</c>
          e.i. the list of row values is empty indicating that there
          is no more data to fetch.</p>
      </desc>
    </func>
  </funcs>

  <section>
    <title>REFERENCES</title>
    <p>[1]: Microsoft ODBC 3.0, Programmer's Reference and SDK Guide      <br></br>

      See also http://msdn.microsoft.com/</p>
  </section>
  
</erlref>





