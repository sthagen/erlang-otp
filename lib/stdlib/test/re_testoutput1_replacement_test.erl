%%
%% %CopyrightBegin%
%%
%% Copyright Ericsson AB 2024. All Rights Reserved.
%%
%% Licensed under the Apache License, Version 2.0 (the "License");
%% you may not use this file except in compliance with the License.
%% You may obtain a copy of the License at
%%
%%     http://www.apache.org/licenses/LICENSE-2.0
%%
%% Unless required by applicable law or agreed to in writing, software
%% distributed under the License is distributed on an "AS IS" BASIS,
%% WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
%% See the License for the specific language governing permissions and
%% limitations under the License.
%%
%% %CopyrightEnd%
%%
-module(re_testoutput1_replacement_test).
-export([run/0]).
-compile(no_native).
%% This file is generated by running run_pcre_tests:gen_repl_test("re_SUITE_data/testoutput1")
run() ->
    run0(),
    run1(),
    run2(),
    run3(),
    run4(),
    run5(),
    run6(),
    run7(),
    run8(),
    run9(),
    run10(),
    run11(),
    run12(),
    run13(),
    run14(),
    run15(),
    run16(),
    run17(),
    run18(),
    run19(),
    run20(),
    run21(),
    run22(),
    run23(),
    run24(),
    run25(),
    run26(),
    run27(),
    run28(),
    run29(),
    run30(),
    run31(),
    run32(),
    run33(),
    run34(),
    run35(),
    run36(),
    run37(),
    run38(),
    run39(),
    run40(),
    run41(),
    run42(),
    run43(),
    run44(),
    run45(),
    run46(),
    run47(),
    run48(),
    run49(),
    run50(),
    run51(),
    run52(),
    run53(),
    run54(),
    run55(),
    run56(),
    run57(),
    run58(),
    run59(),
    run60(),
    ok.
run0() ->
    <<"SSxHvfHfMHTdP">> = iolist_to_binary(re:replace("the quick brown fox","the quick brown fox","SSx\\1HvfHfMHTdP",[])),
    <<"SSxHvfHfMHTdP">> = iolist_to_binary(re:replace("the quick brown fox","the quick brown fox","SSx\\1HvfHfMHTdP",[global])),
    <<"What do you know about sSrOvIDlwthe quick brown foxsr?">> = iolist_to_binary(re:replace("What do you know about the quick brown fox?","the quick brown fox","sSrOvIDlw&sr",[])),
    <<"What do you know about sSrOvIDlwthe quick brown foxsr?">> = iolist_to_binary(re:replace("What do you know about the quick brown fox?","the quick brown fox","sSrOvIDlw&sr",[global])),
    <<"The quick brown FOX">> = iolist_to_binary(re:replace("The quick brown FOX","the quick brown fox","HA&ExLcRRqeQ&e",[])),
    <<"The quick brown FOX">> = iolist_to_binary(re:replace("The quick brown FOX","the quick brown fox","HA&ExLcRRqeQ&e",[global])),
    <<"What do you know about THE QUICK BROWN FOX?">> = iolist_to_binary(re:replace("What do you know about THE QUICK BROWN FOX?","the quick brown fox","l",[])),
    <<"What do you know about THE QUICK BROWN FOX?">> = iolist_to_binary(re:replace("What do you know about THE QUICK BROWN FOX?","the quick brown fox","l",[global])),
    <<"x">> = iolist_to_binary(re:replace("the quick brown fox","The quick brown fox","x",[caseless])),
    <<"x">> = iolist_to_binary(re:replace("the quick brown fox","The quick brown fox","x",[caseless,global])),
    <<"SODNIyIgxThe quick brown FOXBThe quick brown FOXbBb">> = iolist_to_binary(re:replace("The quick brown FOX","The quick brown fox","SOD\\1NIy\\1Igx&B&b\\1Bb",[caseless])),
    <<"SODNIyIgxThe quick brown FOXBThe quick brown FOXbBb">> = iolist_to_binary(re:replace("The quick brown FOX","The quick brown fox","SOD\\1NIy\\1Igx&B&b\\1Bb",[caseless,global])),
    <<"What do you know about TI?">> = iolist_to_binary(re:replace("What do you know about the quick brown fox?","The quick brown fox","TI",[caseless])),
    <<"What do you know about TI?">> = iolist_to_binary(re:replace("What do you know about the quick brown fox?","The quick brown fox","TI",[caseless,global])),
    <<"What do you know about miTHE QUICK BROWN FOX?">> = iolist_to_binary(re:replace("What do you know about THE QUICK BROWN FOX?","The quick brown fox","mi&",[caseless])),
    <<"What do you know about miTHE QUICK BROWN FOX?">> = iolist_to_binary(re:replace("What do you know about THE QUICK BROWN FOX?","The quick brown fox","mi&",[caseless,global])),
    <<"LhLxqabcd	
9;$\\?caxyzBxFJ">> = iolist_to_binary(re:replace("abcd	
9;$\\?caxyz","abcd\\t\\n\\r\\f\\a\\e\\071\\x3b\\$\\\\\\?caxyz","LhLxq&\\1Bx\\1FJ",[])),
    <<"LhLxqabcd	
9;$\\?caxyzBxFJ">> = iolist_to_binary(re:replace("abcd	
9;$\\?caxyz","abcd\\t\\n\\r\\f\\a\\e\\071\\x3b\\$\\\\\\?caxyz","LhLxq&\\1Bx\\1FJ",[global])),
    <<"wqqHkXDku">> = iolist_to_binary(re:replace("abxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","wqqHkXDku",[])),
    <<"wqqHkXDku">> = iolist_to_binary(re:replace("abxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","wqqHkXDku",[global])),
    <<"jL">> = iolist_to_binary(re:replace("abxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","jL",[])),
    <<"jL">> = iolist_to_binary(re:replace("abxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","jL",[global])),
    <<"IIBgfOPaabxyzpqrrrabbxyyyypqAzzaabxyzpqrrrabbxyyyypqAzzUE">> = iolist_to_binary(re:replace("aabxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","IIBgfOP&&UE",[])),
    <<"IIBgfOPaabxyzpqrrrabbxyyyypqAzzaabxyzpqrrrabbxyyyypqAzzUE">> = iolist_to_binary(re:replace("aabxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","IIBgfOP&&UE",[global])),
    <<"asmnbaRlhmj">> = iolist_to_binary(re:replace("aaabxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","as\\1mnbaRlhmj",[])),
    <<"asmnbaRlhmj">> = iolist_to_binary(re:replace("aaabxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","as\\1mnbaRlhmj",[global])),
    <<"PPkDpiQNRoIwOISn">> = iolist_to_binary(re:replace("aaaabxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","PPkDpiQNRoIwOISn",[])),
    <<"PPkDpiQNRoIwOISn">> = iolist_to_binary(re:replace("aaaabxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","PPkDpiQNRoIwOISn",[global])),
    <<"WA">> = iolist_to_binary(re:replace("abcxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","WA",[])),
    <<"WA">> = iolist_to_binary(re:replace("abcxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","WA",[global])),
    <<"MmDiT">> = iolist_to_binary(re:replace("aabcxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","MmDiT\\1",[])),
    <<"MmDiT">> = iolist_to_binary(re:replace("aabcxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","MmDiT\\1",[global])),
    <<"rvMxRG">> = iolist_to_binary(re:replace("aaabcxyzpqrrrabbxyyyypAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","r\\1vMxRG",[])),
    <<"rvMxRG">> = iolist_to_binary(re:replace("aaabcxyzpqrrrabbxyyyypAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","r\\1vMxRG",[global])),
    <<"PNbQpnwvNqPbU">> = iolist_to_binary(re:replace("aaabcxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","PNbQpnwvNqPb\\1U",[])),
    <<"PNbQpnwvNqPbU">> = iolist_to_binary(re:replace("aaabcxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","PNbQpnwvNqPb\\1U",[global])),
    <<"aaabcxyzpqrrrabbxyyyypqqAzzYVt">> = iolist_to_binary(re:replace("aaabcxyzpqrrrabbxyyyypqqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","&YVt",[])),
    <<"aaabcxyzpqrrrabbxyyyypqqAzzYVt">> = iolist_to_binary(re:replace("aaabcxyzpqrrrabbxyyyypqqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","&YVt",[global])),
    <<"gMA">> = iolist_to_binary(re:replace("aaabcxyzpqrrrabbxyyyypqqqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","gMA",[])),
    <<"gMA">> = iolist_to_binary(re:replace("aaabcxyzpqrrrabbxyyyypqqqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","gMA",[global])),
    <<"PkGaaabcxyzpqrrrabbxyyyypqqqqAzzHIbA">> = iolist_to_binary(re:replace("aaabcxyzpqrrrabbxyyyypqqqqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","PkG&HIbA",[])),
    <<"PkGaaabcxyzpqrrrabbxyyyypqqqqAzzHIbA">> = iolist_to_binary(re:replace("aaabcxyzpqrrrabbxyyyypqqqqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","PkG&HIbA",[global])),
    <<"NAVDRk">> = iolist_to_binary(re:replace("aaabcxyzpqrrrabbxyyyypqqqqqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","N\\1AVDRk\\1",[])),
    <<"NAVDRk">> = iolist_to_binary(re:replace("aaabcxyzpqrrrabbxyyyypqqqqqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","N\\1AVDRk\\1",[global])),
    <<"l">> = iolist_to_binary(re:replace("aaabcxyzpqrrrabbxyyyypqqqqqqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","l",[])),
    <<"l">> = iolist_to_binary(re:replace("aaabcxyzpqrrrabbxyyyypqqqqqqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","l",[global])),
    <<"i">> = iolist_to_binary(re:replace("aaaabcxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","i",[])),
    <<"i">> = iolist_to_binary(re:replace("aaaabcxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","i",[global])),
    <<"gsLSabxyzzpqrrrabbxyyyypqAzzmSnQdb">> = iolist_to_binary(re:replace("abxyzzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","gsLS&mSnQdb",[])),
    <<"gsLSabxyzzpqrrrabbxyyyypqAzzmSnQdb">> = iolist_to_binary(re:replace("abxyzzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","gsLS&mSnQdb",[global])),
    <<"kaabxyzzzpqrrrabbxyyyypqAzzKdaabxyzzzpqrrrabbxyyyypqAzzaabxyzzzpqrrrabbxyyyypqAzzoPf">> = iolist_to_binary(re:replace("aabxyzzzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","k\\1&Kd&&oPf",[])),
    <<"kaabxyzzzpqrrrabbxyyyypqAzzKdaabxyzzzpqrrrabbxyyyypqAzzaabxyzzzpqrrrabbxyyyypqAzzoPf">> = iolist_to_binary(re:replace("aabxyzzzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","k\\1&Kd&&oPf",[global])),
    <<"dgKHkAqsVS">> = iolist_to_binary(re:replace("aaabxyzzzzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","dgKH\\1kAqsVS",[])),
    <<"dgKHkAqsVS">> = iolist_to_binary(re:replace("aaabxyzzzzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","dgKH\\1kAqsVS",[global])),
    <<"meKaaaabxyzzzzpqrrrabbxyyyypqAzzPvFP">> = iolist_to_binary(re:replace("aaaabxyzzzzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","\\1meK&\\1\\1PvFP",[])),
    <<"meKaaaabxyzzzzpqrrrabbxyyyypqAzzPvFP">> = iolist_to_binary(re:replace("aaaabxyzzzzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","\\1meK&\\1\\1PvFP",[global])),
    <<"YNabcxyzzpqrrrabbxyyyypqAzzTEpGJfWxCPabcxyzzpqrrrabbxyyyypqAzz">> = iolist_to_binary(re:replace("abcxyzzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","YN&TEpGJfWxCP&",[])),
    <<"YNabcxyzzpqrrrabbxyyyypqAzzTEpGJfWxCPabcxyzzpqrrrabbxyyyypqAzz">> = iolist_to_binary(re:replace("abcxyzzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","YN&TEpGJfWxCP&",[global])),
    <<"SaabcxyzzzpqrrrabbxyyyypqAzzwJjqEgHHwYYq">> = iolist_to_binary(re:replace("aabcxyzzzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","S&w\\1JjqE\\1gHHwYYq",[])),
    <<"SaabcxyzzzpqrrrabbxyyyypqAzzwJjqEgHHwYYq">> = iolist_to_binary(re:replace("aabcxyzzzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","S&w\\1JjqE\\1gHHwYYq",[global])),
    <<"aaabcxyzzzzpqrrrabbxyyyypqAzzGwVGaaabcxyzzzzpqrrrabbxyyyypqAzzlvXk">> = iolist_to_binary(re:replace("aaabcxyzzzzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","&GwVG&lvXk\\1\\1",[])),
    <<"aaabcxyzzzzpqrrrabbxyyyypqAzzGwVGaaabcxyzzzzpqrrrabbxyyyypqAzzlvXk">> = iolist_to_binary(re:replace("aaabcxyzzzzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","&GwVG&lvXk\\1\\1",[global])),
    <<"aaaabcxyzzzzpqrrrabbxyyyypqAzznNjmmVWTBVTADm">> = iolist_to_binary(re:replace("aaaabcxyzzzzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","&nN\\1jmmVWTBVTADm",[])),
    <<"aaaabcxyzzzzpqrrrabbxyyyypqAzznNjmmVWTBVTADm">> = iolist_to_binary(re:replace("aaaabcxyzzzzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","&nN\\1jmmVWTBVTADm",[global])),
    <<"PoqkwiYVqDWATAJwKaaaabcxyzzzzpqrrrabbbxyyyypqAzz">> = iolist_to_binary(re:replace("aaaabcxyzzzzpqrrrabbbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","Po\\1qkwiYVqDWATAJw\\1K&",[])),
    <<"PoqkwiYVqDWATAJwKaaaabcxyzzzzpqrrrabbbxyyyypqAzz">> = iolist_to_binary(re:replace("aaaabcxyzzzzpqrrrabbbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","Po\\1qkwiYVqDWATAJw\\1K&",[global])),
    <<"JNUVqARhXKto">> = iolist_to_binary(re:replace("aaaabcxyzzzzpqrrrabbbxyyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","JNUVqARh\\1\\1XKto",[])),
    <<"JNUVqARhXKto">> = iolist_to_binary(re:replace("aaaabcxyzzzzpqrrrabbbxyyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","JNUVqARh\\1\\1XKto",[global])),
    <<"ssvjVvyXuCJeoj">> = iolist_to_binary(re:replace("aaabcxyzpqrrrabbxyyyypABzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","ss\\1vjVvyXuCJ\\1eoj\\1",[])),
    <<"ssvjVvyXuCJeoj">> = iolist_to_binary(re:replace("aaabcxyzpqrrrabbxyyyypABzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","ss\\1vjVvyXuCJ\\1eoj\\1",[global])),
    <<"IKBpn">> = iolist_to_binary(re:replace("aaabcxyzpqrrrabbxyyyypABBzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","IK\\1Bpn",[])),
    <<"IKBpn">> = iolist_to_binary(re:replace("aaabcxyzpqrrrabbxyyyypABBzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","IK\\1Bpn",[global])),
    <<">>>GGeaaabxyzpqrrrabbxyyyypqAzzrpKAckaaabxyzpqrrrabbxyyyypqAzzaGC">> = iolist_to_binary(re:replace(">>>aaabxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","GGe&rpKAc\\1k&aGC",[])),
    <<">>>GGeaaabxyzpqrrrabbxyyyypqAzzrpKAckaaabxyzpqrrrabbxyyyypqAzzaGC">> = iolist_to_binary(re:replace(">>>aaabxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","GGe&rpKAc\\1k&aGC",[global])),
    <<">P">> = iolist_to_binary(re:replace(">aaaabxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","P",[])),
    <<">P">> = iolist_to_binary(re:replace(">aaaabxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","P",[global])),
    <<">>>>abcxyzpqrrrabbxyyyypqAzzqKSkoXQtabcxyzpqrrrabbxyyyypqAzzabcxyzpqrrrabbxyyyypqAzzGFnXukr">> = iolist_to_binary(re:replace(">>>>abcxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","&qKSkoXQt&&GFnXukr",[])),
    <<">>>>abcxyzpqrrrabbxyyyypqAzzqKSkoXQtabcxyzpqrrrabbxyyyypqAzzabcxyzpqrrrabbxyyyypqAzzGFnXukr">> = iolist_to_binary(re:replace(">>>>abcxyzpqrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","&qKSkoXQt&&GFnXukr",[global])),
    <<"abxyzpqrrabbxyyyypqAzz">> = iolist_to_binary(re:replace("abxyzpqrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","th\\1ha",[])),
    <<"abxyzpqrrabbxyyyypqAzz">> = iolist_to_binary(re:replace("abxyzpqrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","th\\1ha",[global])),
    <<"abxyzpqrrrrabbxyyyypqAzz">> = iolist_to_binary(re:replace("abxyzpqrrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","&h&ni&NOS&oHE&M&DW",[])),
    <<"abxyzpqrrrrabbxyyyypqAzz">> = iolist_to_binary(re:replace("abxyzpqrrrrabbxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","&h&ni&NOS&oHE&M&DW",[global])),
    <<"abxyzpqrrrabxyyyypqAzz">> = iolist_to_binary(re:replace("abxyzpqrrrabxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","DyO",[])),
    <<"abxyzpqrrrabxyyyypqAzz">> = iolist_to_binary(re:replace("abxyzpqrrrabxyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","DyO",[global])),
    <<"aaaabcxyzzzzpqrrrabbbxyyyyyypqAzz">> = iolist_to_binary(re:replace("aaaabcxyzzzzpqrrrabbbxyyyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","nRi\\1FPGQknWL",[])),
    <<"aaaabcxyzzzzpqrrrabbbxyyyyyypqAzz">> = iolist_to_binary(re:replace("aaaabcxyzzzzpqrrrabbbxyyyyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","nRi\\1FPGQknWL",[global])),
    <<"aaaabcxyzzzzpqrrrabbbxyyypqAzz">> = iolist_to_binary(re:replace("aaaabcxyzzzzpqrrrabbbxyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","Gx\\1lJTyU\\1&dN\\1lmHTg",[])),
    <<"aaaabcxyzzzzpqrrrabbbxyyypqAzz">> = iolist_to_binary(re:replace("aaaabcxyzzzzpqrrrabbbxyyypqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","Gx\\1lJTyU\\1&dN\\1lmHTg",[global])),
    <<"aaabcxyzpqrrrabbxyyyypqqqqqqqAzz">> = iolist_to_binary(re:replace("aaabcxyzpqrrrabbxyyyypqqqqqqqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","uX",[])),
    <<"aaabcxyzpqrrrabbxyyyypqqqqqqqAzz">> = iolist_to_binary(re:replace("aaabcxyzpqrrrabbxyyyypqqqqqqqAzz","a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","uX",[global])),
    <<"uPabcabcP">> = iolist_to_binary(re:replace("abczz","^(abc){1,2}zz","uP\\1\\1P",[])),
    <<"uPabcabcP">> = iolist_to_binary(re:replace("abczz","^(abc){1,2}zz","uP\\1\\1P",[global])),
    <<"AabcabczzNnWikVeHlabcthmw">> = iolist_to_binary(re:replace("abcabczz","^(abc){1,2}zz","A&NnWikVeHl\\1thmw",[])),
    <<"AabcabczzNnWikVeHlabcthmw">> = iolist_to_binary(re:replace("abcabczz","^(abc){1,2}zz","A&NnWikVeHl\\1thmw",[global])),
    <<"zz">> = iolist_to_binary(re:replace("zz","^(abc){1,2}zz","ljC",[])),
    <<"zz">> = iolist_to_binary(re:replace("zz","^(abc){1,2}zz","ljC",[global])),
    <<"abcabcabczz">> = iolist_to_binary(re:replace("abcabcabczz","^(abc){1,2}zz","H&dW",[])),
    <<"abcabcabczz">> = iolist_to_binary(re:replace("abcabcabczz","^(abc){1,2}zz","H&dW",[global])),
    <<">>abczz">> = iolist_to_binary(re:replace(">>abczz","^(abc){1,2}zz","NaUG",[])),
    <<">>abczz">> = iolist_to_binary(re:replace(">>abczz","^(abc){1,2}zz","NaUG",[global])),
    <<"jed">> = iolist_to_binary(re:replace("bc","^(b+?|a){1,2}?c","jed",[])),
    <<"jed">> = iolist_to_binary(re:replace("bc","^(b+?|a){1,2}?c","jed",[global])),
    <<"IfDMCUaBCbUiUD">> = iolist_to_binary(re:replace("bbc","^(b+?|a){1,2}?c","IfDMCUaBC\\1UiUD",[])),
    <<"IfDMCUaBCbUiUD">> = iolist_to_binary(re:replace("bbc","^(b+?|a){1,2}?c","IfDMCUaBC\\1UiUD",[global])),
    <<"bbbcaiQbbbcWXgAtsqFbbbbbcb">> = iolist_to_binary(re:replace("bbbc","^(b+?|a){1,2}?c","&aiQ&WXgAtsqF\\1&b",[])),
    <<"bbbcaiQbbbcWXgAtsqFbbbbbcb">> = iolist_to_binary(re:replace("bbbc","^(b+?|a){1,2}?c","&aiQ&WXgAtsqF\\1&b",[global])),
    <<"SOnaIUtbacSM">> = iolist_to_binary(re:replace("bac","^(b+?|a){1,2}?c","SOn\\1IUt&SM",[])),
    <<"SOnaIUtbacSM">> = iolist_to_binary(re:replace("bac","^(b+?|a){1,2}?c","SOn\\1IUt&SM",[global])),
    <<"Obruak">> = iolist_to_binary(re:replace("bbac","^(b+?|a){1,2}?c","Obru\\1k",[])),
    <<"Obruak">> = iolist_to_binary(re:replace("bbac","^(b+?|a){1,2}?c","Obru\\1k",[global])),
    <<"YJSoHCQdPaswf">> = iolist_to_binary(re:replace("aac","^(b+?|a){1,2}?c","YJSoHCQdP\\1swf",[])),
    <<"YJSoHCQdPaswf">> = iolist_to_binary(re:replace("aac","^(b+?|a){1,2}?c","YJSoHCQdP\\1swf",[global])),
    <<"abbbbbbbbbbbcc">> = iolist_to_binary(re:replace("abbbbbbbbbbbc","^(b+?|a){1,2}?c","&c",[])),
    <<"abbbbbbbbbbbcc">> = iolist_to_binary(re:replace("abbbbbbbbbbbc","^(b+?|a){1,2}?c","&c",[global])),
    <<"jcBr">> = iolist_to_binary(re:replace("bbbbbbbbbbbac","^(b+?|a){1,2}?c","jcBr",[])),
    <<"jcBr">> = iolist_to_binary(re:replace("bbbbbbbbbbbac","^(b+?|a){1,2}?c","jcBr",[global])),
    <<"aaac">> = iolist_to_binary(re:replace("aaac","^(b+?|a){1,2}?c","u\\1oLR",[])),
    <<"aaac">> = iolist_to_binary(re:replace("aaac","^(b+?|a){1,2}?c","u\\1oLR",[global])),
    <<"abbbbbbbbbbbac">> = iolist_to_binary(re:replace("abbbbbbbbbbbac","^(b+?|a){1,2}?c","qVS\\1gCR",[])),
    <<"abbbbbbbbbbbac">> = iolist_to_binary(re:replace("abbbbbbbbbbbac","^(b+?|a){1,2}?c","qVS\\1gCR",[global])),
    <<"ebcbclubvXbcEjbrQGRDbclv">> = iolist_to_binary(re:replace("bc","^(b+|a){1,2}c","e&&lu\\1vX&EjbrQGRD&lv",[])),
    <<"ebcbclubvXbcEjbrQGRDbclv">> = iolist_to_binary(re:replace("bc","^(b+|a){1,2}c","e&&lu\\1vX&EjbrQGRD&lv",[global])),
    <<"bbcofSdXa">> = iolist_to_binary(re:replace("bbc","^(b+|a){1,2}c","&ofSdXa",[])),
    <<"bbcofSdXa">> = iolist_to_binary(re:replace("bbc","^(b+|a){1,2}c","&ofSdXa",[global])),
    <<"yeCWNqemq">> = iolist_to_binary(re:replace("bbbc","^(b+|a){1,2}c","yeCWNqemq",[])),
    <<"yeCWNqemq">> = iolist_to_binary(re:replace("bbbc","^(b+|a){1,2}c","yeCWNqemq",[global])),
    <<"HvbaccsaJrdMbac">> = iolist_to_binary(re:replace("bac","^(b+|a){1,2}c","Hv&cs\\1JrdM&",[])),
    <<"HvbaccsaJrdMbac">> = iolist_to_binary(re:replace("bac","^(b+|a){1,2}c","Hv&cs\\1JrdM&",[global])),
    <<"qRubbacFTMeaWdERwX">> = iolist_to_binary(re:replace("bbac","^(b+|a){1,2}c","qRu&FTMe\\1WdERwX",[])),
    <<"qRubbacFTMeaWdERwX">> = iolist_to_binary(re:replace("bbac","^(b+|a){1,2}c","qRu&FTMe\\1WdERwX",[global])),
    <<"aacdbaacaWigSlFD">> = iolist_to_binary(re:replace("aac","^(b+|a){1,2}c","&db&\\1WigSlFD",[])),
    <<"aacdbaacaWigSlFD">> = iolist_to_binary(re:replace("aac","^(b+|a){1,2}c","&db&\\1WigSlFD",[global])),
    <<"jbbbbbbbbbbbGWX">> = iolist_to_binary(re:replace("abbbbbbbbbbbc","^(b+|a){1,2}c","j\\1GWX",[])),
    <<"jbbbbbbbbbbbGWX">> = iolist_to_binary(re:replace("abbbbbbbbbbbc","^(b+|a){1,2}c","j\\1GWX",[global])),
    <<"tRXTQuVicYa">> = iolist_to_binary(re:replace("bbbbbbbbbbbac","^(b+|a){1,2}c","tRXTQuVicY\\1",[])),
    <<"tRXTQuVicYa">> = iolist_to_binary(re:replace("bbbbbbbbbbbac","^(b+|a){1,2}c","tRXTQuVicY\\1",[global])),
    <<"aaac">> = iolist_to_binary(re:replace("aaac","^(b+|a){1,2}c","\\1&WS&S&\\1uTERLsT",[])),
    <<"aaac">> = iolist_to_binary(re:replace("aaac","^(b+|a){1,2}c","\\1&WS&S&\\1uTERLsT",[global])),
    <<"abbbbbbbbbbbac">> = iolist_to_binary(re:replace("abbbbbbbbbbbac","^(b+|a){1,2}c","DB&&KcnVC",[])),
    <<"abbbbbbbbbbbac">> = iolist_to_binary(re:replace("abbbbbbbbbbbac","^(b+|a){1,2}c","DB&&KcnVC",[global])),
    <<"EeIDBbabcibagibabcbaba">> = iolist_to_binary(re:replace("babc","^(ba|b*){1,2}?bc","EeIDB&i\\1gi&\\1\\1",[])),
    <<"EeIDBbabcibagibabcbaba">> = iolist_to_binary(re:replace("babc","^(ba|b*){1,2}?bc","EeIDB&i\\1gi&\\1\\1",[global])),
    <<"abbabcobbabcHxqiwbbabcjogpDTgJ">> = iolist_to_binary(re:replace("bbabc","^(ba|b*){1,2}?bc","a&o&Hxqiw&jogpDTgJ",[])),
    <<"abbabcobbabcHxqiwbbabcjogpDTgJ">> = iolist_to_binary(re:replace("bbabc","^(ba|b*){1,2}?bc","a&o&Hxqiw&jogpDTgJ",[global])),
    <<"bababcGbababcbahbawNkbababcYwpciljc">> = iolist_to_binary(re:replace("bababc","^(ba|b*){1,2}?bc","&G&\\1h\\1wNk&Ywpciljc",[])),
    <<"bababcGbababcbahbawNkbababcYwpciljc">> = iolist_to_binary(re:replace("bababc","^(ba|b*){1,2}?bc","&G&\\1h\\1wNk&Ywpciljc",[global])),
    <<"bababbc">> = iolist_to_binary(re:replace("bababbc","^(ba|b*){1,2}?bc","HEjJIPg\\1n\\1&kTh",[])),
    <<"bababbc">> = iolist_to_binary(re:replace("bababbc","^(ba|b*){1,2}?bc","HEjJIPg\\1n\\1&kTh",[global])),
    <<"babababc">> = iolist_to_binary(re:replace("babababc","^(ba|b*){1,2}?bc","&P",[])),
    <<"babababc">> = iolist_to_binary(re:replace("babababc","^(ba|b*){1,2}?bc","&P",[global])),
    <<"kGDMaIl;zKSq">> = iolist_to_binary(re:replace(";z","^\\ca\\cA\\c[;\\c:","kGDMa\\1Il&KSq",[])),
    <<"kGDMaIl;zKSq">> = iolist_to_binary(re:replace(";z","^\\ca\\cA\\c[;\\c:","kGDMa\\1Il&KSq",[global])),
    <<"yLoaOLYmIGfTNaithing">> = iolist_to_binary(re:replace("athing","^[ab\\]cde]","\\1\\1yLo&OLYmIGfTN&i",[])),
    <<"yLoaOLYmIGfTNaithing">> = iolist_to_binary(re:replace("athing","^[ab\\]cde]","\\1\\1yLo&OLYmIGfTN&i",[global])),
    <<"pMjVcthing">> = iolist_to_binary(re:replace("bthing","^[ab\\]cde]","pMjVc",[])),
    <<"pMjVcthing">> = iolist_to_binary(re:replace("bthing","^[ab\\]cde]","pMjVc",[global])),
    <<"wTthing">> = iolist_to_binary(re:replace("]thing","^[ab\\]cde]","wT",[])),
    <<"wTthing">> = iolist_to_binary(re:replace("]thing","^[ab\\]cde]","wT",[global])),
    <<"gcdFfWePhsRcXNVqthing">> = iolist_to_binary(re:replace("cthing","^[ab\\]cde]","g&dFfWePhsR&XN\\1Vq",[])),
    <<"gcdFfWePhsRcXNVqthing">> = iolist_to_binary(re:replace("cthing","^[ab\\]cde]","g&dFfWePhsR&XN\\1Vq",[global])),
    <<"thing">> = iolist_to_binary(re:replace("dthing","^[ab\\]cde]","\\1",[])),
    <<"thing">> = iolist_to_binary(re:replace("dthing","^[ab\\]cde]","\\1",[global])),
    <<"HQtSNthing">> = iolist_to_binary(re:replace("ething","^[ab\\]cde]","HQ\\1tSN",[])),
    <<"HQtSNthing">> = iolist_to_binary(re:replace("ething","^[ab\\]cde]","HQ\\1tSN",[global])),
    <<"fthing">> = iolist_to_binary(re:replace("fthing","^[ab\\]cde]","W\\1",[])),
    <<"fthing">> = iolist_to_binary(re:replace("fthing","^[ab\\]cde]","W\\1",[global])),
    <<"[thing">> = iolist_to_binary(re:replace("[thing","^[ab\\]cde]","NsH",[])),
    <<"[thing">> = iolist_to_binary(re:replace("[thing","^[ab\\]cde]","NsH",[global])),
    <<"\\thing">> = iolist_to_binary(re:replace("\\thing","^[ab\\]cde]","n\\1QUxH&c\\1vARRpu\\1",[])),
    <<"\\thing">> = iolist_to_binary(re:replace("\\thing","^[ab\\]cde]","n\\1QUxH&c\\1vARRpu\\1",[global])),
    <<"X]pfoImgghpuaCjhT]thing">> = iolist_to_binary(re:replace("]thing","^[]cde]","X&pfoImgghpuaCj\\1h\\1T&",[])),
    <<"X]pfoImgghpuaCjhT]thing">> = iolist_to_binary(re:replace("]thing","^[]cde]","X&pfoImgghpuaCj\\1h\\1T&",[global])),
    <<"OdyBuNmjscQHbcthing">> = iolist_to_binary(re:replace("cthing","^[]cde]","O\\1dyBuNmjs&QHb&",[])),
    <<"OdyBuNmjscQHbcthing">> = iolist_to_binary(re:replace("cthing","^[]cde]","O\\1dyBuNmjs&QHb&",[global])),
    <<"MjwccSIyaddXkruRthing">> = iolist_to_binary(re:replace("dthing","^[]cde]","MjwccSIy\\1a&&XkruR",[])),
    <<"MjwccSIyaddXkruRthing">> = iolist_to_binary(re:replace("dthing","^[]cde]","MjwccSIy\\1a&&XkruR",[global])),
    <<"KmseihneDthing">> = iolist_to_binary(re:replace("ething","^[]cde]","Kms\\1eihn&D",[])),
    <<"KmseihneDthing">> = iolist_to_binary(re:replace("ething","^[]cde]","Kms\\1eihn&D",[global])),
    <<"athing">> = iolist_to_binary(re:replace("athing","^[]cde]","V\\1\\1tYy\\1",[])),
    <<"athing">> = iolist_to_binary(re:replace("athing","^[]cde]","V\\1\\1tYy\\1",[global])),
    <<"fthing">> = iolist_to_binary(re:replace("fthing","^[]cde]","B\\1UicE\\1&cTfP",[])),
    <<"fthing">> = iolist_to_binary(re:replace("fthing","^[]cde]","B\\1UicE\\1&cTfP",[global])),
    <<"Jthing">> = iolist_to_binary(re:replace("fthing","^[^ab\\]cde]","J",[])),
    <<"Jthing">> = iolist_to_binary(re:replace("fthing","^[^ab\\]cde]","J",[global])),
    <<"ecfIHwcPLwCQVmthing">> = iolist_to_binary(re:replace("[thing","^[^ab\\]cde]","ecfIHwcPLwCQVm",[])),
    <<"ecfIHwcPLwCQVmthing">> = iolist_to_binary(re:replace("[thing","^[^ab\\]cde]","ecfIHwcPLwCQVm",[global])),
    <<"jthing">> = iolist_to_binary(re:replace("\\thing","^[^ab\\]cde]","j\\1",[])),
    <<"jthing">> = iolist_to_binary(re:replace("\\thing","^[^ab\\]cde]","j\\1",[global])),
    <<"athing">> = iolist_to_binary(re:replace("athing","^[^ab\\]cde]","XitEhS",[])),
    <<"athing">> = iolist_to_binary(re:replace("athing","^[^ab\\]cde]","XitEhS",[global])),
    <<"bthing">> = iolist_to_binary(re:replace("bthing","^[^ab\\]cde]","jftUvqtHSk&",[])),
    <<"bthing">> = iolist_to_binary(re:replace("bthing","^[^ab\\]cde]","jftUvqtHSk&",[global])),
    <<"]thing">> = iolist_to_binary(re:replace("]thing","^[^ab\\]cde]","BVEV&n",[])),
    <<"]thing">> = iolist_to_binary(re:replace("]thing","^[^ab\\]cde]","BVEV&n",[global])),
    <<"cthing">> = iolist_to_binary(re:replace("cthing","^[^ab\\]cde]","&",[])),
    <<"cthing">> = iolist_to_binary(re:replace("cthing","^[^ab\\]cde]","&",[global])),
    <<"dthing">> = iolist_to_binary(re:replace("dthing","^[^ab\\]cde]","CLkR&&rBddXHyi&H\\1\\1rj",[])),
    <<"dthing">> = iolist_to_binary(re:replace("dthing","^[^ab\\]cde]","CLkR&&rBddXHyi&H\\1\\1rj",[global])),
    <<"ething">> = iolist_to_binary(re:replace("ething","^[^ab\\]cde]","s\\1HqJwD\\1KDjCAxIofXvV",[])),
    <<"ething">> = iolist_to_binary(re:replace("ething","^[^ab\\]cde]","s\\1HqJwD\\1KDjCAxIofXvV",[global])),
    <<"hcfONJPTXathing">> = iolist_to_binary(re:replace("athing","^[^]cde]","hcfONJPTX&",[])),
    <<"hcfONJPTXathing">> = iolist_to_binary(re:replace("athing","^[^]cde]","hcfONJPTX&",[global])),
    <<"fEbyOxFupOoORfKucqkthing">> = iolist_to_binary(re:replace("fthing","^[^]cde]","&EbyOxFupOoO\\1R&Kucqk",[])),
    <<"fEbyOxFupOoORfKucqkthing">> = iolist_to_binary(re:replace("fthing","^[^]cde]","&EbyOxFupOoO\\1R&Kucqk",[global])),
    <<"]thing">> = iolist_to_binary(re:replace("]thing","^[^]cde]","ViA&j\\1r&&eE",[])),
    <<"]thing">> = iolist_to_binary(re:replace("]thing","^[^]cde]","ViA&j\\1r&&eE",[global])),
    <<"cthing">> = iolist_to_binary(re:replace("cthing","^[^]cde]","l\\1m",[])),
    <<"cthing">> = iolist_to_binary(re:replace("cthing","^[^]cde]","l\\1m",[global])),
    <<"dthing">> = iolist_to_binary(re:replace("dthing","^[^]cde]","&X",[])),
    <<"dthing">> = iolist_to_binary(re:replace("dthing","^[^]cde]","&X",[global])),
    <<"ething">> = iolist_to_binary(re:replace("ething","^[^]cde]","iexi&gnS",[])),
    <<"ething">> = iolist_to_binary(re:replace("ething","^[^]cde]","iexi&gnS",[global])),
    <<"OMrBm">> = iolist_to_binary(re:replace("0","^[0-9]+$","OMrBm",[])),
    <<"OMrBm">> = iolist_to_binary(re:replace("0","^[0-9]+$","OMrBm",[global])),
    <<"blc">> = iolist_to_binary(re:replace("1","^[0-9]+$","blc",[])),
    <<"blc">> = iolist_to_binary(re:replace("1","^[0-9]+$","blc",[global])),
    <<"rkdVhImX2ScisrkpB">> = iolist_to_binary(re:replace("2","^[0-9]+$","rkdVhImX&Sci\\1srkpB",[])),
    <<"rkdVhImX2ScisrkpB">> = iolist_to_binary(re:replace("2","^[0-9]+$","rkdVhImX&Sci\\1srkpB",[global])),
    <<"R">> = iolist_to_binary(re:replace("3","^[0-9]+$","R",[])),
    <<"R">> = iolist_to_binary(re:replace("3","^[0-9]+$","R",[global])),
    <<"MTBI4NHu4G4vMV4">> = iolist_to_binary(re:replace("4","^[0-9]+$","MTBI&N\\1Hu&G&vMV&",[])),
    <<"MTBI4NHu4G4vMV4">> = iolist_to_binary(re:replace("4","^[0-9]+$","MTBI&N\\1Hu&G&vMV&",[global])),
    <<"L5iy55rL">> = iolist_to_binary(re:replace("5","^[0-9]+$","L&iy\\1&&rL",[])),
    <<"L5iy55rL">> = iolist_to_binary(re:replace("5","^[0-9]+$","L&iy\\1&&rL",[global])),
    <<"fAGTYqLAaamIUKu">> = iolist_to_binary(re:replace("6","^[0-9]+$","fAG\\1TYq\\1LAa\\1amIUKu",[])),
    <<"fAGTYqLAaamIUKu">> = iolist_to_binary(re:replace("6","^[0-9]+$","fAG\\1TYq\\1LAa\\1amIUKu",[global])),
    <<"g7">> = iolist_to_binary(re:replace("7","^[0-9]+$","\\1\\1g&\\1",[])),
    <<"g7">> = iolist_to_binary(re:replace("7","^[0-9]+$","\\1\\1g&\\1",[global])),
    <<"XG8A8LNiMaKLa">> = iolist_to_binary(re:replace("8","^[0-9]+$","XG&A&LNiMa\\1KLa",[])),
    <<"XG8A8LNiMaKLa">> = iolist_to_binary(re:replace("8","^[0-9]+$","XG&A&LNiMa\\1KLa",[global])),
    <<"pCXwvleUk9NHE9wG9wiU">> = iolist_to_binary(re:replace("9","^[0-9]+$","pCXwvleUk&NHE&wG&wiU",[])),
    <<"pCXwvleUk9NHE9wG9wiU">> = iolist_to_binary(re:replace("9","^[0-9]+$","pCXwvleUk&NHE&wG&wiU",[global])),
    <<"DmYIuXYOFQyO10Yx10">> = iolist_to_binary(re:replace("10","^[0-9]+$","D\\1mYIuXYOFQyO&Yx&",[])),
    <<"DmYIuXYOFQyO10Yx10">> = iolist_to_binary(re:replace("10","^[0-9]+$","D\\1mYIuXYOFQyO&Yx&",[global])),
    <<"iJIfdd100">> = iolist_to_binary(re:replace("100","^[0-9]+$","iJI\\1fdd&",[])),
    <<"iJIfdd100">> = iolist_to_binary(re:replace("100","^[0-9]+$","iJI\\1fdd&",[global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","^[0-9]+$","BqndYPF\\1lxs\\1\\1hPxSdgK",[])),
    <<"abc">> = iolist_to_binary(re:replace("abc","^[0-9]+$","BqndYPF\\1lxs\\1\\1hPxSdgK",[global])),
    <<"E">> = iolist_to_binary(re:replace("enter","^.*nter","E",[])),
    <<"E">> = iolist_to_binary(re:replace("enter","^.*nter","E",[global])),
    <<"CjSIydR">> = iolist_to_binary(re:replace("inter","^.*nter","CjS\\1IydR",[])),
    <<"CjSIydR">> = iolist_to_binary(re:replace("inter","^.*nter","CjS\\1IydR",[global])),
    <<"TbRcafHXnuponterDiSF">> = iolist_to_binary(re:replace("uponter","^.*nter","Tb\\1Rca\\1fHXn&DiSF",[])),
    <<"TbRcafHXnuponterDiSF">> = iolist_to_binary(re:replace("uponter","^.*nter","Tb\\1Rca\\1fHXn&DiSF",[global])),
    <<"xxx0AMd">> = iolist_to_binary(re:replace("xxx0","^xxx[0-9]+$","&AM\\1\\1d",[])),
    <<"xxx0AMd">> = iolist_to_binary(re:replace("xxx0","^xxx[0-9]+$","&AM\\1\\1d",[global])),
    <<"LUfQMmxxx1234n">> = iolist_to_binary(re:replace("xxx1234","^xxx[0-9]+$","L\\1\\1Uf\\1Q\\1Mm&n",[])),
    <<"LUfQMmxxx1234n">> = iolist_to_binary(re:replace("xxx1234","^xxx[0-9]+$","L\\1\\1Uf\\1Q\\1Mm&n",[global])),
    <<"xxx">> = iolist_to_binary(re:replace("xxx","^xxx[0-9]+$","yty\\1&aJl&\\1&M",[])),
    <<"xxx">> = iolist_to_binary(re:replace("xxx","^xxx[0-9]+$","yty\\1&aJl&\\1&M",[global])),
    <<"eXx123">> = iolist_to_binary(re:replace("x123","^.+[0-9][0-9][0-9]$","eX&",[])),
    <<"eXx123">> = iolist_to_binary(re:replace("x123","^.+[0-9][0-9][0-9]$","eX&",[global])),
    <<"ypukToFRSissUH">> = iolist_to_binary(re:replace("x1234","^.+[0-9][0-9][0-9]$","ypukToFRSissUH",[])),
    <<"ypukToFRSissUH">> = iolist_to_binary(re:replace("x1234","^.+[0-9][0-9][0-9]$","ypukToFRSissUH",[global])),
    <<"exx123xx123dUxx123aoURFxx123N">> = iolist_to_binary(re:replace("xx123","^.+[0-9][0-9][0-9]$","e&&dU&a\\1oURF&N",[])),
    <<"exx123xx123dUxx123aoURFxx123N">> = iolist_to_binary(re:replace("xx123","^.+[0-9][0-9][0-9]$","e&&dU&a\\1oURF&N",[global])),
    <<"nrnSg123456E">> = iolist_to_binary(re:replace("123456","^.+[0-9][0-9][0-9]$","nrnSg&\\1\\1E",[])),
    <<"nrnSg123456E">> = iolist_to_binary(re:replace("123456","^.+[0-9][0-9][0-9]$","nrnSg&\\1\\1E",[global])),
    <<"123">> = iolist_to_binary(re:replace("123","^.+[0-9][0-9][0-9]$","uBv",[])),
    <<"123">> = iolist_to_binary(re:replace("123","^.+[0-9][0-9][0-9]$","uBv",[global])),
    <<"R">> = iolist_to_binary(re:replace("x123","^.+?[0-9][0-9][0-9]$","R",[])),
    <<"R">> = iolist_to_binary(re:replace("x123","^.+?[0-9][0-9][0-9]$","R",[global])),
    <<"tx1234gysx1234DIukLiJUx1234Qbx1234">> = iolist_to_binary(re:replace("x1234","^.+?[0-9][0-9][0-9]$","t&gys\\1&DIukLiJU&Qb&",[])),
    <<"tx1234gysx1234DIukLiJUx1234Qbx1234">> = iolist_to_binary(re:replace("x1234","^.+?[0-9][0-9][0-9]$","t&gys\\1&DIukLiJU&Qb&",[global])),
    <<"tIOqKYBcuXxx123">> = iolist_to_binary(re:replace("xx123","^.+?[0-9][0-9][0-9]$","tIOqKYBcuX&",[])),
    <<"tIOqKYBcuXxx123">> = iolist_to_binary(re:replace("xx123","^.+?[0-9][0-9][0-9]$","tIOqKYBcuX&",[global])),
    <<"QfE">> = iolist_to_binary(re:replace("123456","^.+?[0-9][0-9][0-9]$","QfE",[])),
    <<"QfE">> = iolist_to_binary(re:replace("123456","^.+?[0-9][0-9][0-9]$","QfE",[global])),
    <<"123">> = iolist_to_binary(re:replace("123","^.+?[0-9][0-9][0-9]$","UDbN\\1jnxythM\\1\\1sdH&",[])),
    <<"123">> = iolist_to_binary(re:replace("123","^.+?[0-9][0-9][0-9]$","UDbN\\1jnxythM\\1\\1sdH&",[global])),
    ok.
run1() ->
    <<"cUQQDAc">> = iolist_to_binary(re:replace("abc!pqr=apquxz.ixr.zzz.ac.uk","^([^!]+)!(.+)=apquxz\\.ixr\\.zzz\\.ac\\.uk$","cUQQDAc",[])),
    <<"cUQQDAc">> = iolist_to_binary(re:replace("abc!pqr=apquxz.ixr.zzz.ac.uk","^([^!]+)!(.+)=apquxz\\.ixr\\.zzz\\.ac\\.uk$","cUQQDAc",[global])),
    <<"!pqr=apquxz.ixr.zzz.ac.uk">> = iolist_to_binary(re:replace("!pqr=apquxz.ixr.zzz.ac.uk","^([^!]+)!(.+)=apquxz\\.ixr\\.zzz\\.ac\\.uk$","C\\1Vu&heU&\\1W&",[])),
    <<"!pqr=apquxz.ixr.zzz.ac.uk">> = iolist_to_binary(re:replace("!pqr=apquxz.ixr.zzz.ac.uk","^([^!]+)!(.+)=apquxz\\.ixr\\.zzz\\.ac\\.uk$","C\\1Vu&heU&\\1W&",[global])),
    <<"abc!=apquxz.ixr.zzz.ac.uk">> = iolist_to_binary(re:replace("abc!=apquxz.ixr.zzz.ac.uk","^([^!]+)!(.+)=apquxz\\.ixr\\.zzz\\.ac\\.uk$","IEc",[])),
    <<"abc!=apquxz.ixr.zzz.ac.uk">> = iolist_to_binary(re:replace("abc!=apquxz.ixr.zzz.ac.uk","^([^!]+)!(.+)=apquxz\\.ixr\\.zzz\\.ac\\.uk$","IEc",[global])),
    <<"abc!pqr=apquxz:ixr.zzz.ac.uk">> = iolist_to_binary(re:replace("abc!pqr=apquxz:ixr.zzz.ac.uk","^([^!]+)!(.+)=apquxz\\.ixr\\.zzz\\.ac\\.uk$","EJPIL\\1FHXKDCNvaTC",[])),
    <<"abc!pqr=apquxz:ixr.zzz.ac.uk">> = iolist_to_binary(re:replace("abc!pqr=apquxz:ixr.zzz.ac.uk","^([^!]+)!(.+)=apquxz\\.ixr\\.zzz\\.ac\\.uk$","EJPIL\\1FHXKDCNvaTC",[global])),
    <<"abc!pqr=apquxz.ixr.zzz.ac.ukk">> = iolist_to_binary(re:replace("abc!pqr=apquxz.ixr.zzz.ac.ukk","^([^!]+)!(.+)=apquxz\\.ixr\\.zzz\\.ac\\.uk$","P",[])),
    <<"abc!pqr=apquxz.ixr.zzz.ac.ukk">> = iolist_to_binary(re:replace("abc!pqr=apquxz.ixr.zzz.ac.ukk","^([^!]+)!(.+)=apquxz\\.ixr\\.zzz\\.ac\\.uk$","P",[global])),
    <<"Well, we need a coloneSFOJJrLwTwU::Mqm:P somewhere">> = iolist_to_binary(re:replace("Well, we need a colon: somewhere",":","eSFOJJrLwTwU&&Mqm&P",[])),
    <<"Well, we need a coloneSFOJJrLwTwU::Mqm:P somewhere">> = iolist_to_binary(re:replace("Well, we need a colon: somewhere",":","eSFOJJrLwTwU&&Mqm&P",[global])),
    <<"Fail without a colon">> = iolist_to_binary(re:replace("Fail without a colon",":","rqtBg",[])),
    <<"Fail without a colon">> = iolist_to_binary(re:replace("Fail without a colon",":","rqtBg",[global])),
    <<"BC0abcWMPvffc0abckTc">> = iolist_to_binary(re:replace("0abc","([\\da-f:]+)$","BC&WMPvffc&kTc",[caseless])),
    <<"BC0abcWMPvffc0abckTc">> = iolist_to_binary(re:replace("0abc","([\\da-f:]+)$","BC&WMPvffc&kTc",[caseless,global])),
    <<"abclabcabcabcUnabcCsPMYYkPabcabcmE">> = iolist_to_binary(re:replace("abc","([\\da-f:]+)$","&l&&&Un\\1CsPMYYkP\\1&mE",[caseless])),
    <<"abclabcabcabcUnabcCsPMYYkPabcabcmE">> = iolist_to_binary(re:replace("abc","([\\da-f:]+)$","&l&&&Un\\1CsPMYYkP\\1&mE",[caseless,global])),
    <<"IdKDfedrQfedfednfedgDfedqdofedn">> = iolist_to_binary(re:replace("fed","([\\da-f:]+)$","IdKD&rQ\\1\\1n&gD\\1qdo\\1n",[caseless])),
    <<"IdKDfedrQfedfednfedgDfedqdofedn">> = iolist_to_binary(re:replace("fed","([\\da-f:]+)$","IdKD&rQ\\1\\1n&gD\\1qdo\\1n",[caseless,global])),
    <<"RkEaqCHlxR">> = iolist_to_binary(re:replace("E","([\\da-f:]+)$","Rk\\1aqCHlxR",[caseless])),
    <<"RkEaqCHlxR">> = iolist_to_binary(re:replace("E","([\\da-f:]+)$","Rk\\1aqCHlxR",[caseless,global])),
    <<"cgy::xVdgl::">> = iolist_to_binary(re:replace("::","([\\da-f:]+)$","cgy\\1xVdgl&",[caseless])),
    <<"cgy::xVdgl::">> = iolist_to_binary(re:replace("::","([\\da-f:]+)$","cgy\\1xVdgl&",[caseless,global])),
    <<"CGIYKCWyECIvTQ">> = iolist_to_binary(re:replace("5f03:12C0::932e","([\\da-f:]+)$","CGIYKCWyECIvTQ",[caseless])),
    <<"CGIYKCWyECIvTQ">> = iolist_to_binary(re:replace("5f03:12C0::932e","([\\da-f:]+)$","CGIYKCWyECIvTQ",[caseless,global])),
    <<"fed FtyEkgdefTdefaW">> = iolist_to_binary(re:replace("fed def","([\\da-f:]+)$","FtyEkg\\1T&aW",[caseless])),
    <<"fed FtyEkgdefTdefaW">> = iolist_to_binary(re:replace("fed def","([\\da-f:]+)$","FtyEkg\\1T&aW",[caseless,global])),
    <<"Any old stuKeT">> = iolist_to_binary(re:replace("Any old stuff","([\\da-f:]+)$","KeT",[caseless])),
    <<"Any old stuKeT">> = iolist_to_binary(re:replace("Any old stuff","([\\da-f:]+)$","KeT",[caseless,global])),
    <<"0zzz">> = iolist_to_binary(re:replace("0zzz","([\\da-f:]+)$","L&ikqEJ\\1&&\\1\\1",[caseless])),
    <<"0zzz">> = iolist_to_binary(re:replace("0zzz","([\\da-f:]+)$","L&ikqEJ\\1&&\\1\\1",[caseless,global])),
    <<"gzzz">> = iolist_to_binary(re:replace("gzzz","([\\da-f:]+)$","X&R",[caseless])),
    <<"gzzz">> = iolist_to_binary(re:replace("gzzz","([\\da-f:]+)$","X&R",[caseless,global])),
    <<"fed ">> = iolist_to_binary(re:replace("fed ","([\\da-f:]+)$","tKJBvn",[caseless])),
    <<"fed ">> = iolist_to_binary(re:replace("fed ","([\\da-f:]+)$","tKJBvn",[caseless,global])),
    <<"Any old rubbish">> = iolist_to_binary(re:replace("Any old rubbish","([\\da-f:]+)$","hVg\\1P\\1\\1",[caseless])),
    <<"Any old rubbish">> = iolist_to_binary(re:replace("Any old rubbish","([\\da-f:]+)$","hVg\\1P\\1\\1",[caseless,global])),
    <<"T.1.2.3a1mxVpJ1.1.2.3egSsUBIV">> = iolist_to_binary(re:replace(".1.2.3","^.*\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$","T&a\\1mxVpJ\\1&egSsUBIV",[])),
    <<"T.1.2.3a1mxVpJ1.1.2.3egSsUBIV">> = iolist_to_binary(re:replace(".1.2.3","^.*\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$","T&a\\1mxVpJ\\1&egSsUBIV",[global])),
    <<"YWynbrCt1212">> = iolist_to_binary(re:replace("A.12.123.0","^.*\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$","YWynbrCt\\1\\1",[])),
    <<"YWynbrCt1212">> = iolist_to_binary(re:replace("A.12.123.0","^.*\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$","YWynbrCt\\1\\1",[global])),
    <<".1.2.3333">> = iolist_to_binary(re:replace(".1.2.3333","^.*\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$","gXiCw\\1HR&",[])),
    <<".1.2.3333">> = iolist_to_binary(re:replace(".1.2.3333","^.*\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$","gXiCw\\1HR&",[global])),
    <<"1.2.3">> = iolist_to_binary(re:replace("1.2.3","^.*\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$","p&jt\\1a",[])),
    <<"1.2.3">> = iolist_to_binary(re:replace("1.2.3","^.*\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$","p&jt\\1a",[global])),
    <<"1234.2.3">> = iolist_to_binary(re:replace("1234.2.3","^.*\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$","\\1RDbvMJ&",[])),
    <<"1234.2.3">> = iolist_to_binary(re:replace("1234.2.3","^.*\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})$","\\1RDbvMJ&",[global])),
    <<"I11c11 IN SOA non-sp1 non-sp2(1AnFPifD1 IN SOA non-sp1 non-sp2(C">> = iolist_to_binary(re:replace("1 IN SOA non-sp1 non-sp2(","^(\\d+)\\s+IN\\s+SOA\\s+(\\S+)\\s+(\\S+)\\s*\\(\\s*$","I\\1\\1c\\1&\\1AnFPifD&C",[])),
    <<"I11c11 IN SOA non-sp1 non-sp2(1AnFPifD1 IN SOA non-sp1 non-sp2(C">> = iolist_to_binary(re:replace("1 IN SOA non-sp1 non-sp2(","^(\\d+)\\s+IN\\s+SOA\\s+(\\S+)\\s+(\\S+)\\s*\\(\\s*$","I\\1\\1c\\1&\\1AnFPifD&C",[global])),
    <<"byM1qyusNtwD">> = iolist_to_binary(re:replace("1    IN    SOA    non-sp1    non-sp2   (","^(\\d+)\\s+IN\\s+SOA\\s+(\\S+)\\s+(\\S+)\\s*\\(\\s*$","byM\\1qyusNtwD",[])),
    <<"byM1qyusNtwD">> = iolist_to_binary(re:replace("1    IN    SOA    non-sp1    non-sp2   (","^(\\d+)\\s+IN\\s+SOA\\s+(\\S+)\\s+(\\S+)\\s*\\(\\s*$","byM\\1qyusNtwD",[global])),
    <<"1IN SOA non-sp1 non-sp2(">> = iolist_to_binary(re:replace("1IN SOA non-sp1 non-sp2(","^(\\d+)\\s+IN\\s+SOA\\s+(\\S+)\\s+(\\S+)\\s*\\(\\s*$","wOsWUYkpQEYQO",[])),
    <<"1IN SOA non-sp1 non-sp2(">> = iolist_to_binary(re:replace("1IN SOA non-sp1 non-sp2(","^(\\d+)\\s+IN\\s+SOA\\s+(\\S+)\\s+(\\S+)\\s*\\(\\s*$","wOsWUYkpQEYQO",[global])),
    <<"ehPta.NEIPceGP">> = iolist_to_binary(re:replace("a.","^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$","ehPt&NEI\\1P\\1ceGP",[])),
    <<"ehPta.NEIPceGP">> = iolist_to_binary(re:replace("a.","^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$","ehPt&NEI\\1P\\1ceGP",[global])),
    <<"uPrZ.fewTZ.qIyTD">> = iolist_to_binary(re:replace("Z.","^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$","u\\1Pr&fewT&qIyT\\1D",[])),
    <<"uPrZ.fewTZ.qIyTD">> = iolist_to_binary(re:replace("Z.","^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$","u\\1Pr&fewT&qIyT\\1D",[global])),
    <<"rTODdv2.KU2.">> = iolist_to_binary(re:replace("2.","^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$","rTODd\\1v&KU&",[])),
    <<"rTODdv2.KU2.">> = iolist_to_binary(re:replace("2.","^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$","rTODd\\1v&KU&",[global])),
    <<"Uhjfwcab-c.pq-r.wPab-c.pq-r.Mk.pq-rSM">> = iolist_to_binary(re:replace("ab-c.pq-r.","^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$","Uhjfwc&wP&Mk\\1SM",[])),
    <<"Uhjfwcab-c.pq-r.wPab-c.pq-r.Mk.pq-rSM">> = iolist_to_binary(re:replace("ab-c.pq-r.","^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$","Uhjfwc&wP&Mk\\1SM",[global])),
    <<"ts.ukwsxk.zzz.ac.uk.t.uksxk.zzz.ac.uk.nWpuswM.uksxk.zzz.ac.uk.v">> = iolist_to_binary(re:replace("sxk.zzz.ac.uk.","^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$","ts\\1w&t\\1&nWpuswM\\1&v",[])),
    <<"ts.ukwsxk.zzz.ac.uk.t.uksxk.zzz.ac.uk.nWpuswM.uksxk.zzz.ac.uk.v">> = iolist_to_binary(re:replace("sxk.zzz.ac.uk.","^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$","ts\\1w&t\\1&nWpuswM\\1&v",[global])),
    <<"fXltx-.y-.Xx-.y-.x-.y-.f.y-iLx-.y-.tsbvQOv">> = iolist_to_binary(re:replace("x-.y-.","^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$","fXlt&X&&f\\1iL&tsbvQOv",[])),
    <<"fXltx-.y-.Xx-.y-.x-.y-.f.y-iLx-.y-.tsbvQOv">> = iolist_to_binary(re:replace("x-.y-.","^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$","fXlt&X&&f\\1iL&tsbvQOv",[global])),
    <<"-abc.peq.">> = iolist_to_binary(re:replace("-abc.peq.","^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$","AAW&xM",[])),
    <<"-abc.peq.">> = iolist_to_binary(re:replace("-abc.peq.","^[a-zA-Z\\d][a-zA-Z\\d\\-]*(\\.[a-zA-Z\\d][a-zA-z\\d\\-]*)*\\.$","AAW&xM",[global])),
    <<"Sn*.aHJy">> = iolist_to_binary(re:replace("*.a","^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$","\\1S\\1n&HJy",[])),
    <<"Sn*.aHJy">> = iolist_to_binary(re:replace("*.a","^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$","\\1S\\1n&HJy",[global])),
    <<"P*.b0-ate">> = iolist_to_binary(re:replace("*.b0-a","^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$","P&te",[])),
    <<"P*.b0-ate">> = iolist_to_binary(re:replace("*.b0-a","^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$","P&te",[global])),
    <<"3-bRRODRx3-bgQSrTrwC">> = iolist_to_binary(re:replace("*.c3-b.c","^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$","\\1RRODRx\\1gQSrTrwC",[])),
    <<"3-bRRODRx3-bgQSrTrwC">> = iolist_to_binary(re:replace("*.c3-b.c","^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$","\\1RRODRx\\1gQSrTrwC",[global])),
    <<"C-a">> = iolist_to_binary(re:replace("*.c-a.b-c","^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$","C\\1",[])),
    <<"C-a">> = iolist_to_binary(re:replace("*.c-a.b-c","^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$","C\\1",[global])),
    <<"*.0">> = iolist_to_binary(re:replace("*.0","^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$","MtJG&NF\\1PgL&gg\\1",[])),
    <<"*.0">> = iolist_to_binary(re:replace("*.0","^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$","MtJG&NF\\1PgL&gg\\1",[global])),
    <<"*.a-">> = iolist_to_binary(re:replace("*.a-","^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$","yL&WjLe&\\1NC&GCG\\1xD",[])),
    <<"*.a-">> = iolist_to_binary(re:replace("*.a-","^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$","yL&WjLe&\\1NC&GCG\\1xD",[global])),
    <<"*.a-b.c-">> = iolist_to_binary(re:replace("*.a-b.c-","^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$","bJbtPIaR",[])),
    <<"*.a-b.c-">> = iolist_to_binary(re:replace("*.a-b.c-","^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$","bJbtPIaR",[global])),
    <<"*.c-a.0-c">> = iolist_to_binary(re:replace("*.c-a.0-c","^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$","T\\1",[])),
    <<"*.c-a.0-c">> = iolist_to_binary(re:replace("*.c-a.0-c","^\\*\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?(\\.[a-z]([a-z\\-\\d]*[a-z\\d]+)?)*$","T\\1",[global])),
    <<"dOdvJFabdede">> = iolist_to_binary(re:replace("abde","^(?=ab(de))(abd)(e)","dOdvJF&\\1",[])),
    <<"dOdvJFabdede">> = iolist_to_binary(re:replace("abde","^(?=ab(de))(abd)(e)","dOdvJF&\\1",[global])),
    <<"hLnol">> = iolist_to_binary(re:replace("abdf","^(?!(ab)de|x)(abd)(f)","hLnol",[])),
    <<"hLnol">> = iolist_to_binary(re:replace("abdf","^(?!(ab)de|x)(abd)(f)","hLnol",[global])),
    <<"fFUsmkabcdLtxcd">> = iolist_to_binary(re:replace("abcd","^(?=(ab(cd)))(ab)","fFUsmk\\1Ltx",[])),
    <<"fFUsmkabcdLtxcd">> = iolist_to_binary(re:replace("abcd","^(?=(ab(cd)))(ab)","fFUsmk\\1Ltx",[global])),
    <<"v">> = iolist_to_binary(re:replace("a.b.c.d","^[\\da-f](\\.[\\da-f])*$","v",[caseless])),
    <<"v">> = iolist_to_binary(re:replace("a.b.c.d","^[\\da-f](\\.[\\da-f])*$","v",[caseless,global])),
    <<"tcSnhlApa">> = iolist_to_binary(re:replace("A.B.C.D","^[\\da-f](\\.[\\da-f])*$","tcSnhlApa",[caseless])),
    <<"tcSnhlApa">> = iolist_to_binary(re:replace("A.B.C.D","^[\\da-f](\\.[\\da-f])*$","tcSnhlApa",[caseless,global])),
    <<"rdN">> = iolist_to_binary(re:replace("a.b.c.1.2.3.C","^[\\da-f](\\.[\\da-f])*$","rdN",[caseless])),
    <<"rdN">> = iolist_to_binary(re:replace("a.b.c.1.2.3.C","^[\\da-f](\\.[\\da-f])*$","rdN",[caseless,global])),
    <<"\"1234\"nPIbyKLvCyOobyWRC\"1234\"">> = iolist_to_binary(re:replace("\"1234\"","^\\\".*\\\"\\s*(;.*)?$","&nPIbyKLvCyOobyW\\1RC&",[])),
    <<"\"1234\"nPIbyKLvCyOobyWRC\"1234\"">> = iolist_to_binary(re:replace("\"1234\"","^\\\".*\\\"\\s*(;.*)?$","&nPIbyKLvCyOobyW\\1RC&",[global])),
    <<"YYlMHXKMT\"abcd\" ;K;w\"abcd\" ;sJ">> = iolist_to_binary(re:replace("\"abcd\" ;","^\\\".*\\\"\\s*(;.*)?$","YYlMHXKMT&K\\1w&sJ",[])),
    <<"YYlMHXKMT\"abcd\" ;K;w\"abcd\" ;sJ">> = iolist_to_binary(re:replace("\"abcd\" ;","^\\\".*\\\"\\s*(;.*)?$","YYlMHXKMT&K\\1w&sJ",[global])),
    <<"L; rhubarbnyk">> = iolist_to_binary(re:replace("\"\" ; rhubarb","^\\\".*\\\"\\s*(;.*)?$","L\\1nyk",[])),
    <<"L; rhubarbnyk">> = iolist_to_binary(re:replace("\"\" ; rhubarb","^\\\".*\\\"\\s*(;.*)?$","L\\1nyk",[global])),
    <<"\"1234\" : things">> = iolist_to_binary(re:replace("\"1234\" : things","^\\\".*\\\"\\s*(;.*)?$","rnRluS",[])),
    <<"\"1234\" : things">> = iolist_to_binary(re:replace("\"1234\" : things","^\\\".*\\\"\\s*(;.*)?$","rnRluS",[global])),
    <<"IfUFYgPEDg">> = iolist_to_binary(re:replace("","^$","IfUFYg\\1P\\1ED&g",[])),
    <<"IfUFYgPEDg">> = iolist_to_binary(re:replace("","^$","IfUFYg\\1P\\1ED&g",[global])),
    <<"A non-empty line">> = iolist_to_binary(re:replace("A non-empty line","^$","\\1hB",[])),
    <<"A non-empty line">> = iolist_to_binary(re:replace("A non-empty line","^$","\\1hB",[global])),
    <<"Lu">> = iolist_to_binary(re:replace("ab c","   ^    a   (?# begins with a)  b\\sc (?# then b c) $ (?# then end)","Lu",[extended])),
    <<"Lu">> = iolist_to_binary(re:replace("ab c","   ^    a   (?# begins with a)  b\\sc (?# then b c) $ (?# then end)","Lu",[extended,global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","   ^    a   (?# begins with a)  b\\sc (?# then b c) $ (?# then end)","XY",[extended])),
    <<"abc">> = iolist_to_binary(re:replace("abc","   ^    a   (?# begins with a)  b\\sc (?# then b c) $ (?# then end)","XY",[extended,global])),
    <<"ab cde">> = iolist_to_binary(re:replace("ab cde","   ^    a   (?# begins with a)  b\\sc (?# then b c) $ (?# then end)","AxgSFCHEmS",[extended])),
    <<"ab cde">> = iolist_to_binary(re:replace("ab cde","   ^    a   (?# begins with a)  b\\sc (?# then b c) $ (?# then end)","AxgSFCHEmS",[extended,global])),
    <<"jAGN">> = iolist_to_binary(re:replace("ab c","(?x)   ^    a   (?# begins with a)  b\\sc (?# then b c) $ (?# then end)","jAGN",[])),
    <<"jAGN">> = iolist_to_binary(re:replace("ab c","(?x)   ^    a   (?# begins with a)  b\\sc (?# then b c) $ (?# then end)","jAGN",[global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(?x)   ^    a   (?# begins with a)  b\\sc (?# then b c) $ (?# then end)","OL",[])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(?x)   ^    a   (?# begins with a)  b\\sc (?# then b c) $ (?# then end)","OL",[global])),
    <<"ab cde">> = iolist_to_binary(re:replace("ab cde","(?x)   ^    a   (?# begins with a)  b\\sc (?# then b c) $ (?# then end)","\\1u\\1t\\1UWVifAF",[])),
    <<"ab cde">> = iolist_to_binary(re:replace("ab cde","(?x)   ^    a   (?# begins with a)  b\\sc (?# then b c) $ (?# then end)","\\1u\\1t\\1UWVifAF",[global])),
    <<"IGa bcda bcdBgtmNURrKatUha bcdGc">> = iolist_to_binary(re:replace("a bcd","^   a\\ b[c ]d       $","IG&&BgtmNURrKatUh&Gc",[extended])),
    <<"IGa bcda bcdBgtmNURrKatUha bcdGc">> = iolist_to_binary(re:replace("a bcd","^   a\\ b[c ]d       $","IG&&BgtmNURrKatUh&Gc",[extended,global])),
    <<"DuVa b deGytlhNPYva b dM">> = iolist_to_binary(re:replace("a b d","^   a\\ b[c ]d       $","Du\\1V&\\1eGytl\\1hNPYv&\\1M",[extended])),
    <<"DuVa b deGytlhNPYva b dM">> = iolist_to_binary(re:replace("a b d","^   a\\ b[c ]d       $","Du\\1V&\\1eGytl\\1hNPYv&\\1M",[extended,global])),
    <<"abcd">> = iolist_to_binary(re:replace("abcd","^   a\\ b[c ]d       $","gImvCJR\\1&vbRP",[extended])),
    <<"abcd">> = iolist_to_binary(re:replace("abcd","^   a\\ b[c ]d       $","gImvCJR\\1&vbRP",[extended,global])),
    <<"ab d">> = iolist_to_binary(re:replace("ab d","^   a\\ b[c ]d       $","pRl\\1&\\1j&h&ENE&",[extended])),
    <<"ab d">> = iolist_to_binary(re:replace("ab d","^   a\\ b[c ]d       $","pRl\\1&\\1j&h&ENE&",[extended,global])),
    <<"kabcabcLrQNLabcdefhijklm">> = iolist_to_binary(re:replace("abcdefhijklm","^(a(b(c)))(d(e(f)))(h(i(j)))(k(l(m)))$","k\\1\\1LrQNL&",[])),
    <<"kabcabcLrQNLabcdefhijklm">> = iolist_to_binary(re:replace("abcdefhijklm","^(a(b(c)))(d(e(f)))(h(i(j)))(k(l(m)))$","k\\1\\1LrQNL&",[global])),
    <<"abcdefhijklmIphIN">> = iolist_to_binary(re:replace("abcdefhijklm","^(?:a(b(c)))(?:d(e(f)))(?:h(i(j)))(?:k(l(m)))$","&IphIN",[])),
    <<"abcdefhijklmIphIN">> = iolist_to_binary(re:replace("abcdefhijklm","^(?:a(b(c)))(?:d(e(f)))(?:h(i(j)))(?:k(l(m)))$","&IphIN",[global])),
    <<"tUY">> = iolist_to_binary(re:replace("a+ Z0+
","^[\\w][\\W][\\s][\\S][\\d][\\D][\\b][\\n][\\c]][\\022]","tUY",[])),
    <<"tUY">> = iolist_to_binary(re:replace("a+ Z0+
","^[\\w][\\W][\\s][\\S][\\d][\\D][\\b][\\n][\\c]][\\022]","tUY",[global])),
    <<"tspwqytimaFJRVhlja">> = iolist_to_binary(re:replace(".^$(*+)|{?,?}","^[.^$|()*+?{,}]+","tspwqyti\\1maFJR\\1Vhlja",[])),
    <<"tspwqytimaFJRVhlja">> = iolist_to_binary(re:replace(".^$(*+)|{?,?}","^[.^$|()*+?{,}]+","tspwqyti\\1maFJR\\1Vhlja",[global])),
    ok.
run2() ->
    <<"zYdBOpd">> = iolist_to_binary(re:replace("z","^a*\\w","\\1&\\1Yd\\1BOpd",[])),
    <<"zYdBOpd">> = iolist_to_binary(re:replace("z","^a*\\w","\\1&\\1Yd\\1BOpd",[global])),
    <<"fP">> = iolist_to_binary(re:replace("az","^a*\\w","fP",[])),
    <<"fP">> = iolist_to_binary(re:replace("az","^a*\\w","fP",[global])),
    <<"sAaaazLioGwHgMvvDI">> = iolist_to_binary(re:replace("aaaz","^a*\\w","sA\\1&LioG\\1wH\\1gMvvDI",[])),
    <<"sAaaazLioGwHgMvvDI">> = iolist_to_binary(re:replace("aaaz","^a*\\w","sA\\1&LioG\\1wH\\1gMvvDI",[global])),
    <<"D">> = iolist_to_binary(re:replace("a","^a*\\w","D",[])),
    <<"D">> = iolist_to_binary(re:replace("a","^a*\\w","D",[global])),
    <<"may">> = iolist_to_binary(re:replace("aa","^a*\\w","ma\\1y\\1",[])),
    <<"may">> = iolist_to_binary(re:replace("aa","^a*\\w","ma\\1y\\1",[global])),
    <<"NfPXXaaaaYyl">> = iolist_to_binary(re:replace("aaaa","^a*\\w","N\\1fP\\1XX&Yyl",[])),
    <<"NfPXXaaaaYyl">> = iolist_to_binary(re:replace("aaaa","^a*\\w","N\\1fP\\1XX&Yyl",[global])),
    <<"hoN+">> = iolist_to_binary(re:replace("a+","^a*\\w","hoN",[])),
    <<"hoN+">> = iolist_to_binary(re:replace("a+","^a*\\w","hoN",[global])),
    <<"mAGoxPaaLTrowOqTtkrS+">> = iolist_to_binary(re:replace("aa+","^a*\\w","mAGoxP&LTrowOqTtkrS",[])),
    <<"mAGoxPaaLTrowOqTtkrS+">> = iolist_to_binary(re:replace("aa+","^a*\\w","mAGoxP&LTrowOqTtkrS",[global])),
    <<"zACqJhxa">> = iolist_to_binary(re:replace("z","^a*?\\w","\\1&ACq\\1Jhxa\\1",[])),
    <<"zACqJhxa">> = iolist_to_binary(re:replace("z","^a*?\\w","\\1&ACq\\1Jhxa\\1",[global])),
    <<"uuJoIhaVnwJz">> = iolist_to_binary(re:replace("az","^a*?\\w","uuJoIhaVnwJ",[])),
    <<"uuJoIhaVnwJz">> = iolist_to_binary(re:replace("az","^a*?\\w","uuJoIhaVnwJ",[global])),
    <<"aaaz">> = iolist_to_binary(re:replace("aaaz","^a*?\\w","&",[])),
    <<"aaaz">> = iolist_to_binary(re:replace("aaaz","^a*?\\w","&",[global])),
    <<"IHpbwDeDoVJ">> = iolist_to_binary(re:replace("a","^a*?\\w","IHpbw\\1DeDoV\\1J",[])),
    <<"IHpbwDeDoVJ">> = iolist_to_binary(re:replace("a","^a*?\\w","IHpbw\\1DeDoV\\1J",[global])),
    <<"uhGdgAUnWJEFa">> = iolist_to_binary(re:replace("aa","^a*?\\w","uhGdgAUnWJEF",[])),
    <<"uhGdgAUnWJEFa">> = iolist_to_binary(re:replace("aa","^a*?\\w","uhGdgAUnWJEF",[global])),
    <<"aaWraaa">> = iolist_to_binary(re:replace("aaaa","^a*?\\w","&&Wr",[])),
    <<"aaWraaa">> = iolist_to_binary(re:replace("aaaa","^a*?\\w","&&Wr",[global])),
    <<"GGresSsQayX+">> = iolist_to_binary(re:replace("a+","^a*?\\w","GGresSs\\1Q&yX",[])),
    <<"GGresSsQayX+">> = iolist_to_binary(re:replace("a+","^a*?\\w","GGresSs\\1Q&yX",[global])),
    <<"liQyXfYa+">> = iolist_to_binary(re:replace("aa+","^a*?\\w","li\\1Qy\\1XfY",[])),
    <<"liQyXfYa+">> = iolist_to_binary(re:replace("aa+","^a*?\\w","li\\1Qy\\1XfY",[global])),
    <<"cHaz">> = iolist_to_binary(re:replace("az","^a+\\w","c\\1H&",[])),
    <<"cHaz">> = iolist_to_binary(re:replace("az","^a+\\w","c\\1H&",[global])),
    <<"fGTimsjSaaazRaaazlKbaaazn">> = iolist_to_binary(re:replace("aaaz","^a+\\w","\\1fGTimsjS&R&lK\\1b&\\1n",[])),
    <<"fGTimsjSaaazRaaazlKbaaazn">> = iolist_to_binary(re:replace("aaaz","^a+\\w","\\1fGTimsjS&R&lK\\1b&\\1n",[global])),
    <<"BiOOITSCrXtQNIWkc">> = iolist_to_binary(re:replace("aa","^a+\\w","BiO\\1OITSCrXtQNI\\1Wkc",[])),
    <<"BiOOITSCrXtQNIWkc">> = iolist_to_binary(re:replace("aa","^a+\\w","BiO\\1OITSCrXtQNI\\1Wkc",[global])),
    <<"myYnxOSDTaa">> = iolist_to_binary(re:replace("aaaa","^a+\\w","myYnx\\1OS\\1DTaa",[])),
    <<"myYnxOSDTaa">> = iolist_to_binary(re:replace("aaaa","^a+\\w","myYnx\\1OS\\1DTaa",[global])),
    <<"nJCbPkJnDbYuaaSNbC+">> = iolist_to_binary(re:replace("aa+","^a+\\w","nJCbPkJnDbYu&SNbC",[])),
    <<"nJCbPkJnDbYuaaSNbC+">> = iolist_to_binary(re:replace("aa+","^a+\\w","nJCbPkJnDbYu&SNbC",[global])),
    <<"NkFMbyd">> = iolist_to_binary(re:replace("az","^a+?\\w","NkFMbyd",[])),
    <<"NkFMbyd">> = iolist_to_binary(re:replace("az","^a+?\\w","NkFMbyd",[global])),
    <<"VEOnaz">> = iolist_to_binary(re:replace("aaaz","^a+?\\w","VEOn",[])),
    <<"VEOnaz">> = iolist_to_binary(re:replace("aaaz","^a+?\\w","VEOn",[global])),
    <<"aiLS">> = iolist_to_binary(re:replace("aa","^a+?\\w","aiLS",[])),
    <<"aiLS">> = iolist_to_binary(re:replace("aa","^a+?\\w","aiLS",[global])),
    <<"aaTlYJaaVFiraa">> = iolist_to_binary(re:replace("aaaa","^a+?\\w","&TlY\\1\\1J&VFir",[])),
    <<"aaTlYJaaVFiraa">> = iolist_to_binary(re:replace("aaaa","^a+?\\w","&TlY\\1\\1J&VFir",[global])),
    <<"EPKW+">> = iolist_to_binary(re:replace("aa+","^a+?\\w","EPKW",[])),
    <<"EPKW+">> = iolist_to_binary(re:replace("aa+","^a+?\\w","EPKW",[global])),
    <<"J1234567890SJtCtOhgCbe">> = iolist_to_binary(re:replace("1234567890","^\\d{8}\\w{2,}","J&SJtCtOhgC\\1b\\1e",[])),
    <<"J1234567890SJtCtOhgCbe">> = iolist_to_binary(re:replace("1234567890","^\\d{8}\\w{2,}","J&SJtCtOhgC\\1b\\1e",[global])),
    <<"vFLosw12345678abAEBT12345678abLxgR">> = iolist_to_binary(re:replace("12345678ab","^\\d{8}\\w{2,}","v\\1\\1FLosw&AEBT&LxgR",[])),
    <<"vFLosw12345678abAEBT12345678abLxgR">> = iolist_to_binary(re:replace("12345678ab","^\\d{8}\\w{2,}","v\\1\\1FLosw&AEBT&LxgR",[global])),
    <<"rfhXDTtoGIitU12345678__aq">> = iolist_to_binary(re:replace("12345678__","^\\d{8}\\w{2,}","rf\\1hXDT\\1toGIitU&aq",[])),
    <<"rfhXDTtoGIitU12345678__aq">> = iolist_to_binary(re:replace("12345678__","^\\d{8}\\w{2,}","rf\\1hXDT\\1toGIitU&aq",[global])),
    <<"1234567">> = iolist_to_binary(re:replace("1234567","^\\d{8}\\w{2,}","CU\\1&",[])),
    <<"1234567">> = iolist_to_binary(re:replace("1234567","^\\d{8}\\w{2,}","CU\\1&",[global])),
    <<"YBmuTIAl">> = iolist_to_binary(re:replace("uoie","^[aeiou\\d]{4,5}$","YBmuTIAl",[])),
    <<"YBmuTIAl">> = iolist_to_binary(re:replace("uoie","^[aeiou\\d]{4,5}$","YBmuTIAl",[global])),
    <<"oQyLlPbDtbyg">> = iolist_to_binary(re:replace("1234","^[aeiou\\d]{4,5}$","oQyLlP\\1\\1bDt\\1by\\1g",[])),
    <<"oQyLlPbDtbyg">> = iolist_to_binary(re:replace("1234","^[aeiou\\d]{4,5}$","oQyLlP\\1\\1bDt\\1by\\1g",[global])),
    <<"mWdReExiMyALqM">> = iolist_to_binary(re:replace("12345","^[aeiou\\d]{4,5}$","mWdReExiMyALqM",[])),
    <<"mWdReExiMyALqM">> = iolist_to_binary(re:replace("12345","^[aeiou\\d]{4,5}$","mWdReExiMyALqM",[global])),
    <<"YxwJd">> = iolist_to_binary(re:replace("aaaaa","^[aeiou\\d]{4,5}$","Yx\\1wJd",[])),
    <<"YxwJd">> = iolist_to_binary(re:replace("aaaaa","^[aeiou\\d]{4,5}$","Yx\\1wJd",[global])),
    <<"123456">> = iolist_to_binary(re:replace("123456","^[aeiou\\d]{4,5}$","WrOXRQ\\1",[])),
    <<"123456">> = iolist_to_binary(re:replace("123456","^[aeiou\\d]{4,5}$","WrOXRQ\\1",[global])),
    <<"IUtgwPFjpuoieax">> = iolist_to_binary(re:replace("uoie","^[aeiou\\d]{4,5}?","IUtgwPFjp&ax",[])),
    <<"IUtgwPFjpuoieax">> = iolist_to_binary(re:replace("uoie","^[aeiou\\d]{4,5}?","IUtgwPFjp&ax",[global])),
    <<"Cmcx1234BmvbENiCdje">> = iolist_to_binary(re:replace("1234","^[aeiou\\d]{4,5}?","Cmcx&BmvbENiCdje\\1",[])),
    <<"Cmcx1234BmvbENiCdje">> = iolist_to_binary(re:replace("1234","^[aeiou\\d]{4,5}?","Cmcx&BmvbENiCdje\\1",[global])),
    <<"ppr5">> = iolist_to_binary(re:replace("12345","^[aeiou\\d]{4,5}?","ppr",[])),
    <<"ppr5">> = iolist_to_binary(re:replace("12345","^[aeiou\\d]{4,5}?","ppr",[global])),
    <<"PaaaaqITvYUDMaaaaBNhfmHba">> = iolist_to_binary(re:replace("aaaaa","^[aeiou\\d]{4,5}?","P&qITvYUDM\\1&BNhfm\\1Hb",[])),
    <<"PaaaaqITvYUDMaaaaBNhfmHba">> = iolist_to_binary(re:replace("aaaaa","^[aeiou\\d]{4,5}?","P&qITvYUDM\\1&BNhfm\\1Hb",[global])),
    <<"xj56">> = iolist_to_binary(re:replace("123456","^[aeiou\\d]{4,5}?","\\1xj",[])),
    <<"xj56">> = iolist_to_binary(re:replace("123456","^[aeiou\\d]{4,5}?","\\1xj",[global])),
    <<"nSGvgE">> = iolist_to_binary(re:replace("abc=abcabc","\\A(abc|def)=(\\1){2,3}\\Z","nSGvgE",[])),
    <<"nSGvgE">> = iolist_to_binary(re:replace("abc=abcabc","\\A(abc|def)=(\\1){2,3}\\Z","nSGvgE",[global])),
    <<"defdef=defdefdefdefkBYqdpnDpF">> = iolist_to_binary(re:replace("def=defdefdef","\\A(abc|def)=(\\1){2,3}\\Z","\\1&\\1kBYqdpnDpF",[])),
    <<"defdef=defdefdefdefkBYqdpnDpF">> = iolist_to_binary(re:replace("def=defdefdef","\\A(abc|def)=(\\1){2,3}\\Z","\\1&\\1kBYqdpnDpF",[global])),
    <<"abc=defdef">> = iolist_to_binary(re:replace("abc=defdef","\\A(abc|def)=(\\1){2,3}\\Z","aWWhB&c",[])),
    <<"abc=defdef">> = iolist_to_binary(re:replace("abc=defdef","\\A(abc|def)=(\\1){2,3}\\Z","aWWhB&c",[global])),
    <<"EVKLmPxhabcdefghijkcda2abcdefghijkcda2dNVCa">> = iolist_to_binary(re:replace("abcdefghijkcda2","^(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\\11*(\\3\\4)\\1(?#)2$","EVKLmPxh&&dNVC\\1",[])),
    <<"EVKLmPxhabcdefghijkcda2abcdefghijkcda2dNVCa">> = iolist_to_binary(re:replace("abcdefghijkcda2","^(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\\11*(\\3\\4)\\1(?#)2$","EVKLmPxh&&dNVC\\1",[global])),
    <<"uae">> = iolist_to_binary(re:replace("abcdefghijkkkkcda2","^(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\\11*(\\3\\4)\\1(?#)2$","u\\1e",[])),
    <<"uae">> = iolist_to_binary(re:replace("abcdefghijkkkkcda2","^(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\\11*(\\3\\4)\\1(?#)2$","u\\1e",[global])),
    <<"x">> = iolist_to_binary(re:replace("cataract cataract23","(cat(a(ract|tonic)|erpillar)) \\1()2(3)","x",[])),
    <<"x">> = iolist_to_binary(re:replace("cataract cataract23","(cat(a(ract|tonic)|erpillar)) \\1()2(3)","x",[global])),
    <<"mtScatatonic catatonic23hiAQKcatatonicFcLgcy">> = iolist_to_binary(re:replace("catatonic catatonic23","(cat(a(ract|tonic)|erpillar)) \\1()2(3)","mtS&hiAQK\\1FcLgcy",[])),
    <<"mtScatatonic catatonic23hiAQKcatatonicFcLgcy">> = iolist_to_binary(re:replace("catatonic catatonic23","(cat(a(ract|tonic)|erpillar)) \\1()2(3)","mtS&hiAQK\\1FcLgcy",[global])),
    <<"caterpillar caterpillar23LYcaterpillarLsP">> = iolist_to_binary(re:replace("caterpillar caterpillar23","(cat(a(ract|tonic)|erpillar)) \\1()2(3)","&LY\\1LsP",[])),
    <<"caterpillar caterpillar23LYcaterpillarLsP">> = iolist_to_binary(re:replace("caterpillar caterpillar23","(cat(a(ract|tonic)|erpillar)) \\1()2(3)","&LY\\1LsP",[global])),
    <<"JWV:02 1997">> = iolist_to_binary(re:replace("From abcd  Mon Sep 01 12:33:02 1997","^From +([^ ]+) +[a-zA-Z][a-zA-Z][a-zA-Z] +[a-zA-Z][a-zA-Z][a-zA-Z] +[0-9]?[0-9] +[0-9][0-9]:[0-9][0-9]","JWV",[])),
    <<"JWV:02 1997">> = iolist_to_binary(re:replace("From abcd  Mon Sep 01 12:33:02 1997","^From +([^ ]+) +[a-zA-Z][a-zA-Z][a-zA-Z] +[a-zA-Z][a-zA-Z][a-zA-Z] +[0-9]?[0-9] +[0-9][0-9]:[0-9][0-9]","JWV",[global])),
    <<"GHYCSep IRSep YhTFrom abcd  Mon Sep 01 12:33Yk:02 1997">> = iolist_to_binary(re:replace("From abcd  Mon Sep 01 12:33:02 1997","^From\\s+\\S+\\s+([a-zA-Z]{3}\\s+){2}\\d{1,2}\\s+\\d\\d:\\d\\d","GHYC\\1IR\\1YhT&Yk",[])),
    <<"GHYCSep IRSep YhTFrom abcd  Mon Sep 01 12:33Yk:02 1997">> = iolist_to_binary(re:replace("From abcd  Mon Sep 01 12:33:02 1997","^From\\s+\\S+\\s+([a-zA-Z]{3}\\s+){2}\\d{1,2}\\s+\\d\\d:\\d\\d","GHYC\\1IR\\1YhT&Yk",[global])),
    <<"qWLubkoR:02 1997">> = iolist_to_binary(re:replace("From abcd  Mon Sep  1 12:33:02 1997","^From\\s+\\S+\\s+([a-zA-Z]{3}\\s+){2}\\d{1,2}\\s+\\d\\d:\\d\\d","qWLubkoR",[])),
    <<"qWLubkoR:02 1997">> = iolist_to_binary(re:replace("From abcd  Mon Sep  1 12:33:02 1997","^From\\s+\\S+\\s+([a-zA-Z]{3}\\s+){2}\\d{1,2}\\s+\\d\\d:\\d\\d","qWLubkoR",[global])),
    <<"From abcd  Sep 01 12:33:02 1997">> = iolist_to_binary(re:replace("From abcd  Sep 01 12:33:02 1997","^From\\s+\\S+\\s+([a-zA-Z]{3}\\s+){2}\\d{1,2}\\s+\\d\\d:\\d\\d","QgHt\\1shI\\1CxVl",[])),
    <<"From abcd  Sep 01 12:33:02 1997">> = iolist_to_binary(re:replace("From abcd  Sep 01 12:33:02 1997","^From\\s+\\S+\\s+([a-zA-Z]{3}\\s+){2}\\d{1,2}\\s+\\d\\d:\\d\\d","QgHt\\1shI\\1CxVl",[global])),
    <<"QAUT">> = iolist_to_binary(re:replace("12
34","^12.34","QAUT",[dotall])),
    <<"QAUT">> = iolist_to_binary(re:replace("12
34","^12.34","QAUT",[dotall,global])),
    <<"1234NKKDq1234XXJvkg1234thj">> = iolist_to_binary(re:replace("1234","^12.34","&NKKDq&XXJvkg&thj",[dotall])),
    <<"1234NKKDq1234XXJvkg1234thj">> = iolist_to_binary(re:replace("1234","^12.34","&NKKDq&XXJvkg&thj",[dotall,global])),
    <<"the quick pbrownjyaNtc	 fox">> = iolist_to_binary(re:replace("the quick brown	 fox","\\w+(?=\\t)","p\\1&jyaNtc",[])),
    <<"the quick pbrownjyaNtc	 fox">> = iolist_to_binary(re:replace("the quick brown	 fox","\\w+(?=\\t)","p\\1&jyaNtc",[global])),
    <<"foobar is eKfjhSmMfKfoolish see?foolish see?p">> = iolist_to_binary(re:replace("foobar is foolish see?","foo(?!bar)(.*)","eKfjhSmMfK&&p",[])),
    <<"foobar is eKfjhSmMfKfoolish see?foolish see?p">> = iolist_to_binary(re:replace("foobar is foolish see?","foo(?!bar)(.*)","eKfjhSmMfK&&p",[global])),
    <<"foobar cfqmXrowbar etcKYJDrowbar etcdLdQYNvFrowbar etcrowbar etc">> = iolist_to_binary(re:replace("foobar crowbar etc","(?:(?!foo)...|^.{0,2})bar(.*)","fqmX&KYJD&dLdQYNvF&&",[])),
    <<"foobar cfqmXrowbar etcKYJDrowbar etcdLdQYNvFrowbar etcrowbar etc">> = iolist_to_binary(re:replace("foobar crowbar etc","(?:(?!foo)...|^.{0,2})bar(.*)","fqmX&KYJD&dLdQYNvF&&",[global])),
    <<"GrelNln">> = iolist_to_binary(re:replace("barrel","(?:(?!foo)...|^.{0,2})bar(.*)","G\\1Nln",[])),
    <<"GrelNln">> = iolist_to_binary(re:replace("barrel","(?:(?!foo)...|^.{0,2})bar(.*)","G\\1Nln",[global])),
    <<"F2barrelLL2barrelJU2barrelIbAQirelv2barrelD">> = iolist_to_binary(re:replace("2barrel","(?:(?!foo)...|^.{0,2})bar(.*)","F&LL&JU&IbAQi\\1v&D",[])),
    <<"F2barrelLL2barrelJU2barrelIbAQirelv2barrelD">> = iolist_to_binary(re:replace("2barrel","(?:(?!foo)...|^.{0,2})bar(.*)","F&LL&JU&IbAQi\\1v&D",[global])),
    <<"iStSHxDA barrelbBUiQjj">> = iolist_to_binary(re:replace("A barrel","(?:(?!foo)...|^.{0,2})bar(.*)","iStSHxD&bBUiQjj",[])),
    <<"iStSHxDA barrelbBUiQjj">> = iolist_to_binary(re:replace("A barrel","(?:(?!foo)...|^.{0,2})bar(.*)","iStSHxD&bBUiQjj",[global])),
    <<"EEa456">> = iolist_to_binary(re:replace("abc456","^(\\D*)(?=\\d)(?!123)","EEa",[])),
    <<"EEa456">> = iolist_to_binary(re:replace("abc456","^(\\D*)(?=\\d)(?!123)","EEa",[global])),
    <<"abc123">> = iolist_to_binary(re:replace("abc123","^(\\D*)(?=\\d)(?!123)","&pr\\1PRC&",[])),
    <<"abc123">> = iolist_to_binary(re:replace("abc123","^(\\D*)(?=\\d)(?!123)","&pr\\1PRC&",[global])),
    <<"a1234xXJ1234G1234">> = iolist_to_binary(re:replace("1234","^1234(?# test newlines
  inside)","a&xXJ&G&",[])),
    <<"a1234xXJ1234G1234">> = iolist_to_binary(re:replace("1234","^1234(?# test newlines
  inside)","a&xXJ&G&",[global])),
    <<"GtEhJ1234l">> = iolist_to_binary(re:replace("1234","^1234 #comment in extended re
  ","GtEhJ&l",[extended])),
    <<"GtEhJ1234l">> = iolist_to_binary(re:replace("1234","^1234 #comment in extended re
  ","GtEhJ&l",[extended,global])),
    <<"bJBYcRNEc">> = iolist_to_binary(re:replace("abcd","#rhubarb
  abcd","bJBYc\\1RNEc",[extended])),
    <<"bJBYcRNEc">> = iolist_to_binary(re:replace("abcd","#rhubarb
  abcd","bJBYc\\1RNEc",[extended,global])),
    ok.
run3() ->
    <<"CbAyabcdGejrvabcd">> = iolist_to_binary(re:replace("abcd","^abcd#rhubarb","\\1CbAy&Gejrv&",[extended])),
    <<"CbAyabcdGejrvabcd">> = iolist_to_binary(re:replace("abcd","^abcd#rhubarb","\\1CbAy&Gejrv&",[extended,global])),
    <<"aaabftepSatEwgqIL">> = iolist_to_binary(re:replace("aaab","^(a)\\1{2,3}(.)","&ftepSatEwgqIL",[])),
    <<"aaabftepSatEwgqIL">> = iolist_to_binary(re:replace("aaab","^(a)\\1{2,3}(.)","&ftepSatEwgqIL",[global])),
    <<"kaaJipvPhUNA">> = iolist_to_binary(re:replace("aaaab","^(a)\\1{2,3}(.)","k\\1\\1JipvPhUNA",[])),
    <<"kaaJipvPhUNA">> = iolist_to_binary(re:replace("aaaab","^(a)\\1{2,3}(.)","k\\1\\1JipvPhUNA",[global])),
    <<"yXeJaaaaaaspOtaDGQaEaab">> = iolist_to_binary(re:replace("aaaaab","^(a)\\1{2,3}(.)","yXeJ\\1&spOtaDGQ\\1E\\1a",[])),
    <<"yXeJaaaaaaspOtaDGQaEaab">> = iolist_to_binary(re:replace("aaaaab","^(a)\\1{2,3}(.)","yXeJ\\1&spOtaDGQ\\1E\\1a",[global])),
    <<"otWuaaLaaaaaaaaaaFaaaaaEaajab">> = iolist_to_binary(re:replace("aaaaaab","^(a)\\1{2,3}(.)","otWuaaL&&F&E\\1\\1j",[])),
    <<"otWuaaLaaaaaaaaaaFaaaaaEaajab">> = iolist_to_binary(re:replace("aaaaaab","^(a)\\1{2,3}(.)","otWuaaL&&F&E\\1\\1j",[global])),
    <<"the OjJFYabcfabcabcjmxxNEiD">> = iolist_to_binary(re:replace("the abc","(?!^)abc","\\1OjJFY&f&&jmxxNEiD",[])),
    <<"the OjJFYabcfabcabcjmxxNEiD">> = iolist_to_binary(re:replace("the abc","(?!^)abc","\\1OjJFY&f&&jmxxNEiD",[global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(?!^)abc","xv\\1M&Anq&Up\\1iOggGI",[])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(?!^)abc","xv\\1M&Anq&Up\\1iOggGI",[global])),
    <<"CqabcabcybvrAgJK">> = iolist_to_binary(re:replace("abc","(?=^)abc","Cq&&yb\\1v\\1r\\1AgJK",[])),
    <<"CqabcabcybvrAgJK">> = iolist_to_binary(re:replace("abc","(?=^)abc","Cq&&yb\\1v\\1r\\1AgJK",[global])),
    <<"the abc">> = iolist_to_binary(re:replace("the abc","(?=^)abc","e",[])),
    <<"the abc">> = iolist_to_binary(re:replace("the abc","(?=^)abc","e",[global])),
    <<"LCbbcXaabbrbbbb">> = iolist_to_binary(re:replace("aabbbbb","^[ab]{1,3}(ab*|b)","LC\\1\\1cX&r\\1",[])),
    <<"LCbbcXaabbrbbbb">> = iolist_to_binary(re:replace("aabbbbb","^[ab]{1,3}(ab*|b)","LC\\1\\1cX&r\\1",[global])),
    <<"WaabbbbbOqaabbbbbabbbbb">> = iolist_to_binary(re:replace("aabbbbb","^[ab]{1,3}?(ab*|b)","W&Oq&\\1",[])),
    <<"WaabbbbbOqaabbbbbabbbbb">> = iolist_to_binary(re:replace("aabbbbb","^[ab]{1,3}?(ab*|b)","W&Oq&\\1",[global])),
    <<"RbEDawyPgbbbbb">> = iolist_to_binary(re:replace("aabbbbb","^[ab]{1,3}?(ab*?|b)","RbED\\1wyPg",[])),
    <<"RbEDawyPgbbbbb">> = iolist_to_binary(re:replace("aabbbbb","^[ab]{1,3}?(ab*?|b)","RbED\\1wyPg",[global])),
    <<"SglXbyyaabbcXHhsvvXdobbbb">> = iolist_to_binary(re:replace("aabbbbb","^[ab]{1,3}(ab*?|b)","SglX\\1yy&cXHhsvvXdo\\1",[])),
    <<"SglXbyyaabbcXHhsvvXdobbbb">> = iolist_to_binary(re:replace("aabbbbb","^[ab]{1,3}(ab*?|b)","SglX\\1yy&cXHhsvvXdo\\1",[global])),
    <<"Alan Other <user.ain>">> = iolist_to_binary(re:replace("Alan Other <user.ain>","  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                          # optional leading comment
(?:    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
# address
|                     #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)             # one word, optionally followed by....
(?:
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...
\\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)       |  # comments, or...

\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
# quoted strings
)*
<  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                     # leading <
(?:  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*

(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  ,  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
)* # further okay, if led by comma
:                                # closing colon
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  )? #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
#       address spec
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  > #                  trailing >
# name and address
)  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                       # optional trailing comment","v",[extended])),
    <<"Alan Other <user.ain>">> = iolist_to_binary(re:replace("Alan Other <user.ain>","  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                          # optional leading comment
(?:    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
# address
|                     #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)             # one word, optionally followed by....
(?:
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...
\\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)       |  # comments, or...

\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
# quoted strings
)*
<  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                     # leading <
(?:  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*

(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  ,  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
)* # further okay, if led by comma
:                                # closing colon
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  )? #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
#       address spec
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  > #                  trailing >
# name and address
)  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                       # optional trailing comment","v",[extended,global])),
    <<"<user.ain>">> = iolist_to_binary(re:replace("<user.ain>","  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                          # optional leading comment
(?:    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
# address
|                     #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)             # one word, optionally followed by....
(?:
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...
\\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)       |  # comments, or...

\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
# quoted strings
)*
<  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                     # leading <
(?:  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*

(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  ,  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
)* # further okay, if led by comma
:                                # closing colon
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  )? #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
#       address spec
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  > #                  trailing >
# name and address
)  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                       # optional trailing comment","a\\1urmv\\1",[extended])),
    <<"<user.ain>">> = iolist_to_binary(re:replace("<user.ain>","  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                          # optional leading comment
(?:    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
# address
|                     #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)             # one word, optionally followed by....
(?:
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...
\\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)       |  # comments, or...

\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
# quoted strings
)*
<  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                     # leading <
(?:  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*

(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  ,  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
)* # further okay, if led by comma
:                                # closing colon
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  )? #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
#       address spec
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  > #                  trailing >
# name and address
)  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                       # optional trailing comment","a\\1urmv\\1",[extended,global])),
    <<"user.ain">> = iolist_to_binary(re:replace("user.ain","  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                          # optional leading comment
(?:    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
# address
|                     #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)             # one word, optionally followed by....
(?:
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...
\\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)       |  # comments, or...

\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
# quoted strings
)*
<  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                     # leading <
(?:  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*

(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  ,  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
)* # further okay, if led by comma
:                                # closing colon
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  )? #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
#       address spec
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  > #                  trailing >
# name and address
)  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                       # optional trailing comment","XVEj&Y\\1AnxyW\\1TvYyY",[extended])),
    <<"user.ain">> = iolist_to_binary(re:replace("user.ain","  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                          # optional leading comment
(?:    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
# address
|                     #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)             # one word, optionally followed by....
(?:
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...
\\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)       |  # comments, or...

\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
# quoted strings
)*
<  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                     # leading <
(?:  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*

(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  ,  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
)* # further okay, if led by comma
:                                # closing colon
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  )? #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
#       address spec
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  > #                  trailing >
# name and address
)  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                       # optional trailing comment","XVEj&Y\\1AnxyW\\1TvYyY",[extended,global])),
    <<"\"A. Other\" <user.1234.ain> (a comment)">> = iolist_to_binary(re:replace("\"A. Other\" <user.1234.ain> (a comment)","  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                          # optional leading comment
(?:    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
# address
|                     #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)             # one word, optionally followed by....
(?:
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...
\\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)       |  # comments, or...

\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
# quoted strings
)*
<  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                     # leading <
(?:  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*

(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  ,  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
)* # further okay, if led by comma
:                                # closing colon
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  )? #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
#       address spec
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  > #                  trailing >
# name and address
)  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                       # optional trailing comment","W",[extended])),
    <<"\"A. Other\" <user.1234.ain> (a comment)">> = iolist_to_binary(re:replace("\"A. Other\" <user.1234.ain> (a comment)","  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                          # optional leading comment
(?:    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
# address
|                     #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)             # one word, optionally followed by....
(?:
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...
\\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)       |  # comments, or...

\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
# quoted strings
)*
<  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                     # leading <
(?:  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*

(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  ,  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
)* # further okay, if led by comma
:                                # closing colon
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  )? #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
#       address spec
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  > #                  trailing >
# name and address
)  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                       # optional trailing comment","W",[extended,global])),
    <<"A. Other <user.1234.ain> (a comment)">> = iolist_to_binary(re:replace("A. Other <user.1234.ain> (a comment)","  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                          # optional leading comment
(?:    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
# address
|                     #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)             # one word, optionally followed by....
(?:
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...
\\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)       |  # comments, or...

\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
# quoted strings
)*
<  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                     # leading <
(?:  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*

(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  ,  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
)* # further okay, if led by comma
:                                # closing colon
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  )? #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
#       address spec
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  > #                  trailing >
# name and address
)  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                       # optional trailing comment","Iyw&&Agja",[extended])),
    <<"A. Other <user.1234.ain> (a comment)">> = iolist_to_binary(re:replace("A. Other <user.1234.ain> (a comment)","  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                          # optional leading comment
(?:    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
# address
|                     #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)             # one word, optionally followed by....
(?:
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...
\\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)       |  # comments, or...

\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
# quoted strings
)*
<  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                     # leading <
(?:  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*

(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  ,  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
)* # further okay, if led by comma
:                                # closing colon
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  )? #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
#       address spec
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  > #                  trailing >
# name and address
)  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                       # optional trailing comment","Iyw&&Agja",[extended,global])),
    <<"\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"-re.lay">> = iolist_to_binary(re:replace("\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"-re.lay","  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                          # optional leading comment
(?:    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
# address
|                     #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)             # one word, optionally followed by....
(?:
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...
\\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)       |  # comments, or...

\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
# quoted strings
)*
<  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                     # leading <
(?:  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*

(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  ,  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
)* # further okay, if led by comma
:                                # closing colon
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  )? #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
#       address spec
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  > #                  trailing >
# name and address
)  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                       # optional trailing comment","T&KLniu",[extended])),
    <<"\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"-re.lay">> = iolist_to_binary(re:replace("\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"-re.lay","  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                          # optional leading comment
(?:    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
# address
|                     #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)             # one word, optionally followed by....
(?:
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...
\\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)       |  # comments, or...

\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
# quoted strings
)*
<  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                     # leading <
(?:  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*

(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  ,  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
)* # further okay, if led by comma
:                                # closing colon
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  )? #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
#       address spec
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  > #                  trailing >
# name and address
)  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                       # optional trailing comment","T&KLniu",[extended,global])),
    <<"A missing angle <user.where">> = iolist_to_binary(re:replace("A missing angle <user.where","  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                          # optional leading comment
(?:    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
# address
|                     #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)             # one word, optionally followed by....
(?:
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...
\\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)       |  # comments, or...

\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
# quoted strings
)*
<  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                     # leading <
(?:  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*

(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  ,  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
)* # further okay, if led by comma
:                                # closing colon
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  )? #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
#       address spec
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  > #                  trailing >
# name and address
)  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                       # optional trailing comment","vYiLq&doiJVeyAm",[extended])),
    <<"A missing angle <user.where">> = iolist_to_binary(re:replace("A missing angle <user.where","  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                          # optional leading comment
(?:    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
# address
|                     #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)             # one word, optionally followed by....
(?:
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...
\\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)       |  # comments, or...

\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
# quoted strings
)*
<  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                     # leading <
(?:  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*

(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  ,  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
)* # further okay, if led by comma
:                                # closing colon
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  )? #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
#       address spec
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  > #                  trailing >
# name and address
)  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                       # optional trailing comment","vYiLq&doiJVeyAm",[extended,global])),
    <<"The quick brown fox">> = iolist_to_binary(re:replace("The quick brown fox","  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                          # optional leading comment
(?:    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
# address
|                     #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)             # one word, optionally followed by....
(?:
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...
\\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)       |  # comments, or...

\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
# quoted strings
)*
<  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                     # leading <
(?:  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*

(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  ,  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
)* # further okay, if led by comma
:                                # closing colon
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  )? #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
#       address spec
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  > #                  trailing >
# name and address
)  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                       # optional trailing comment","hfXkAD\\1eyf&\\1T&AE",[extended])),
    <<"The quick brown fox">> = iolist_to_binary(re:replace("The quick brown fox","  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                          # optional leading comment
(?:    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
# address
|                     #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)             # one word, optionally followed by....
(?:
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037]  |  # atom and space parts, or...
\\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)       |  # comments, or...

\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
# quoted strings
)*
<  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                     # leading <
(?:  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*

(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  ,  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
)* # further okay, if led by comma
:                                # closing colon
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  )? #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)                    # initial word
(?:  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\" (?:                      # opening quote...
[^\\\\\\x80-\\xff\\n\\015\"]                #   Anything except backslash and quote
|                     #    or
\\\\ [^\\x80-\\xff]           #   Escaped something (something != CR)
)* \"  # closing quote
)  )* # further okay, if led by a period
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  @  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*    (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                           # initial subdomain
(?:                                  #
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  \\.                        # if led by a period...
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*   (?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|   \\[                         # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*    #    stuff
\\]                        #           ]
)                     #   ...further okay
)*
#       address spec
(?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*  > #                  trailing >
# name and address
)  (?: [\\040\\t] |  \\(
(?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  |  \\( (?:  [^\\\\\\x80-\\xff\\n\\015()]  |  \\\\ [^\\x80-\\xff]  )* \\)  )*
\\)  )*                       # optional trailing comment","hfXkAD\\1eyf&\\1T&AE",[extended,global])),
    <<"Alan Other <user.ain>">> = iolist_to_binary(re:replace("Alan Other <user.ain>","[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional leading comment
(?:
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
# address
|                             #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
# leading word
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces
(?:
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
|
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
) # \"special\" comment or quoted string
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"
)*
<
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# <
(?:
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
(?: ,
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
)*  # additional domains
:
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)?     #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
#       address spec
>                    #                 >
# name and address
)","wgMRV&dXcgTVheaqJ&uR",[extended])),
    <<"Alan Other <user.ain>">> = iolist_to_binary(re:replace("Alan Other <user.ain>","[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional leading comment
(?:
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
# address
|                             #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
# leading word
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces
(?:
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
|
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
) # \"special\" comment or quoted string
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"
)*
<
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# <
(?:
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
(?: ,
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
)*  # additional domains
:
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)?     #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
#       address spec
>                    #                 >
# name and address
)","wgMRV&dXcgTVheaqJ&uR",[extended,global])),
    <<"<user.ain>">> = iolist_to_binary(re:replace("<user.ain>","[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional leading comment
(?:
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
# address
|                             #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
# leading word
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces
(?:
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
|
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
) # \"special\" comment or quoted string
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"
)*
<
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# <
(?:
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
(?: ,
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
)*  # additional domains
:
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)?     #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
#       address spec
>                    #                 >
# name and address
)","Nx&XXami",[extended])),
    <<"<user.ain>">> = iolist_to_binary(re:replace("<user.ain>","[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional leading comment
(?:
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
# address
|                             #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
# leading word
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces
(?:
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
|
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
) # \"special\" comment or quoted string
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"
)*
<
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# <
(?:
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
(?: ,
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
)*  # additional domains
:
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)?     #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
#       address spec
>                    #                 >
# name and address
)","Nx&XXami",[extended,global])),
    <<"user.ain">> = iolist_to_binary(re:replace("user.ain","[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional leading comment
(?:
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
# address
|                             #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
# leading word
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces
(?:
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
|
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
) # \"special\" comment or quoted string
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"
)*
<
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# <
(?:
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
(?: ,
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
)*  # additional domains
:
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)?     #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
#       address spec
>                    #                 >
# name and address
)","IYgNNy",[extended])),
    <<"user.ain">> = iolist_to_binary(re:replace("user.ain","[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional leading comment
(?:
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
# address
|                             #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
# leading word
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces
(?:
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
|
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
) # \"special\" comment or quoted string
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"
)*
<
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# <
(?:
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
(?: ,
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
)*  # additional domains
:
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)?     #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
#       address spec
>                    #                 >
# name and address
)","IYgNNy",[extended,global])),
    <<"\"A. Other\" <user.1234.ain> (a comment)">> = iolist_to_binary(re:replace("\"A. Other\" <user.1234.ain> (a comment)","[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional leading comment
(?:
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
# address
|                             #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
# leading word
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces
(?:
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
|
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
) # \"special\" comment or quoted string
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"
)*
<
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# <
(?:
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
(?: ,
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
)*  # additional domains
:
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)?     #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
#       address spec
>                    #                 >
# name and address
)","\\1VpOwivKT",[extended])),
    <<"\"A. Other\" <user.1234.ain> (a comment)">> = iolist_to_binary(re:replace("\"A. Other\" <user.1234.ain> (a comment)","[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional leading comment
(?:
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
# address
|                             #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
# leading word
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces
(?:
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
|
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
) # \"special\" comment or quoted string
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"
)*
<
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# <
(?:
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
(?: ,
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
)*  # additional domains
:
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)?     #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
#       address spec
>                    #                 >
# name and address
)","\\1VpOwivKT",[extended,global])),
    <<"A. Other <user.1234.ain> (a comment)">> = iolist_to_binary(re:replace("A. Other <user.1234.ain> (a comment)","[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional leading comment
(?:
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
# address
|                             #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
# leading word
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces
(?:
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
|
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
) # \"special\" comment or quoted string
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"
)*
<
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# <
(?:
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
(?: ,
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
)*  # additional domains
:
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)?     #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
#       address spec
>                    #                 >
# name and address
)","tmTb&UVS\\1\\1\\1Vu",[extended])),
    <<"A. Other <user.1234.ain> (a comment)">> = iolist_to_binary(re:replace("A. Other <user.1234.ain> (a comment)","[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional leading comment
(?:
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
# address
|                             #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
# leading word
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces
(?:
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
|
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
) # \"special\" comment or quoted string
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"
)*
<
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# <
(?:
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
(?: ,
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
)*  # additional domains
:
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)?     #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
#       address spec
>                    #                 >
# name and address
)","tmTb&UVS\\1\\1\\1Vu",[extended,global])),
    <<"\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"-re.lay">> = iolist_to_binary(re:replace("\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"-re.lay","[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional leading comment
(?:
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
# address
|                             #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
# leading word
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces
(?:
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
|
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
) # \"special\" comment or quoted string
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"
)*
<
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# <
(?:
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
(?: ,
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
)*  # additional domains
:
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)?     #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
#       address spec
>                    #                 >
# name and address
)","\\1JSQucc",[extended])),
    <<"\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"-re.lay">> = iolist_to_binary(re:replace("\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"-re.lay","[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional leading comment
(?:
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
# address
|                             #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
# leading word
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces
(?:
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
|
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
) # \"special\" comment or quoted string
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"
)*
<
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# <
(?:
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
(?: ,
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
)*  # additional domains
:
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)?     #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
#       address spec
>                    #                 >
# name and address
)","\\1JSQucc",[extended,global])),
    <<"A missing angle <user.where">> = iolist_to_binary(re:replace("A missing angle <user.where","[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional leading comment
(?:
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
# address
|                             #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
# leading word
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces
(?:
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
|
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
) # \"special\" comment or quoted string
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"
)*
<
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# <
(?:
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
(?: ,
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
)*  # additional domains
:
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)?     #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
#       address spec
>                    #                 >
# name and address
)","rdrSoV",[extended])),
    <<"A missing angle <user.where">> = iolist_to_binary(re:replace("A missing angle <user.where","[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional leading comment
(?:
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
# address
|                             #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
# leading word
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces
(?:
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
|
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
) # \"special\" comment or quoted string
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"
)*
<
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# <
(?:
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
(?: ,
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
)*  # additional domains
:
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)?     #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
#       address spec
>                    #                 >
# name and address
)","rdrSoV",[extended,global])),
    <<"The quick brown fox">> = iolist_to_binary(re:replace("The quick brown fox","[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional leading comment
(?:
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
# address
|                             #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
# leading word
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces
(?:
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
|
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
) # \"special\" comment or quoted string
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"
)*
<
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# <
(?:
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
(?: ,
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
)*  # additional domains
:
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)?     #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
#       address spec
>                    #                 >
# name and address
)","eXfWy",[extended])),
    <<"The quick brown fox">> = iolist_to_binary(re:replace("The quick brown fox","[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional leading comment
(?:
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
# address
|                             #  or
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
# leading word
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *               # \"normal\" atoms and or spaces
(?:
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
|
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
) # \"special\" comment or quoted string
[^()<>@,;:\".\\\\\\[\\]\\x80-\\xff\\000-\\010\\012-\\037] *            #  more \"normal\"
)*
<
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# <
(?:
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
(?: ,
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
)*  # additional domains
:
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)?     #       optional route
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
# Atom
|                       #  or
\"                                     # \"
[^\\\\\\x80-\\xff\\n\\015\"] *                            #   normal
(?:  \\\\ [^\\x80-\\xff]  [^\\\\\\x80-\\xff\\n\\015\"] * )*        #   ( special normal* )*
\"                                     #        \"
# Quoted string
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# additional words
)*
@
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
(?:
\\.
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
(?:
[^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]+    # some number of atom characters...
(?![^(\\040)<>@,;:\".\\\\\\[\\]\\000-\\037\\x80-\\xff]) # ..not followed by something that could be part of an atom
|
\\[                            # [
(?: [^\\\\\\x80-\\xff\\n\\015\\[\\]] |  \\\\ [^\\x80-\\xff]  )*     #    stuff
\\]                           #           ]
)
[\\040\\t]*                    # Nab whitespace.
(?:
\\(                              #  (
[^\\\\\\x80-\\xff\\n\\015()] *                             #     normal*
(?:                                 #       (
(?:  \\\\ [^\\x80-\\xff]  |
\\(                            #  (
[^\\\\\\x80-\\xff\\n\\015()] *                            #     normal*
(?:  \\\\ [^\\x80-\\xff]   [^\\\\\\x80-\\xff\\n\\015()] * )*        #     (special normal*)*
\\)                           #                       )
)    #         special
[^\\\\\\x80-\\xff\\n\\015()] *                         #         normal*
)*                                  #            )*
\\)                             #                )
[\\040\\t]* )*    # If comment found, allow more spaces.
# optional trailing comments
)*
#       address spec
>                    #                 >
# name and address
)","eXfWy",[extended,global])),
    <<"abcdefpqrxyz0AB">> = iolist_to_binary(re:replace("abcdefpqrxyz0AB","abc\\0def\\00pqr\\000xyz\\0000AB","w",[])),
    <<"abcdefpqrxyz0AB">> = iolist_to_binary(re:replace("abcdefpqrxyz0AB","abc\\0def\\00pqr\\000xyz\\0000AB","w",[global])),
    <<"abc456 abcdefpqrxyz0ABCDE">> = iolist_to_binary(re:replace("abc456 abcdefpqrxyz0ABCDE","abc\\0def\\00pqr\\000xyz\\0000AB","K\\1\\1AqfXA&w\\1u",[])),
    <<"abc456 abcdefpqrxyz0ABCDE">> = iolist_to_binary(re:replace("abc456 abcdefpqrxyz0ABCDE","abc\\0def\\00pqr\\000xyz\\0000AB","K\\1\\1AqfXA&w\\1u",[global])),
    <<"abcefpqr0xyz00AB">> = iolist_to_binary(re:replace("abcefpqr0xyz00AB","abc\\x0def\\x00pqr\\x000xyz\\x0000AB","JdWVKM&yVT",[])),
    <<"abcefpqr0xyz00AB">> = iolist_to_binary(re:replace("abcefpqr0xyz00AB","abc\\x0def\\x00pqr\\x000xyz\\x0000AB","JdWVKM&yVT",[global])),
    <<"abc456 abcefpqr0xyz00ABCDE">> = iolist_to_binary(re:replace("abc456 abcefpqr0xyz00ABCDE","abc\\x0def\\x00pqr\\x000xyz\\x0000AB","iuO&wOcoFuHtrE\\1Jy",[])),
    <<"abc456 abcefpqr0xyz00ABCDE">> = iolist_to_binary(re:replace("abc456 abcefpqr0xyz00ABCDE","abc\\x0def\\x00pqr\\x000xyz\\x0000AB","iuO&wOcoFuHtrE\\1Jy",[global])),
    <<"A">> = iolist_to_binary(re:replace("A","^[\\000-\\037]","gJC\\1rE\\1Qq\\1o&JrkS",[])),
    <<"A">> = iolist_to_binary(re:replace("A","^[\\000-\\037]","gJC\\1rE\\1Qq\\1o&JrkS",[global])),
    <<"MTEpBuVJB">> = iolist_to_binary(re:replace("B","^[\\000-\\037]","MTEpBuVJ",[])),
    <<"MTEpBuVJB">> = iolist_to_binary(re:replace("B","^[\\000-\\037]","MTEpBuVJ",[global])),
    <<"jMyxPHwTRWgliAC">> = iolist_to_binary(re:replace("C","^[\\000-\\037]","&jMy&xPHwTRW&g\\1liA",[])),
    <<"jMyxPHwTRWgliAC">> = iolist_to_binary(re:replace("C","^[\\000-\\037]","&jMy&xPHwTRW&g\\1liA",[global])),
    <<"OE">> = iolist_to_binary(re:replace("","\\0*","O\\1E",[])),
    <<"OE">> = iolist_to_binary(re:replace("","\\0*","O\\1E",[global])),
    <<"The AZ">> = iolist_to_binary(re:replace("The AZ","A\\x0{2,3}Z","C\\1pF\\1B&G&g",[])),
    <<"The AZ">> = iolist_to_binary(re:replace("The AZ","A\\x0{2,3}Z","C\\1pF\\1B&G&g",[global])),
    <<"An AZ">> = iolist_to_binary(re:replace("An AZ","A\\x0{2,3}Z","F&",[])),
    <<"An AZ">> = iolist_to_binary(re:replace("An AZ","A\\x0{2,3}Z","F&",[global])),
    <<"AZ">> = iolist_to_binary(re:replace("AZ","A\\x0{2,3}Z","c&HRi&CFuI",[])),
    <<"AZ">> = iolist_to_binary(re:replace("AZ","A\\x0{2,3}Z","c&HRi&CFuI",[global])),
    <<"AZ">> = iolist_to_binary(re:replace("AZ","A\\x0{2,3}Z","gj&PpEky&Ii\\1yEk",[])),
    <<"AZ">> = iolist_to_binary(re:replace("AZ","A\\x0{2,3}Z","gj&PpEky&Ii\\1yEk",[global])),
    <<"tRfcowcowbellcowcowbellsbxQaC">> = iolist_to_binary(re:replace("cowcowbell","^(cow|)\\1(bell)","tRf&&sbxQaC",[])),
    <<"tRfcowcowbellcowcowbellsbxQaC">> = iolist_to_binary(re:replace("cowcowbell","^(cow|)\\1(bell)","tRf&&sbxQaC",[global])),
    <<"HBGbellfgbellPqEBbellVP">> = iolist_to_binary(re:replace("bell","^(cow|)\\1(bell)","H\\1BG&fg&PqEB&VP\\1",[])),
    <<"HBGbellfgbellPqEBbellVP">> = iolist_to_binary(re:replace("bell","^(cow|)\\1(bell)","H\\1BG&fg&PqEB&VP\\1",[global])),
    <<"cowbell">> = iolist_to_binary(re:replace("cowbell","^(cow|)\\1(bell)","\\1yb\\1QFSlI",[])),
    <<"cowbell">> = iolist_to_binary(re:replace("cowbell","^(cow|)\\1(bell)","\\1yb\\1QFSlI",[global])),
    <<"Jabc">> = iolist_to_binary(re:replace(" abc","^\\s","J",[])),
    <<"Jabc">> = iolist_to_binary(re:replace(" abc","^\\s","J",[global])),
    <<"xabc">> = iolist_to_binary(re:replace("abc","^\\s","x&",[])),
    <<"xabc">> = iolist_to_binary(re:replace("abc","^\\s","x&",[global])),
    <<"hfsXvuonxabc">> = iolist_to_binary(re:replace("
abc","^\\s","hfsX\\1vuonx",[])),
    <<"hfsXvuonxabc">> = iolist_to_binary(re:replace("
abc","^\\s","hfsX\\1vuonx",[global])),
    <<"ddIabc">> = iolist_to_binary(re:replace("abc","^\\s","ddI",[])),
    <<"ddIabc">> = iolist_to_binary(re:replace("abc","^\\s","ddI",[global])),
    <<"abc">> = iolist_to_binary(re:replace("	abc","^\\s","\\1",[])),
    <<"abc">> = iolist_to_binary(re:replace("	abc","^\\s","\\1",[global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","^\\s","\\1RgwsO&&KBh\\1",[])),
    <<"abc">> = iolist_to_binary(re:replace("abc","^\\s","\\1RgwsO&&KBh\\1",[global])),
    <<"KOtSm">> = iolist_to_binary(re:replace("abc","^a	b
      c","KOt\\1Sm",[extended])),
    <<"KOtSm">> = iolist_to_binary(re:replace("abc","^a	b
      c","KOt\\1Sm",[extended,global])),
    <<"a">> = iolist_to_binary(re:replace("ab","^(a|)\\1*b","\\1",[])),
    <<"a">> = iolist_to_binary(re:replace("ab","^(a|)\\1*b","\\1",[global])),
    <<"BaaaabNamWiqNDaYe">> = iolist_to_binary(re:replace("aaaab","^(a|)\\1*b","B&N\\1mWiqND\\1Ye",[])),
    <<"BaaaabNamWiqNDaYe">> = iolist_to_binary(re:replace("aaaab","^(a|)\\1*b","B&N\\1mWiqND\\1Ye",[global])),
    <<"kbbPbfhieCbHuVb">> = iolist_to_binary(re:replace("b","^(a|)\\1*b","k&&P&fhieC&HuV\\1&",[])),
    <<"kbbPbfhieCbHuVb">> = iolist_to_binary(re:replace("b","^(a|)\\1*b","k&&P&fhieC&HuV\\1&",[global])),
    <<"acb">> = iolist_to_binary(re:replace("acb","^(a|)\\1*b","FM",[])),
    <<"acb">> = iolist_to_binary(re:replace("acb","^(a|)\\1*b","FM",[global])),
    <<"aIlGG">> = iolist_to_binary(re:replace("aab","^(a|)\\1+b","aIlGG",[])),
    <<"aIlGG">> = iolist_to_binary(re:replace("aab","^(a|)\\1+b","aIlGG",[global])),
    <<"nAjRNoagNaaaabFbIUaaaabTa">> = iolist_to_binary(re:replace("aaaab","^(a|)\\1+b","nAjRNoagN&FbIU&T\\1",[])),
    <<"nAjRNoagNaaaabFbIUaaaabTa">> = iolist_to_binary(re:replace("aaaab","^(a|)\\1+b","nAjRNoagN&FbIU&T\\1",[global])),
    <<"WSbe">> = iolist_to_binary(re:replace("b","^(a|)\\1+b","WS&e",[])),
    <<"WSbe">> = iolist_to_binary(re:replace("b","^(a|)\\1+b","WS&e",[global])),
    <<"ab">> = iolist_to_binary(re:replace("ab","^(a|)\\1+b","jr&XvtMJM\\1kk\\1EUHVx",[])),
    <<"ab">> = iolist_to_binary(re:replace("ab","^(a|)\\1+b","jr&XvtMJM\\1kk\\1EUHVx",[global])),
    ok.
run4() ->
    <<"QabWabaYaxPgsarlHaBF">> = iolist_to_binary(re:replace("ab","^(a|)\\1?b","Q&W&\\1Y\\1xPgs\\1rlH\\1BF",[])),
    <<"QabWabaYaxPgsarlHaBF">> = iolist_to_binary(re:replace("ab","^(a|)\\1?b","Q&W&\\1Y\\1xPgs\\1rlH\\1BF",[global])),
    <<"aab">> = iolist_to_binary(re:replace("aab","^(a|)\\1?b","&",[])),
    <<"aab">> = iolist_to_binary(re:replace("aab","^(a|)\\1?b","&",[global])),
    <<"biGfsiRebDlBkGV">> = iolist_to_binary(re:replace("b","^(a|)\\1?b","&i\\1Gf\\1siR\\1e&Dl\\1BkGV",[])),
    <<"biGfsiRebDlBkGV">> = iolist_to_binary(re:replace("b","^(a|)\\1?b","&i\\1Gf\\1siR\\1e&Dl\\1BkGV",[global])),
    <<"acb">> = iolist_to_binary(re:replace("acb","^(a|)\\1?b","&&CV&S&OMP\\1iO\\1&vbRN",[])),
    <<"acb">> = iolist_to_binary(re:replace("acb","^(a|)\\1?b","&&CV&S&OMP\\1iO\\1&vbRN",[global])),
    <<"YIaaabYgaT">> = iolist_to_binary(re:replace("aaab","^(a|)\\1{2}b","YI&Yg\\1T",[])),
    <<"YIaaabYgaT">> = iolist_to_binary(re:replace("aaab","^(a|)\\1{2}b","YI&Yg\\1T",[global])),
    <<"TIeRLUKGJ">> = iolist_to_binary(re:replace("b","^(a|)\\1{2}b","\\1TIeRL\\1UKGJ",[])),
    <<"TIeRLUKGJ">> = iolist_to_binary(re:replace("b","^(a|)\\1{2}b","\\1TIeRL\\1UKGJ",[global])),
    <<"ab">> = iolist_to_binary(re:replace("ab","^(a|)\\1{2}b","eHSpF&XJCAH",[])),
    <<"ab">> = iolist_to_binary(re:replace("ab","^(a|)\\1{2}b","eHSpF&XJCAH",[global])),
    <<"aab">> = iolist_to_binary(re:replace("aab","^(a|)\\1{2}b","&kowbne",[])),
    <<"aab">> = iolist_to_binary(re:replace("aab","^(a|)\\1{2}b","&kowbne",[global])),
    <<"aaaab">> = iolist_to_binary(re:replace("aaaab","^(a|)\\1{2}b","Gx\\1NKVD",[])),
    <<"aaaab">> = iolist_to_binary(re:replace("aaaab","^(a|)\\1{2}b","Gx\\1NKVD",[global])),
    <<"dkxNTSaaabf">> = iolist_to_binary(re:replace("aaab","^(a|)\\1{2,3}b","dkxNTS&f",[])),
    <<"dkxNTSaaabf">> = iolist_to_binary(re:replace("aaab","^(a|)\\1{2,3}b","dkxNTS&f",[global])),
    <<"nJiUaaaab">> = iolist_to_binary(re:replace("aaaab","^(a|)\\1{2,3}b","nJiU&",[])),
    <<"nJiUaaaab">> = iolist_to_binary(re:replace("aaaab","^(a|)\\1{2,3}b","nJiU&",[global])),
    <<"VbijCkRgwPavoRb">> = iolist_to_binary(re:replace("b","^(a|)\\1{2,3}b","V&ijCkR\\1gwPa\\1voR&",[])),
    <<"VbijCkRgwPavoRb">> = iolist_to_binary(re:replace("b","^(a|)\\1{2,3}b","V&ijCkR\\1gwPa\\1voR&",[global])),
    <<"ab">> = iolist_to_binary(re:replace("ab","^(a|)\\1{2,3}b","X\\1\\1wk",[])),
    <<"ab">> = iolist_to_binary(re:replace("ab","^(a|)\\1{2,3}b","X\\1\\1wk",[global])),
    <<"aab">> = iolist_to_binary(re:replace("aab","^(a|)\\1{2,3}b","tyqFsu&vfUBb&kaQBG",[])),
    <<"aab">> = iolist_to_binary(re:replace("aab","^(a|)\\1{2,3}b","tyqFsu&vfUBb&kaQBG",[global])),
    <<"aaaaab">> = iolist_to_binary(re:replace("aaaaab","^(a|)\\1{2,3}b","DWjvqB",[])),
    <<"aaaaab">> = iolist_to_binary(re:replace("aaaaab","^(a|)\\1{2,3}b","DWjvqB",[global])),
    <<"ctm">> = iolist_to_binary(re:replace("abbbbc","ab{1,3}bc","ctm",[])),
    <<"ctm">> = iolist_to_binary(re:replace("abbbbc","ab{1,3}bc","ctm",[global])),
    <<"tQabbbcmDpnh">> = iolist_to_binary(re:replace("abbbc","ab{1,3}bc","tQ&mDpnh",[])),
    <<"tQabbbcmDpnh">> = iolist_to_binary(re:replace("abbbc","ab{1,3}bc","tQ&mDpnh",[global])),
    <<"pmlUUNWGtb">> = iolist_to_binary(re:replace("abbc","ab{1,3}bc","pmlUUNWGtb",[])),
    <<"pmlUUNWGtb">> = iolist_to_binary(re:replace("abbc","ab{1,3}bc","pmlUUNWGtb",[global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","ab{1,3}bc","y",[])),
    <<"abc">> = iolist_to_binary(re:replace("abc","ab{1,3}bc","y",[global])),
    <<"abbbbbc">> = iolist_to_binary(re:replace("abbbbbc","ab{1,3}bc","h&yF&Oe",[])),
    <<"abbbbbc">> = iolist_to_binary(re:replace("abbbbbc","ab{1,3}bc","h&yF&Oe",[global])),
    <<"track1Utrack1">> = iolist_to_binary(re:replace("track1.title:TBlah blah blah","([^.]*)\\.([^:]*):[T ]+(.*)","\\1U\\1",[])),
    <<"track1Utrack1">> = iolist_to_binary(re:replace("track1.title:TBlah blah blah","([^.]*)\\.([^:]*):[T ]+(.*)","\\1U\\1",[global])),
    <<"vlOttrack1DNTdLtrack1.title:TBlah blah blahT">> = iolist_to_binary(re:replace("track1.title:TBlah blah blah","([^.]*)\\.([^:]*):[T ]+(.*)","vlOt\\1DNTdL&T",[caseless])),
    <<"vlOttrack1DNTdLtrack1.title:TBlah blah blahT">> = iolist_to_binary(re:replace("track1.title:TBlah blah blah","([^.]*)\\.([^:]*):[T ]+(.*)","vlOt\\1DNTdL&T",[caseless,global])),
    <<"track1.title:TBlah blah blahtrack1.title:TBlah blah blahNBJqwwYktrack1uI">> = iolist_to_binary(re:replace("track1.title:TBlah blah blah","([^.]*)\\.([^:]*):[t ]+(.*)","&&NBJqwwYk\\1uI",[caseless])),
    <<"track1.title:TBlah blah blahtrack1.title:TBlah blah blahNBJqwwYktrack1uI">> = iolist_to_binary(re:replace("track1.title:TBlah blah blah","([^.]*)\\.([^:]*):[t ]+(.*)","&&NBJqwwYk\\1uI",[caseless,global])),
    <<"VGNLxyRxhavyOhWXY_^abc">> = iolist_to_binary(re:replace("WXY_^abc","^[W-c]+$","VGNLxyRxhavyOh&",[])),
    <<"VGNLxyRxhavyOhWXY_^abc">> = iolist_to_binary(re:replace("WXY_^abc","^[W-c]+$","VGNLxyRxhavyOh&",[global])),
    <<"wxy">> = iolist_to_binary(re:replace("wxy","^[W-c]+$","Fe&GxeL&lybNB&",[])),
    <<"wxy">> = iolist_to_binary(re:replace("wxy","^[W-c]+$","Fe&GxeL&lybNB&",[global])),
    <<"WgxWXY_^abcBGClp">> = iolist_to_binary(re:replace("WXY_^abc","^[W-c]+$","Wgx&BGClp",[caseless])),
    <<"WgxWXY_^abcBGClp">> = iolist_to_binary(re:replace("WXY_^abc","^[W-c]+$","Wgx&BGClp",[caseless,global])),
    <<"Kwxy_^ABCewxy_^ABCBfRGaOUx">> = iolist_to_binary(re:replace("wxy_^ABC","^[W-c]+$","K&e&BfRGaOUx",[caseless])),
    <<"Kwxy_^ABCewxy_^ABCBfRGaOUx">> = iolist_to_binary(re:replace("wxy_^ABC","^[W-c]+$","K&e&BfRGaOUx",[caseless,global])),
    <<"GrLooFQ">> = iolist_to_binary(re:replace("WXY_^abc","^[\\x3f-\\x5F]+$","GrLooFQ",[caseless])),
    <<"GrLooFQ">> = iolist_to_binary(re:replace("WXY_^abc","^[\\x3f-\\x5F]+$","GrLooFQ",[caseless,global])),
    <<"wxy_^ABCIaCpCUhwxy_^ABCNCFWKSeQwxy_^ABC">> = iolist_to_binary(re:replace("wxy_^ABC","^[\\x3f-\\x5F]+$","&IaCpCUh&N\\1CFWKSeQ&",[caseless])),
    <<"wxy_^ABCIaCpCUhwxy_^ABCNCFWKSeQwxy_^ABC">> = iolist_to_binary(re:replace("wxy_^ABC","^[\\x3f-\\x5F]+$","&IaCpCUh&N\\1CFWKSeQ&",[caseless,global])),
    <<"SAkruTk">> = iolist_to_binary(re:replace("abc","^abc$","SAkr\\1\\1uTk",[multiline])),
    <<"SAkruTk">> = iolist_to_binary(re:replace("abc","^abc$","SAkr\\1\\1uTk",[multiline,global])),
    <<"qqq
yJfqnwmj">> = iolist_to_binary(re:replace("qqq
abc","^abc$","yJfqnwmj\\1",[multiline])),
    <<"qqq
yJfqnwmj">> = iolist_to_binary(re:replace("qqq
abc","^abc$","yJfqnwmj\\1",[multiline,global])),
    <<"abcGwsRTRpcU
zzz">> = iolist_to_binary(re:replace("abc
zzz","^abc$","&GwsRTRpcU",[multiline])),
    <<"abcGwsRTRpcU
zzz">> = iolist_to_binary(re:replace("abc
zzz","^abc$","&GwsRTRpcU",[multiline,global])),
    <<"qqq
piGAslUTabcrVHBabc
zzz">> = iolist_to_binary(re:replace("qqq
abc
zzz","^abc$","piG\\1AslUT&rVHB&",[multiline])),
    <<"qqq
piGAslUTabcrVHBabc
zzz">> = iolist_to_binary(re:replace("qqq
abc
zzz","^abc$","piG\\1AslUT&rVHB&",[multiline,global])),
    <<"oYnuqock">> = iolist_to_binary(re:replace("abc","^abc$","oYnuq\\1ock",[])),
    <<"oYnuqock">> = iolist_to_binary(re:replace("abc","^abc$","oYnuq\\1ock",[global])),
    <<"qqq
abc">> = iolist_to_binary(re:replace("qqq
abc","^abc$","\\1&ixSVYFQoVAI&tuG&&&",[])),
    <<"qqq
abc">> = iolist_to_binary(re:replace("qqq
abc","^abc$","\\1&ixSVYFQoVAI&tuG&&&",[global])),
    <<"abc
zzz">> = iolist_to_binary(re:replace("abc
zzz","^abc$","Fv&\\1I&",[])),
    <<"abc
zzz">> = iolist_to_binary(re:replace("abc
zzz","^abc$","Fv&\\1I&",[global])),
    <<"qqq
abc
zzz">> = iolist_to_binary(re:replace("qqq
abc
zzz","^abc$","bCOyfHmN&MpQpaqrG&s",[])),
    <<"qqq
abc
zzz">> = iolist_to_binary(re:replace("qqq
abc
zzz","^abc$","bCOyfHmN&MpQpaqrG&s",[global])),
    <<"NiabcabcnBJhabcabcabcfOjpr">> = iolist_to_binary(re:replace("abc","\\Aabc\\Z","Ni&\\1\\1&nB\\1Jh&&&fOjpr",[multiline])),
    <<"NiabcabcnBJhabcabcabcfOjpr">> = iolist_to_binary(re:replace("abc","\\Aabc\\Z","Ni&\\1\\1&nB\\1Jh&&&fOjpr",[multiline,global])),
    <<"wGCswaabcexJpPabcabcu">> = iolist_to_binary(re:replace("abc","\\Aabc\\Z","w\\1GCswa&ex\\1JpP&&u",[multiline])),
    <<"wGCswaabcexJpPabcabcu">> = iolist_to_binary(re:replace("abc","\\Aabc\\Z","w\\1GCswa&ex\\1JpP&&u",[multiline,global])),
    <<"qqq
abc">> = iolist_to_binary(re:replace("qqq
abc","\\Aabc\\Z","fplaYSyrA",[multiline])),
    <<"qqq
abc">> = iolist_to_binary(re:replace("qqq
abc","\\Aabc\\Z","fplaYSyrA",[multiline,global])),
    <<"abc
zzz">> = iolist_to_binary(re:replace("abc
zzz","\\Aabc\\Z","q",[multiline])),
    <<"abc
zzz">> = iolist_to_binary(re:replace("abc
zzz","\\Aabc\\Z","q",[multiline,global])),
    <<"qqq
abc
zzz">> = iolist_to_binary(re:replace("qqq
abc
zzz","\\Aabc\\Z","&Gdq\\1s",[multiline])),
    <<"qqq
abc
zzz">> = iolist_to_binary(re:replace("qqq
abc
zzz","\\Aabc\\Z","&Gdq\\1s",[multiline,global])),
    <<"EmUWBUOM">> = iolist_to_binary(re:replace("abc
def","\\A(.)*\\Z","EmUWBUOM",[dotall])),
    <<"EmUWBUOM">> = iolist_to_binary(re:replace("abc
def","\\A(.)*\\Z","EmUWBUOM",[dotall,global])),
    <<"abc
def">> = iolist_to_binary(re:replace("abc
def","\\A(.)*\\Z","\\1",[multiline])),
    <<"abc
def">> = iolist_to_binary(re:replace("abc
def","\\A(.)*\\Z","\\1",[multiline,global])),
    <<"VU::c">> = iolist_to_binary(re:replace("b::c","(?:b)|(?::+)","V\\1\\1U",[])),
    <<"VUVUc">> = iolist_to_binary(re:replace("b::c","(?:b)|(?::+)","V\\1\\1U",[global])),
    <<"cyRFHE::gguAOyRdwb">> = iolist_to_binary(re:replace("c::b","(?:b)|(?::+)","yRF\\1HE&g\\1guAOyRdw\\1",[])),
    <<"cyRFHE::gguAOyRdwyRFHEbgguAOyRdw">> = iolist_to_binary(re:replace("c::b","(?:b)|(?::+)","yRF\\1HE&g\\1guAOyRdw\\1",[global])),
    <<"jdes">> = iolist_to_binary(re:replace("az-","[-az]+","j\\1des",[])),
    <<"jdes">> = iolist_to_binary(re:replace("az-","[-az]+","j\\1des",[global])),
    <<"b">> = iolist_to_binary(re:replace("b","[-az]+","TIrmv",[])),
    <<"b">> = iolist_to_binary(re:replace("b","[-az]+","TIrmv",[global])),
    <<"SiKvza-guYQgKcq">> = iolist_to_binary(re:replace("za-","[az-]+","S\\1iKv&guYQgKcq",[])),
    <<"SiKvza-guYQgKcq">> = iolist_to_binary(re:replace("za-","[az-]+","S\\1iKv&guYQgKcq",[global])),
    <<"b">> = iolist_to_binary(re:replace("b","[az-]+","TR&&GJ&ee&reHRnfrtKb",[])),
    <<"b">> = iolist_to_binary(re:replace("b","[az-]+","TR&&GJ&ee&reHRnfrtKb",[global])),
    <<"ALqjMQmcPDj">> = iolist_to_binary(re:replace("a-z","[a\\-z]+","ALqjMQ\\1mcPDj",[])),
    <<"ALqjMQmcPDj">> = iolist_to_binary(re:replace("a-z","[a\\-z]+","ALqjMQ\\1mcPDj",[global])),
    <<"b">> = iolist_to_binary(re:replace("b","[a\\-z]+","\\1\\1Xdd&Y\\1&e",[])),
    <<"b">> = iolist_to_binary(re:replace("b","[a\\-z]+","\\1\\1Xdd&Y\\1&e",[global])),
    <<"qeSgi">> = iolist_to_binary(re:replace("abcdxyz","[a-z]+","qeS\\1gi",[])),
    <<"qeSgi">> = iolist_to_binary(re:replace("abcdxyz","[a-z]+","qeS\\1gi",[global])),
    ok.
run5() ->
    <<"nwCRrciRdOBbhlx">> = iolist_to_binary(re:replace("12-34","[\\d-]+","nwCRrci\\1RdOBbhlx",[])),
    <<"nwCRrciRdOBbhlx">> = iolist_to_binary(re:replace("12-34","[\\d-]+","nwCRrci\\1RdOBbhlx",[global])),
    <<"aaa">> = iolist_to_binary(re:replace("aaa","[\\d-]+","Lg&\\1XeI\\1Nyj",[])),
    <<"aaa">> = iolist_to_binary(re:replace("aaa","[\\d-]+","Lg&\\1XeI\\1Nyj",[global])),
    <<"GO\\g ">> = iolist_to_binary(re:replace("\\ ","\\x5c","GO&\\1\\1\\1g",[])),
    <<"GO\\g ">> = iolist_to_binary(re:replace("\\ ","\\x5c","GO&\\1\\1\\1g",[global])),
    <<"thelxmK Z Z ZeXuooo">> = iolist_to_binary(re:replace("the Zoo","\\x20Z","lxmK&&&eXuo\\1",[])),
    <<"thelxmK Z Z ZeXuooo">> = iolist_to_binary(re:replace("the Zoo","\\x20Z","lxmK&&&eXuo\\1",[global])),
    <<"Zulu">> = iolist_to_binary(re:replace("Zulu","\\x20Z","Tv&wJ\\1",[])),
    <<"Zulu">> = iolist_to_binary(re:replace("Zulu","\\x20Z","Tv&wJ\\1",[global])),
    <<"ababcbOcVbabcabc">> = iolist_to_binary(re:replace("abcabc","(abc)\\1","ab\\1bOcVb&",[caseless])),
    <<"ababcbOcVbabcabc">> = iolist_to_binary(re:replace("abcabc","(abc)\\1","ab\\1bOcVb&",[caseless,global])),
    <<"WMYjIOMVqCgUABCGVPH">> = iolist_to_binary(re:replace("ABCabc","(abc)\\1","WMYjIOMVqCgU\\1GVPH",[caseless])),
    <<"WMYjIOMVqCgUABCGVPH">> = iolist_to_binary(re:replace("ABCabc","(abc)\\1","WMYjIOMVqCgU\\1GVPH",[caseless,global])),
    <<"EjtNGCa">> = iolist_to_binary(re:replace("abcABC","(abc)\\1","EjtNGCa",[caseless])),
    <<"EjtNGCa">> = iolist_to_binary(re:replace("abcABC","(abc)\\1","EjtNGCa",[caseless,global])),
    <<"RVCvdVw">> = iolist_to_binary(re:replace("abc","abc$","R\\1VC\\1vdVw",[])),
    <<"RVCvdVw">> = iolist_to_binary(re:replace("abc","abc$","R\\1VC\\1vdVw",[global])),
    <<"VkSvabcabcAabcO">> = iolist_to_binary(re:replace("abc","abc$","Vk\\1Sv&&A&O",[])),
    <<"VkSvabcabcAabcO">> = iolist_to_binary(re:replace("abc","abc$","Vk\\1Sv&&A&O",[global])),
    <<"abc
def">> = iolist_to_binary(re:replace("abc
def","abc$","EY&WLBYc&PiCg",[])),
    <<"abc
def">> = iolist_to_binary(re:replace("abc
def","abc$","EY&WLBYc&PiCg",[global])),
    <<"gGabcY">> = iolist_to_binary(re:replace("abcS","(abc)\\123","gG\\1Y",[])),
    <<"gGabcY">> = iolist_to_binary(re:replace("abcS","(abc)\\123","gG\\1Y",[global])),
    <<"TXERvvabcHEnguTRN">> = iolist_to_binary(re:replace("abc","(abc)\\223","TXERvv\\1HEnguTRN",[])),
    <<"TXERvvabcHEnguTRN">> = iolist_to_binary(re:replace("abc","(abc)\\223","TXERvv\\1HEnguTRN",[global])),
    <<"jQEabcÓDJFGcabcabcbabccabcabcÓabcÓXBX">> = iolist_to_binary(re:replace("abcÓ","(abc)\\323","jQE&DJFGc\\1\\1b\\1c\\1&&XBX",[])),
    <<"jQEabcÓDJFGcabcabcbabccabcabcÓabcÓXBX">> = iolist_to_binary(re:replace("abcÓ","(abc)\\323","jQE&DJFGc\\1\\1b\\1c\\1&&XBX",[global])),
    <<"WQWQvwRSQleabc@">> = iolist_to_binary(re:replace("abc@","(abc)\\100","WQWQvwRSQle&",[])),
    <<"WQWQvwRSQleabc@">> = iolist_to_binary(re:replace("abc@","(abc)\\100","WQWQvwRSQle&",[global])),
    <<"BUfabcBsOeN">> = iolist_to_binary(re:replace("abc@","(abc)\\100","BUf\\1BsOeN",[])),
    <<"BUfabcBsOeN">> = iolist_to_binary(re:replace("abc@","(abc)\\100","BUf\\1BsOeN",[global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(abc)\\1000","NpupceROgJW",[])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(abc)\\1000","NpupceROgJW",[global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(abc)\\1000","DxJ\\1rCN&KXmSNk\\1S\\1",[])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(abc)\\1000","DxJ\\1rCN&KXmSNk\\1S\\1",[global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(abc)\\1000","HHLLlESKV",[])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(abc)\\1000","HHLLlESKV",[global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(abc)\\1000","wLJlupvA\\1\\1kNnalxEwVh",[])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(abc)\\1000","wLJlupvA\\1\\1kNnalxEwVh",[global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(abc)\\1000","JvOAObw\\1pP\\1",[])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(abc)\\1000","JvOAObw\\1pP\\1",[global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(abc)\\1000","gwuwm",[])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(abc)\\1000","gwuwm",[global])),
    <<"ABCDEFGHIHIxkAqVcABCDEFGHIHIaE">> = iolist_to_binary(re:replace("ABCDEFGHIHI","^(A)(B)(C)(D)(E)(F)(G)(H)(I)\\8\\9$","&xk\\1qVc&aE",[])),
    <<"ABCDEFGHIHIxkAqVcABCDEFGHIHIaE">> = iolist_to_binary(re:replace("ABCDEFGHIHI","^(A)(B)(C)(D)(E)(F)(G)(H)(I)\\8\\9$","&xk\\1qVc&aE",[global])),
    <<"WA8B9COgKgjfsLWNy">> = iolist_to_binary(re:replace("A8B9C","^[A\\8B\\9C]+$","\\1W\\1&Og\\1Kgj\\1fsLWNy",[])),
    <<"WA8B9COgKgjfsLWNy">> = iolist_to_binary(re:replace("A8B9C","^[A\\8B\\9C]+$","\\1W\\1&Og\\1Kgj\\1fsLWNy",[global])),
    <<"egunTysOf">> = iolist_to_binary(re:replace("A8B9C","^[A\\8B\\9C]+$","egunT\\1\\1y\\1sOf",[])),
    <<"egunTysOf">> = iolist_to_binary(re:replace("A8B9C","^[A\\8B\\9C]+$","egunT\\1\\1y\\1sOf",[global])),
    <<"CPTKOdIaA">> = iolist_to_binary(re:replace("abcdefghijkllS","(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)\\12\\123","CPTKOdI\\1A",[])),
    <<"CPTKOdIaA">> = iolist_to_binary(re:replace("abcdefghijkllS","(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)(l)\\12\\123","CPTKOdI\\1A",[global])),
    <<"bQdPqCFxabcdefghijk
SndDcFfikPvc">> = iolist_to_binary(re:replace("abcdefghijk
S","(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\\12\\123","bQdPqCFx&ndDcFfikPvc",[])),
    <<"bQdPqCFxabcdefghijk
SndDcFfikPvc">> = iolist_to_binary(re:replace("abcdefghijk
S","(a)(b)(c)(d)(e)(f)(g)(h)(i)(j)(k)\\12\\123","bQdPqCFx&ndDcFfikPvc",[global])),
    <<"IhbcKXoLYbce">> = iolist_to_binary(re:replace("bc","a{0}bc","Ih&KX\\1oLY&e",[])),
    <<"IhbcKXoLYbce">> = iolist_to_binary(re:replace("bc","a{0}bc","Ih&KX\\1oLY&e",[global])),
    <<"v">> = iolist_to_binary(re:replace("xyz","(a|(bc)){0,0}?xyz","v",[])),
    <<"v">> = iolist_to_binary(re:replace("xyz","(a|(bc)){0,0}?xyz","v",[global])),
    <<"rsDabcdeabcdeSRpKNvKVJ">> = iolist_to_binary(re:replace("abcde","abc[\\10]de","rsD&&SRpKNvKVJ",[])),
    <<"rsDabcdeabcdeSRpKNvKVJ">> = iolist_to_binary(re:replace("abcde","abc[\\10]de","rsD&&SRpKNvKVJ",[global])),
    <<"yVq">> = iolist_to_binary(re:replace("abcde","abc[\\1]de","yVq",[])),
    <<"yVq">> = iolist_to_binary(re:replace("abcde","abc[\\1]de","yVq",[global])),
    <<"snXy">> = iolist_to_binary(re:replace("abcde","(abc)[\\1]de","snXy",[])),
    <<"snXy">> = iolist_to_binary(re:replace("abcde","(abc)[\\1]de","snXy",[global])),
    <<"a
bfdlbEAWca
b">> = iolist_to_binary(re:replace("a
b","(?s)a.b","&f\\1dlb\\1EAWc&",[])),
    <<"a
bfdlbEAWca
b">> = iolist_to_binary(re:replace("a
b","(?s)a.b","&f\\1dlb\\1EAWc&",[global])),
    ok.
run6() ->
    <<"cSNFGiCd">> = iolist_to_binary(re:replace("baNOTccccd","^([^a])([^\\b])([^c]*)([^d]{3,4})","cSNFGiC",[])),
    <<"cSNFGiCd">> = iolist_to_binary(re:replace("baNOTccccd","^([^a])([^\\b])([^c]*)([^d]{3,4})","cSNFGiC",[global])),
    <<"lCbobBHbd">> = iolist_to_binary(re:replace("baNOTcccd","^([^a])([^\\b])([^c]*)([^d]{3,4})","lC\\1o\\1BH\\1",[])),
    <<"lCbobBHbd">> = iolist_to_binary(re:replace("baNOTcccd","^([^a])([^\\b])([^c]*)([^d]{3,4})","lC\\1o\\1BH\\1",[global])),
    <<"JVdboPbUmbaNOTccxTPd">> = iolist_to_binary(re:replace("baNOTccd","^([^a])([^\\b])([^c]*)([^d]{3,4})","JVd\\1oP\\1Um&xTP",[])),
    <<"JVdboPbUmbaNOTccxTPd">> = iolist_to_binary(re:replace("baNOTccd","^([^a])([^\\b])([^c]*)([^d]{3,4})","JVd\\1oP\\1Um&xTP",[global])),
    <<"cEqLBiFmobacccYRubacccQCAvtfd">> = iolist_to_binary(re:replace("bacccd","^([^a])([^\\b])([^c]*)([^d]{3,4})","cEqLBiFmo&YRu&QCAvtf",[])),
    <<"cEqLBiFmobacccYRubacccQCAvtfd">> = iolist_to_binary(re:replace("bacccd","^([^a])([^\\b])([^c]*)([^d]{3,4})","cEqLBiFmo&YRu&QCAvtf",[global])),
    <<"anything">> = iolist_to_binary(re:replace("anything","^([^a])([^\\b])([^c]*)([^d]{3,4})","kc&H\\1Pd\\1PDS",[])),
    <<"anything">> = iolist_to_binary(re:replace("anything","^([^a])([^\\b])([^c]*)([^d]{3,4})","kc&H\\1Pd\\1PDS",[global])),
    <<"bc">> = iolist_to_binary(re:replace("bc","^([^a])([^\\b])([^c]*)([^d]{3,4})","XQVTFMq",[])),
    <<"bc">> = iolist_to_binary(re:replace("bc","^([^a])([^\\b])([^c]*)([^d]{3,4})","XQVTFMq",[global])),
    <<"baccd">> = iolist_to_binary(re:replace("baccd","^([^a])([^\\b])([^c]*)([^d]{3,4})","J\\1fh",[])),
    <<"baccd">> = iolist_to_binary(re:replace("baccd","^([^a])([^\\b])([^c]*)([^d]{3,4})","J\\1fh",[global])),
    <<"obc">> = iolist_to_binary(re:replace("Abc","[^a]","o",[])),
    <<"ooo">> = iolist_to_binary(re:replace("Abc","[^a]","o",[global])),
    <<"AbDc">> = iolist_to_binary(re:replace("Abc","[^a]","&\\1\\1D",[caseless])),
    <<"AbDcD">> = iolist_to_binary(re:replace("Abc","[^a]","&\\1\\1D",[caseless,global])),
    <<"AAAFyyfdbkSwaAbc">> = iolist_to_binary(re:replace("AAAaAbc","[^a]+","&FyyfdbkSw",[])),
    <<"AAAFyyfdbkSwaAbcFyyfdbkSw">> = iolist_to_binary(re:replace("AAAaAbc","[^a]+","&FyyfdbkSw",[global])),
    <<"AAAaAJbcDSWbcbCxetpbcHwOmBy">> = iolist_to_binary(re:replace("AAAaAbc","[^a]+","J&DSW&bCxetp&HwOmBy",[caseless])),
    <<"AAAaAJbcDSWbcbCxetpbcHwOmBy">> = iolist_to_binary(re:replace("AAAaAbc","[^a]+","J&DSW&bCxetp&HwOmBy",[caseless,global])),
    <<"VMqgmhvamVb">> = iolist_to_binary(re:replace("bbb
ccc","[^a]+","VMqgmh\\1vamVb",[])),
    <<"VMqgmhvamVb">> = iolist_to_binary(re:replace("bbb
ccc","[^a]+","VMqgmh\\1vamVb",[global])),
    <<"abcOcTcrDxcrN">> = iolist_to_binary(re:replace("abc","[^k]$","&O&\\1T&rDx&r\\1N",[])),
    <<"abcOcTcrDxcrN">> = iolist_to_binary(re:replace("abc","[^k]$","&O&\\1T&rDx&r\\1N",[global])),
    <<"abk">> = iolist_to_binary(re:replace("abk","[^k]$","\\1E&JakaDTgMFY\\1QIV&T",[])),
    <<"abk">> = iolist_to_binary(re:replace("abk","[^k]$","\\1E&JakaDTgMFY\\1QIV&T",[global])),
    <<"okQxKKgjAExrmhx">> = iolist_to_binary(re:replace("abc","[^k]{2,3}$","okQx\\1K\\1KgjAExrmhx",[])),
    <<"okQxKKgjAExrmhx">> = iolist_to_binary(re:replace("abc","[^k]{2,3}$","okQx\\1K\\1KgjAExrmhx",[global])),
    <<"kBUiIgkpFguybl">> = iolist_to_binary(re:replace("kbc","[^k]{2,3}$","BU\\1iIgkpFguybl",[])),
    <<"kBUiIgkpFguybl">> = iolist_to_binary(re:replace("kbc","[^k]{2,3}$","BU\\1iIgkpFguybl",[global])),
    <<"kVSpIRyV">> = iolist_to_binary(re:replace("kabc","[^k]{2,3}$","VSpIRyV",[])),
    <<"kVSpIRyV">> = iolist_to_binary(re:replace("kabc","[^k]{2,3}$","VSpIRyV",[global])),
    <<"abk">> = iolist_to_binary(re:replace("abk","[^k]{2,3}$","\\1rfMIWIp\\1eA\\1BK",[])),
    <<"abk">> = iolist_to_binary(re:replace("abk","[^k]{2,3}$","\\1rfMIWIp\\1eA\\1BK",[global])),
    <<"akb">> = iolist_to_binary(re:replace("akb","[^k]{2,3}$","fuJua",[])),
    <<"akb">> = iolist_to_binary(re:replace("akb","[^k]{2,3}$","fuJua",[global])),
    <<"akk">> = iolist_to_binary(re:replace("akk","[^k]{2,3}$","wpj",[])),
    <<"akk">> = iolist_to_binary(re:replace("akk","[^k]{2,3}$","wpj",[global])),
    <<"12345678.b.c.d">> = iolist_to_binary(re:replace("12345678.b.c.d","^\\d{8,}\\@.+[^k]$","nf&cDP\\1\\1Gu\\1b\\1xqHex",[])),
    <<"12345678.b.c.d">> = iolist_to_binary(re:replace("12345678.b.c.d","^\\d{8,}\\@.+[^k]$","nf&cDP\\1\\1Gu\\1b\\1xqHex",[global])),
    <<"123456789.y.z">> = iolist_to_binary(re:replace("123456789.y.z","^\\d{8,}\\@.+[^k]$","H&dykWGVx\\1yC\\1\\1b\\1A",[])),
    <<"123456789.y.z">> = iolist_to_binary(re:replace("123456789.y.z","^\\d{8,}\\@.+[^k]$","H&dykWGVx\\1yC\\1\\1b\\1A",[global])),
    <<"12345678.y.uk">> = iolist_to_binary(re:replace("12345678.y.uk","^\\d{8,}\\@.+[^k]$","Ge&A&s&wED\\1Os&\\1a\\1&",[])),
    <<"12345678.y.uk">> = iolist_to_binary(re:replace("12345678.y.uk","^\\d{8,}\\@.+[^k]$","Ge&A&s&wED\\1Os&\\1a\\1&",[global])),
    <<"1234567.b.c.d">> = iolist_to_binary(re:replace("1234567.b.c.d","^\\d{8,}\\@.+[^k]$","\\1GK&npQ",[])),
    <<"1234567.b.c.d">> = iolist_to_binary(re:replace("1234567.b.c.d","^\\d{8,}\\@.+[^k]$","\\1GK&npQ",[global])),
    <<"aaaaaaaaaaaaaaaaaaIDTvQkHCaklFHnCa">> = iolist_to_binary(re:replace("aaaaaaaaa","(a)\\1{8,}","&&IDTvQkHC\\1klFHnC\\1",[])),
    <<"aaaaaaaaaaaaaaaaaaIDTvQkHCaklFHnCa">> = iolist_to_binary(re:replace("aaaaaaaaa","(a)\\1{8,}","&&IDTvQkHC\\1klFHnC\\1",[global])),
    <<"XabYlaaaaaaaaaaaaaaaaaaaaDmaCQVrabP">> = iolist_to_binary(re:replace("aaaaaaaaaa","(a)\\1{8,}","X\\1bYl&&Dm\\1CQVr\\1bP",[])),
    <<"XabYlaaaaaaaaaaaaaaaaaaaaDmaCQVrabP">> = iolist_to_binary(re:replace("aaaaaaaaaa","(a)\\1{8,}","X\\1bYl&&Dm\\1CQVr\\1bP",[global])),
    <<"aaaaaaa">> = iolist_to_binary(re:replace("aaaaaaa","(a)\\1{8,}","PTn&XmiYqAKkS&BW&&",[])),
    <<"aaaaaaa">> = iolist_to_binary(re:replace("aaaaaaa","(a)\\1{8,}","PTn&XmiYqAKkS&BW&&",[global])),
    <<"aaaaWReIgpFjWbAcd">> = iolist_to_binary(re:replace("aaaabcd","[^a]","WReIgpFjW&A",[])),
    <<"aaaaWReIgpFjWbAWReIgpFjWcAWReIgpFjWdA">> = iolist_to_binary(re:replace("aaaabcd","[^a]","WReIgpFjW&A",[global])),
    <<"aaVYdXtmOgjmuYAiVjAAabcd">> = iolist_to_binary(re:replace("aaAabcd","[^a]","VYdXtmOgjmuYAiVjA&",[])),
    <<"aaVYdXtmOgjmuYAiVjAAaVYdXtmOgjmuYAiVjAbVYdXtmOgjmuYAiVjAcVYdXtmOgjmuYAiVjAd">> = iolist_to_binary(re:replace("aaAabcd","[^a]","VYdXtmOgjmuYAiVjA&",[global])),
    <<"aaaailjDubIwQuwEcd">> = iolist_to_binary(re:replace("aaaabcd","[^a]","iljDu&Iw\\1Q\\1uwE\\1",[caseless])),
    <<"aaaailjDubIwQuwEiljDucIwQuwEiljDudIwQuwE">> = iolist_to_binary(re:replace("aaaabcd","[^a]","iljDu&Iw\\1Q\\1uwE\\1",[caseless,global])),
    <<"aaAaojkRRJFThVxvcd">> = iolist_to_binary(re:replace("aaAabcd","[^a]","\\1ojkRRJFT\\1hV\\1xv",[caseless])),
    <<"aaAaojkRRJFThVxvojkRRJFThVxvojkRRJFThVxv">> = iolist_to_binary(re:replace("aaAabcd","[^a]","\\1ojkRRJFT\\1hV\\1xv",[caseless,global])),
    <<"aaaauaSyVYwncd">> = iolist_to_binary(re:replace("aaaabcd","[^az]","uaSyVYwn",[])),
    <<"aaaauaSyVYwnuaSyVYwnuaSyVYwn">> = iolist_to_binary(re:replace("aaaabcd","[^az]","uaSyVYwn",[global])),
    <<"aahabcd">> = iolist_to_binary(re:replace("aaAabcd","[^az]","h",[])),
    <<"aahahhh">> = iolist_to_binary(re:replace("aaAabcd","[^az]","h",[global])),
    <<"aaaayvNMtIlHrnqcd">> = iolist_to_binary(re:replace("aaaabcd","[^az]","yvNMtI\\1lHrnq",[caseless])),
    <<"aaaayvNMtIlHrnqyvNMtIlHrnqyvNMtIlHrnq">> = iolist_to_binary(re:replace("aaaabcd","[^az]","yvNMtI\\1lHrnq",[caseless,global])),
    <<"aaAaTVbGmJbKIEpcd">> = iolist_to_binary(re:replace("aaAabcd","[^az]","TV&Gm\\1J&KIEp",[caseless])),
    <<"aaAaTVbGmJbKIEpTVcGmJcKIEpTVdGmJdKIEp">> = iolist_to_binary(re:replace("aaAabcd","[^az]","TV&Gm\\1J&KIEp",[caseless,global])),
    <<"xxxxxxxxxxxyPSTAIREISLLohtmPSTAIREISLLhlKJyPSTAIREISLLxxxxxxxxxx">> = iolist_to_binary(re:replace("xxxxxxxxxxxPSTAIREISLLxxxxxxxxx","P[^*]TAIRE[^*]{1,6}?LL","y&ohtm&\\1hlKJy&x",[])),
    <<"xxxxxxxxxxxyPSTAIREISLLohtmPSTAIREISLLhlKJyPSTAIREISLLxxxxxxxxxx">> = iolist_to_binary(re:replace("xxxxxxxxxxxPSTAIREISLLxxxxxxxxx","P[^*]TAIRE[^*]{1,6}?LL","y&ohtm&\\1hlKJy&x",[global])),
    <<"xxxxxxxxxxxEmVUOVQKbyOvWqxxxxxxxxx">> = iolist_to_binary(re:replace("xxxxxxxxxxxPSTAIREISLLxxxxxxxxx","P[^*]TAIRE[^*]{1,}?LL","EmV\\1UO\\1VQKbyO\\1vW\\1q",[])),
    <<"xxxxxxxxxxxEmVUOVQKbyOvWqxxxxxxxxx">> = iolist_to_binary(re:replace("xxxxxxxxxxxPSTAIREISLLxxxxxxxxx","P[^*]TAIRE[^*]{1,}?LL","EmV\\1UO\\1VQKbyO\\1vW\\1q",[global])),
    <<"1DsOhH.23FoWiLok.230003938V.23gG">> = iolist_to_binary(re:replace("1.230003938","(\\.\\d\\d[1-9]?)\\d+","DsOhH\\1FoWiLok&V\\1gG",[])),
    <<"1DsOhH.23FoWiLok.230003938V.23gG">> = iolist_to_binary(re:replace("1.230003938","(\\.\\d\\d[1-9]?)\\d+","DsOhH\\1FoWiLok&V\\1gG",[global])),
    <<"1iW.875ch.875000282X">> = iolist_to_binary(re:replace("1.875000282","(\\.\\d\\d[1-9]?)\\d+","iW\\1ch&X",[])),
    <<"1iW.875ch.875000282X">> = iolist_to_binary(re:replace("1.875000282","(\\.\\d\\d[1-9]?)\\d+","iW\\1ch&X",[global])),
    <<"1plBoHLB.235b">> = iolist_to_binary(re:replace("1.235","(\\.\\d\\d[1-9]?)\\d+","plBoHLB&b",[])),
    <<"1plBoHLB.235b">> = iolist_to_binary(re:replace("1.235","(\\.\\d\\d[1-9]?)\\d+","plBoHLB&b",[global])),
    <<"1EM0003938">> = iolist_to_binary(re:replace("1.230003938","(\\.\\d\\d((?=0)|\\d(?=\\d)))","EM",[])),
    <<"1EM0003938">> = iolist_to_binary(re:replace("1.230003938","(\\.\\d\\d((?=0)|\\d(?=\\d)))","EM",[global])),
    <<"1.875aguwNOw.875Q.875p.875000282">> = iolist_to_binary(re:replace("1.875000282","(\\.\\d\\d((?=0)|\\d(?=\\d)))","\\1aguwNOw&Q&p&",[])),
    <<"1.875aguwNOw.875Q.875p.875000282">> = iolist_to_binary(re:replace("1.875000282","(\\.\\d\\d((?=0)|\\d(?=\\d)))","\\1aguwNOw&Q&p&",[global])),
    <<"1.235">> = iolist_to_binary(re:replace("1.235","(\\.\\d\\d((?=0)|\\d(?=\\d)))","&uq&w\\1&\\1sxWGOk",[])),
    <<"1.235">> = iolist_to_binary(re:replace("1.235","(\\.\\d\\d((?=0)|\\d(?=\\d)))","&uq&w\\1&\\1sxWGOk",[global])),
    <<"dMwabXqyababi">> = iolist_to_binary(re:replace("ab","a(?)b","dMw&Xqy&&i",[])),
    <<"dMwabXqyababi">> = iolist_to_binary(re:replace("ab","a(?)b","dMw&Xqy&&i",[global])),
    ok.
run7() ->
    <<"Food is on the MiqonlGfoo tableYdXfoof">> = iolist_to_binary(re:replace("Food is on the foo table","\\b(foo)\\s+(\\w+)","MiqonlG&YdX\\1f",[caseless])),
    <<"Food is on the MiqonlGfoo tableYdXfoof">> = iolist_to_binary(re:replace("Food is on the foo table","\\b(foo)\\s+(\\w+)","MiqonlG&YdX\\1f",[caseless,global])),
    <<"The mTlfood is under the bar in the barbdhBATwWn.">> = iolist_to_binary(re:replace("The food is under the bar in the barn.","foo(.*)bar","mTl&bdhBATwW",[])),
    <<"The mTlfood is under the bar in the barbdhBATwWn.">> = iolist_to_binary(re:replace("The food is under the bar in the barn.","foo(.*)bar","mTl&bdhBATwW",[global])),
    <<"The Qd is under the RSbUfood is under the barRfood is under the barfood is under the barfd is under the kd is under the Wd is under the  in the barn.">> = iolist_to_binary(re:replace("The food is under the bar in the barn.","foo(.*?)bar","Q\\1RSbU&R&&f\\1k\\1W\\1",[])),
    <<"The Qd is under the RSbUfood is under the barRfood is under the barfood is under the barfd is under the kd is under the Wd is under the  in the barn.">> = iolist_to_binary(re:replace("The food is under the bar in the barn.","foo(.*?)bar","Q\\1RSbU&R&&f\\1k\\1W\\1",[global])),
    <<"LCsN">> = iolist_to_binary(re:replace("I have 2 numbers: 53147","(.*)(\\d*)","LCsN",[])),
    <<"LCsNLCsN">> = iolist_to_binary(re:replace("I have 2 numbers: 53147","(.*)(\\d*)","LCsN",[global])),
    <<"cotASRI have 2 numbers: 5314IJoJI have 2 numbers: 5314rI have 2 numbers: 5314k">> = iolist_to_binary(re:replace("I have 2 numbers: 53147","(.*)(\\d+)","cotASR\\1IJoJ\\1r\\1k",[])),
    <<"cotASRI have 2 numbers: 5314IJoJI have 2 numbers: 5314rI have 2 numbers: 5314k">> = iolist_to_binary(re:replace("I have 2 numbers: 53147","(.*)(\\d+)","cotASR\\1IJoJ\\1r\\1k",[global])),
    <<"I have 2 numbers: 53147">> = iolist_to_binary(re:replace("I have 2 numbers: 53147","(.*?)(\\d*)","&",[])),
    <<"I have 2 numbers: 53147">> = iolist_to_binary(re:replace("I have 2 numbers: 53147","(.*?)(\\d*)","&",[global])),
    <<"gUfvqdMOI have 2FeVghI have 2I have K numbers: 53147">> = iolist_to_binary(re:replace("I have 2 numbers: 53147","(.*?)(\\d+)","gUfvqdMO&FeVgh&\\1K",[])),
    <<"gUfvqdMOI have 2FeVghI have 2I have KgUfvqdMO numbers: 53147FeVgh numbers: 53147 numbers: K">> = iolist_to_binary(re:replace("I have 2 numbers: 53147","(.*?)(\\d+)","gUfvqdMO&FeVgh&\\1K",[global])),
    <<"foMARI have 2 numbers: 5314CWgI have 2 numbers: 53147yI have 2 numbers: 53147dngFI have 2 numbers: 53147ELI have 2 numbers: 5314">> = iolist_to_binary(re:replace("I have 2 numbers: 53147","(.*)(\\d+)$","foMAR\\1CWg&y&dngF&EL\\1",[])),
    <<"foMARI have 2 numbers: 5314CWgI have 2 numbers: 53147yI have 2 numbers: 53147dngFI have 2 numbers: 53147ELI have 2 numbers: 5314">> = iolist_to_binary(re:replace("I have 2 numbers: 53147","(.*)(\\d+)$","foMAR\\1CWg&y&dngF&EL\\1",[global])),
    <<"I have 2 numbers: muHsUI have 2 numbers: 53147g">> = iolist_to_binary(re:replace("I have 2 numbers: 53147","(.*?)(\\d+)$","\\1muHsU&g",[])),
    <<"I have 2 numbers: muHsUI have 2 numbers: 53147g">> = iolist_to_binary(re:replace("I have 2 numbers: 53147","(.*?)(\\d+)$","\\1muHsU&g",[global])),
    <<"gBAwgJtI have 2 numbers: 53147GcuKI have 2 numbers: kFI have 2 numbers: 53147dI have 2 numbers: JI have 2 numbers: ">> = iolist_to_binary(re:replace("I have 2 numbers: 53147","(.*)\\b(\\d+)$","gBAwgJt&GcuK\\1kF&d\\1J\\1",[])),
    <<"gBAwgJtI have 2 numbers: 53147GcuKI have 2 numbers: kFI have 2 numbers: 53147dI have 2 numbers: JI have 2 numbers: ">> = iolist_to_binary(re:replace("I have 2 numbers: 53147","(.*)\\b(\\d+)$","gBAwgJt&GcuK\\1kF&d\\1J\\1",[global])),
    <<"WlI have 2 numbers: 53147">> = iolist_to_binary(re:replace("I have 2 numbers: 53147","(.*\\D)(\\d+)$","Wl&",[])),
    <<"WlI have 2 numbers: 53147">> = iolist_to_binary(re:replace("I have 2 numbers: 53147","(.*\\D)(\\d+)$","Wl&",[global])),
    <<"hBMrVC123">> = iolist_to_binary(re:replace("ABC123","^\\D*(?!123)","hBMrV",[])),
    <<"hBMrVC123">> = iolist_to_binary(re:replace("ABC123","^\\D*(?!123)","hBMrV",[global])),
    <<"ABCABCwisSqVPABCfM445">> = iolist_to_binary(re:replace("ABC445","^(\\D*)(?=\\d)(?!123)","\\1&wisSqVP&fM",[])),
    <<"ABCABCwisSqVPABCfM445">> = iolist_to_binary(re:replace("ABC445","^(\\D*)(?=\\d)(?!123)","\\1&wisSqVP&fM",[global])),
    <<"ABC123">> = iolist_to_binary(re:replace("ABC123","^(\\D*)(?=\\d)(?!123)","nt\\1&NS\\1&LRL",[])),
    <<"ABC123">> = iolist_to_binary(re:replace("ABC123","^(\\D*)(?=\\d)(?!123)","nt\\1&NS\\1&LRL",[global])),
    <<"YwqNG789">> = iolist_to_binary(re:replace("W46]789","^[W-]46]","YwqNG",[])),
    <<"YwqNG789">> = iolist_to_binary(re:replace("W46]789","^[W-]46]","YwqNG",[global])),
    <<"k789">> = iolist_to_binary(re:replace("-46]789","^[W-]46]","k",[])),
    <<"k789">> = iolist_to_binary(re:replace("-46]789","^[W-]46]","k",[global])),
    <<"Wall">> = iolist_to_binary(re:replace("Wall","^[W-]46]","KwWO&&vstprfv\\1nSvjs\\1",[])),
    <<"Wall">> = iolist_to_binary(re:replace("Wall","^[W-]46]","KwWO&&vstprfv\\1nSvjs\\1",[global])),
    <<"Zebra">> = iolist_to_binary(re:replace("Zebra","^[W-]46]","&DuSaDcpmCspdNx",[])),
    <<"Zebra">> = iolist_to_binary(re:replace("Zebra","^[W-]46]","&DuSaDcpmCspdNx",[global])),
    <<"42">> = iolist_to_binary(re:replace("42","^[W-]46]","\\1&&vPJ&&VKxVnKE",[])),
    <<"42">> = iolist_to_binary(re:replace("42","^[W-]46]","\\1&&vPJ&&VKxVnKE",[global])),
    <<"[abcd]">> = iolist_to_binary(re:replace("[abcd]","^[W-]46]","gkpET&F\\1hESR",[])),
    <<"[abcd]">> = iolist_to_binary(re:replace("[abcd]","^[W-]46]","gkpET&F\\1hESR",[global])),
    <<"]abcd[">> = iolist_to_binary(re:replace("]abcd[","^[W-]46]","wpngtyXvIn&Ib",[])),
    <<"]abcd[">> = iolist_to_binary(re:replace("]abcd[","^[W-]46]","wpngtyXvIn&Ib",[global])),
    <<"CdxWJtWN46]789">> = iolist_to_binary(re:replace("W46]789","^[W-\\]46]","Cdx\\1&JtWN",[])),
    <<"CdxWJtWN46]789">> = iolist_to_binary(re:replace("W46]789","^[W-\\]46]","Cdx\\1&JtWN",[global])),
    <<"nXWLWqofWWMall">> = iolist_to_binary(re:replace("Wall","^[W-\\]46]","nX&LWqof&&M",[])),
    <<"nXWLWqofWWMall">> = iolist_to_binary(re:replace("Wall","^[W-\\]46]","nX&LWqof&&M",[global])),
    <<"cxVZXZUZZITebra">> = iolist_to_binary(re:replace("Zebra","^[W-\\]46]","cxV&X&U&&\\1IT",[])),
    <<"cxVZXZUZZITebra">> = iolist_to_binary(re:replace("Zebra","^[W-\\]46]","cxV&X&U&&\\1IT",[global])),
    <<"nDXOuXEEylophone">> = iolist_to_binary(re:replace("Xylophone","^[W-\\]46]","nD&Ou&EE",[])),
    <<"nDXOuXEEylophone">> = iolist_to_binary(re:replace("Xylophone","^[W-\\]46]","nD&Ou&EE",[global])),
    <<"ytBjWJyKhvR2">> = iolist_to_binary(re:replace("42","^[W-\\]46]","ytBjWJ\\1yKhvR",[])),
    <<"ytBjWJyKhvR2">> = iolist_to_binary(re:replace("42","^[W-\\]46]","ytBjWJ\\1yKhvR",[global])),
    <<"rK[NsPabcd]">> = iolist_to_binary(re:replace("[abcd]","^[W-\\]46]","rK&NsP",[])),
    <<"rK[NsPabcd]">> = iolist_to_binary(re:replace("[abcd]","^[W-\\]46]","rK&NsP",[global])),
    <<"ADtLINvwgrabcd[">> = iolist_to_binary(re:replace("]abcd[","^[W-\\]46]","ADtLINvwgr",[])),
    <<"ADtLINvwgrabcd[">> = iolist_to_binary(re:replace("]abcd[","^[W-\\]46]","ADtLINvwgr",[global])),
    <<"XLidr\\J\\Qdbackslash">> = iolist_to_binary(re:replace("\\backslash","^[W-\\]46]","X\\1\\1Lidr&J&\\1Qd",[])),
    <<"XLidr\\J\\Qdbackslash">> = iolist_to_binary(re:replace("\\backslash","^[W-\\]46]","X\\1\\1Lidr&J&\\1Qd",[global])),
    <<"-46]789">> = iolist_to_binary(re:replace("-46]789","^[W-\\]46]","QAX",[])),
    <<"-46]789">> = iolist_to_binary(re:replace("-46]789","^[W-\\]46]","QAX",[global])),
    <<"well">> = iolist_to_binary(re:replace("well","^[W-\\]46]","\\1nMgDDeE&j\\1IL",[])),
    <<"well">> = iolist_to_binary(re:replace("well","^[W-\\]46]","\\1nMgDDeE&j\\1IL",[global])),
    <<"BQkUword cat dog elephant mussel cow horse canary baboon snake shark otherwordNword cat dog elephant mussel cow horse canary baboon snake shark otherwordsIMword cat dog elephant mussel cow horse canary baboon snake shark otherwordAaxu">> = iolist_to_binary(re:replace("word cat dog elephant mussel cow horse canary baboon snake shark otherword","word (?:[a-zA-Z0-9]+ ){0,10}otherword","BQkU&N&sI\\1M&Aaxu",[])),
    <<"BQkUword cat dog elephant mussel cow horse canary baboon snake shark otherwordNword cat dog elephant mussel cow horse canary baboon snake shark otherwordsIMword cat dog elephant mussel cow horse canary baboon snake shark otherwordAaxu">> = iolist_to_binary(re:replace("word cat dog elephant mussel cow horse canary baboon snake shark otherword","word (?:[a-zA-Z0-9]+ ){0,10}otherword","BQkU&N&sI\\1M&Aaxu",[global])),
    <<"word cat dog elephant mussel cow horse canary baboon snake shark">> = iolist_to_binary(re:replace("word cat dog elephant mussel cow horse canary baboon snake shark","word (?:[a-zA-Z0-9]+ ){0,10}otherword","&yfrxEdF",[])),
    <<"word cat dog elephant mussel cow horse canary baboon snake shark">> = iolist_to_binary(re:replace("word cat dog elephant mussel cow horse canary baboon snake shark","word (?:[a-zA-Z0-9]+ ){0,10}otherword","&yfrxEdF",[global])),
    <<"word cat dog elephant mussel cow horse canary baboon snake shark the quick brown fox and the lazy dog and several other words getting close to thirty by now I hope">> = iolist_to_binary(re:replace("word cat dog elephant mussel cow horse canary baboon snake shark the quick brown fox and the lazy dog and several other words getting close to thirty by now I hope","word (?:[a-zA-Z0-9]+ ){0,300}otherword","Ou",[])),
    <<"word cat dog elephant mussel cow horse canary baboon snake shark the quick brown fox and the lazy dog and several other words getting close to thirty by now I hope">> = iolist_to_binary(re:replace("word cat dog elephant mussel cow horse canary baboon snake shark the quick brown fox and the lazy dog and several other words getting close to thirty by now I hope","word (?:[a-zA-Z0-9]+ ){0,300}otherword","Ou",[global])),
    <<"qCQCkBIVIMNQHYbcd">> = iolist_to_binary(re:replace("bcd","^(a){0,0}","&qCQCkBIVIMN\\1QHY",[])),
    <<"qCQCkBIVIMNQHYbcd">> = iolist_to_binary(re:replace("bcd","^(a){0,0}","&qCQCkBIVIMN\\1QHY",[global])),
    <<"BepHkVKFjuIYfIMUyabc">> = iolist_to_binary(re:replace("abc","^(a){0,0}","Bep&HkVK&FjuIYfIMUy",[])),
    <<"BepHkVKFjuIYfIMUyabc">> = iolist_to_binary(re:replace("abc","^(a){0,0}","Bep&HkVK&FjuIYfIMUy",[global])),
    <<"VUQiJFuaTHwoAPgwaab">> = iolist_to_binary(re:replace("aab","^(a){0,0}","VUQi&\\1\\1JFuaTHwoAPgw",[])),
    <<"VUQiJFuaTHwoAPgwaab">> = iolist_to_binary(re:replace("aab","^(a){0,0}","VUQi&\\1\\1JFuaTHwoAPgw",[global])),
    <<"wRbcd">> = iolist_to_binary(re:replace("bcd","^(a){0,1}","wR",[])),
    <<"wRbcd">> = iolist_to_binary(re:replace("bcd","^(a){0,1}","wR",[global])),
    <<"rJBXyKAoaabc">> = iolist_to_binary(re:replace("abc","^(a){0,1}","rJBXyKAo\\1&",[])),
    <<"rJBXyKAoaabc">> = iolist_to_binary(re:replace("abc","^(a){0,1}","rJBXyKAo\\1&",[global])),
    <<"atMfharwaaXaab">> = iolist_to_binary(re:replace("aab","^(a){0,1}","\\1tMfh\\1rw&&X&",[])),
    <<"atMfharwaaXaab">> = iolist_to_binary(re:replace("aab","^(a){0,1}","\\1tMfh\\1rw&&X&",[global])),
    ok.
run8() ->
    <<"BMBstTttCbcd">> = iolist_to_binary(re:replace("bcd","^(a){0,2}","B&M\\1&B\\1stTtt&C",[])),
    <<"BMBstTttCbcd">> = iolist_to_binary(re:replace("bcd","^(a){0,2}","B&M\\1&B\\1stTtt&C",[global])),
    <<"GmnpaTVRbathURLlbc">> = iolist_to_binary(re:replace("abc","^(a){0,2}","Gmnp\\1TVRb&thURLl",[])),
    <<"GmnpaTVRbathURLlbc">> = iolist_to_binary(re:replace("abc","^(a){0,2}","Gmnp\\1TVRb&thURLl",[global])),
    <<"SwSBmFSuayEaaicb">> = iolist_to_binary(re:replace("aab","^(a){0,2}","SwSBmFSu\\1yE&ic",[])),
    <<"SwSBmFSuayEaaicb">> = iolist_to_binary(re:replace("aab","^(a){0,2}","SwSBmFSu\\1yE&ic",[global])),
    <<"mVkbcd">> = iolist_to_binary(re:replace("bcd","^(a){0,3}","mVk\\1",[])),
    <<"mVkbcd">> = iolist_to_binary(re:replace("bcd","^(a){0,3}","mVk\\1",[global])),
    <<"fbc">> = iolist_to_binary(re:replace("abc","^(a){0,3}","f",[])),
    <<"fbc">> = iolist_to_binary(re:replace("abc","^(a){0,3}","f",[global])),
    <<"XISfGaLaaYgb">> = iolist_to_binary(re:replace("aab","^(a){0,3}","XISfG\\1L&Yg",[])),
    <<"XISfGaLaaYgb">> = iolist_to_binary(re:replace("aab","^(a){0,3}","XISfG\\1L&Yg",[global])),
    <<"JnSaSnsccaaWPaa">> = iolist_to_binary(re:replace("aaa","^(a){0,3}","JnS\\1Snscc\\1\\1WP\\1\\1",[])),
    <<"JnSaSnsccaaWPaa">> = iolist_to_binary(re:replace("aaa","^(a){0,3}","JnS\\1Snscc\\1\\1WP\\1\\1",[global])),
    <<"uFrXNLErryUYbcd">> = iolist_to_binary(re:replace("bcd","^(a){0,}","uF&rXNLErr\\1yUY",[])),
    <<"uFrXNLErryUYbcd">> = iolist_to_binary(re:replace("bcd","^(a){0,}","uF&rXNLErr\\1yUY",[global])),
    <<"YFlPabc">> = iolist_to_binary(re:replace("abc","^(a){0,}","YFlP&",[])),
    <<"YFlPabc">> = iolist_to_binary(re:replace("abc","^(a){0,}","YFlP&",[global])),
    <<"twTFobaaoaakbYfyfaaNb">> = iolist_to_binary(re:replace("aab","^(a){0,}","twTFob&o&kbYfyf&N",[])),
    <<"twTFobaaoaakbYfyfaaNb">> = iolist_to_binary(re:replace("aab","^(a){0,}","twTFob&o&kbYfyf&N",[global])),
    <<"iNaaaUAvL">> = iolist_to_binary(re:replace("aaa","^(a){0,}","iN&UAvL",[])),
    <<"iNaaaUAvL">> = iolist_to_binary(re:replace("aaa","^(a){0,}","iN&UAvL",[global])),
    <<"raaaaaaaahaPJBcaaaaaaaaxhdRAdaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaa","^(a){0,}","r&h\\1PJBc&xhdRAd&",[])),
    <<"raaaaaaaahaPJBcaaaaaaaaxhdRAdaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaa","^(a){0,}","r&h\\1PJBc&xhdRAd&",[global])),
    <<"JUaakaaJByoSTnBssabc">> = iolist_to_binary(re:replace("abc","^(a){1,1}","JUa&k\\1&JByoSTnBss&",[])),
    <<"JUaakaaJByoSTnBssabc">> = iolist_to_binary(re:replace("abc","^(a){1,1}","JUa&k\\1&JByoSTnBss&",[global])),
    <<"haoacpab">> = iolist_to_binary(re:replace("aab","^(a){1,1}","hao&cp",[])),
    <<"haoacpab">> = iolist_to_binary(re:replace("aab","^(a){1,1}","hao&cp",[global])),
    <<"bcd">> = iolist_to_binary(re:replace("bcd","^(a){1,1}","Ns",[])),
    <<"bcd">> = iolist_to_binary(re:replace("bcd","^(a){1,1}","Ns",[global])),
    <<"YeakfvXaacrmMcdbc">> = iolist_to_binary(re:replace("abc","^(a){1,2}","Ye\\1kfvX&&crmMcd",[])),
    <<"YeakfvXaacrmMcdbc">> = iolist_to_binary(re:replace("abc","^(a){1,2}","Ye\\1kfvX&&crmMcd",[global])),
    <<"ltSVkYwab">> = iolist_to_binary(re:replace("aab","^(a){1,2}","ltSVkYw\\1",[])),
    <<"ltSVkYwab">> = iolist_to_binary(re:replace("aab","^(a){1,2}","ltSVkYw\\1",[global])),
    <<"bcd">> = iolist_to_binary(re:replace("bcd","^(a){1,2}","sD",[])),
    <<"bcd">> = iolist_to_binary(re:replace("bcd","^(a){1,2}","sD",[global])),
    <<"Rlocpbc">> = iolist_to_binary(re:replace("abc","^(a){1,3}","Rlocp",[])),
    <<"Rlocpbc">> = iolist_to_binary(re:replace("abc","^(a){1,3}","Rlocp",[global])),
    <<"kvpCtRfJb">> = iolist_to_binary(re:replace("aab","^(a){1,3}","kvpCtRfJ",[])),
    <<"kvpCtRfJb">> = iolist_to_binary(re:replace("aab","^(a){1,3}","kvpCtRfJ",[global])),
    <<"HK">> = iolist_to_binary(re:replace("aaa","^(a){1,3}","HK",[])),
    <<"HK">> = iolist_to_binary(re:replace("aaa","^(a){1,3}","HK",[global])),
    <<"bcd">> = iolist_to_binary(re:replace("bcd","^(a){1,3}","GTgGQtMuEWB&&Sqh",[])),
    <<"bcd">> = iolist_to_binary(re:replace("bcd","^(a){1,3}","GTgGQtMuEWB&&Sqh",[global])),
    <<"aJaKddOBbc">> = iolist_to_binary(re:replace("abc","^(a){1,}","\\1J&KddOB",[])),
    <<"aJaKddOBbc">> = iolist_to_binary(re:replace("abc","^(a){1,}","\\1J&KddOB",[global])),
    <<"sOaBraaksjdVYVb">> = iolist_to_binary(re:replace("aab","^(a){1,}","sO\\1Br&ksjdVYV",[])),
    <<"sOaBraaksjdVYVb">> = iolist_to_binary(re:replace("aab","^(a){1,}","sO\\1Br&ksjdVYV",[global])),
    <<"GDFYaaaNaNauaaan">> = iolist_to_binary(re:replace("aaa","^(a){1,}","GDFY&N\\1N\\1u&n",[])),
    <<"GDFYaaaNaNauaaan">> = iolist_to_binary(re:replace("aaa","^(a){1,}","GDFY&N\\1N\\1u&n",[global])),
    <<"IW">> = iolist_to_binary(re:replace("aaaaaaaa","^(a){1,}","IW",[])),
    <<"IW">> = iolist_to_binary(re:replace("aaaaaaaa","^(a){1,}","IW",[global])),
    <<"bcd">> = iolist_to_binary(re:replace("bcd","^(a){1,}","\\1guMkfU\\1y",[])),
    <<"bcd">> = iolist_to_binary(re:replace("bcd","^(a){1,}","\\1guMkfU\\1y",[global])),
    <<"borfle
ELdCrlXbib.gif
no">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*\\.gif","ELdCrl\\1X&",[])),
    <<"borfle
ELdCrlXbib.gif
no">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*\\.gif","ELdCrl\\1X&",[global])),
    <<"borfle
bq
no">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".{0,}\\.gif","bq",[])),
    <<"borfle
bq
no">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".{0,}\\.gif","bq",[global])),
    <<"borfle
ODL
no">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*\\.gif","ODL",[multiline])),
    <<"borfle
ODL
no">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*\\.gif","ODL",[multiline,global])),
    <<"ncD
no">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*\\.gif","ncD",[dotall])),
    <<"ncD
no">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*\\.gif","ncD",[dotall,global])),
    <<"qgBuDWyC
no">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*\\.gif","qgBuDW\\1yC",[multiline,dotall])),
    <<"qgBuDWyC
no">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*\\.gif","qgBuDW\\1yC",[multiline,dotall,global])),
    <<"borfle
bib.gif
XnoY">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*$","X&Y",[])),
    <<"borfle
bib.gif
XnoYXY">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*$","X&Y",[global])),
    <<"luUxXVRborfleJborfle
bib.gif
no">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*$","\\1luUxXVR&J\\1&\\1",[multiline])),
    <<"luUxXVRborfleJborfleluUxXVRJ
luUxXVRbib.gifJbib.gifluUxXVRJ
luUxXVRnoJnoluUxXVRJ">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*$","\\1luUxXVR&J\\1&\\1",[multiline,global])),
    <<"Qko">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*$","\\1Qko",[dotall])),
    <<"QkoQko">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*$","\\1Qko",[dotall,global])),
    <<"dborfle
bib.gif
noborfle
bib.gif
nodborfle
bib.gif
nolEUAnHX">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*$","d&\\1&d\\1\\1&lE\\1UAnHX",[multiline,dotall])),
    <<"dborfle
bib.gif
noborfle
bib.gif
nodborfle
bib.gif
nolEUAnHXddlEUAnHX">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*$","d&\\1&d\\1\\1&lE\\1UAnHX",[multiline,dotall,global])),
    <<"borfle
bib.gif
vUTXiRnodPC">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*$","vUTXiR&dPC",[])),
    <<"borfle
bib.gif
vUTXiRnodPCvUTXiRdPC">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*$","vUTXiR&dPC",[global])),
    <<"PYYEJborfleYsN
bib.gif
no">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*$","PYYEJ&YsN",[multiline])),
    <<"PYYEJborfleYsNPYYEJYsN
PYYEJbib.gifYsNPYYEJYsN
PYYEJnoYsNPYYEJYsN">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*$","PYYEJ&YsN",[multiline,global])),
    <<"HHotxYrborfle
bib.gif
noMmBIIeE">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*$","HHotxYr&MmBIIeE",[dotall])),
    <<"HHotxYrborfle
bib.gif
noMmBIIeEHHotxYrMmBIIeE">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*$","HHotxYr&MmBIIeE",[dotall,global])),
    <<"qDOVborfle
bib.gif
noomApQsBev">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*$","qDOV&omApQ\\1sBev",[multiline,dotall])),
    <<"qDOVborfle
bib.gif
noomApQsBevqDOVomApQsBev">> = iolist_to_binary(re:replace("borfle
bib.gif
no",".*$","qDOV&omApQ\\1sBev",[multiline,dotall,global])),
    ok.
run9() ->
    <<"abcde
Rv1234XAXeR1234Xf1234XfNRsn1234Xyz">> = iolist_to_binary(re:replace("abcde
1234Xyz","(.*X|^B)","Rv&AXeR&f&fNRsn&",[])),
    <<"abcde
Rv1234XAXeR1234Xf1234XfNRsn1234Xyz">> = iolist_to_binary(re:replace("abcde
1234Xyz","(.*X|^B)","Rv&AXeR&f&fNRsn&",[global])),
    <<"TOViarFoo">> = iolist_to_binary(re:replace("BarFoo","(.*X|^B)","TOVi",[])),
    <<"TOViarFoo">> = iolist_to_binary(re:replace("BarFoo","(.*X|^B)","TOVi",[global])),
    <<"abcde
Bar">> = iolist_to_binary(re:replace("abcde
Bar","(.*X|^B)","CA\\1\\1OgviGu&n&G",[])),
    <<"abcde
Bar">> = iolist_to_binary(re:replace("abcde
Bar","(.*X|^B)","CA\\1\\1OgviGu&n&G",[global])),
    <<"abcde
uMVsp1234XVVsyz">> = iolist_to_binary(re:replace("abcde
1234Xyz","(.*X|^B)","uMVsp&VVs",[multiline])),
    <<"abcde
uMVsp1234XVVsyz">> = iolist_to_binary(re:replace("abcde
1234Xyz","(.*X|^B)","uMVsp&VVs",[multiline,global])),
    <<"exxLBKHfPaoEarFoo">> = iolist_to_binary(re:replace("BarFoo","(.*X|^B)","exxL&KHfPaoE",[multiline])),
    <<"exxLBKHfPaoEarFoo">> = iolist_to_binary(re:replace("BarFoo","(.*X|^B)","exxL&KHfPaoE",[multiline,global])),
    <<"abcde
GBwBxahbWqKBar">> = iolist_to_binary(re:replace("abcde
Bar","(.*X|^B)","G&wBxahbWqK&",[multiline])),
    <<"abcde
GBwBxahbWqKBar">> = iolist_to_binary(re:replace("abcde
Bar","(.*X|^B)","G&wBxahbWqK&",[multiline,global])),
    <<"ooXOkmabcde
1234XSKHJyz">> = iolist_to_binary(re:replace("abcde
1234Xyz","(.*X|^B)","ooXOkm\\1SKHJ",[dotall])),
    <<"ooXOkmabcde
1234XSKHJyz">> = iolist_to_binary(re:replace("abcde
1234Xyz","(.*X|^B)","ooXOkm\\1SKHJ",[dotall,global])),
    <<"SBIvPvMFjarFoo">> = iolist_to_binary(re:replace("BarFoo","(.*X|^B)","S\\1IvPvMFj",[dotall])),
    <<"SBIvPvMFjarFoo">> = iolist_to_binary(re:replace("BarFoo","(.*X|^B)","S\\1IvPvMFj",[dotall,global])),
    <<"abcde
Bar">> = iolist_to_binary(re:replace("abcde
Bar","(.*X|^B)","AUFFK&dgWBBmewQfx&",[dotall])),
    <<"abcde
Bar">> = iolist_to_binary(re:replace("abcde
Bar","(.*X|^B)","AUFFK&dgWBBmewQfx&",[dotall,global])),
    <<"MHrweJqRiSNabcde
1234XvMXyz">> = iolist_to_binary(re:replace("abcde
1234Xyz","(.*X|^B)","MHrweJqRiSN&vMX",[multiline,dotall])),
    <<"MHrweJqRiSNabcde
1234XvMXyz">> = iolist_to_binary(re:replace("abcde
1234Xyz","(.*X|^B)","MHrweJqRiSN&vMX",[multiline,dotall,global])),
    <<"dykBXarFoo">> = iolist_to_binary(re:replace("BarFoo","(.*X|^B)","dyk\\1X",[multiline,dotall])),
    <<"dykBXarFoo">> = iolist_to_binary(re:replace("BarFoo","(.*X|^B)","dyk\\1X",[multiline,dotall,global])),
    <<"abcde
BBrksdKohPar">> = iolist_to_binary(re:replace("abcde
Bar","(.*X|^B)","&&rksdKohP",[multiline,dotall])),
    <<"abcde
BBrksdKohPar">> = iolist_to_binary(re:replace("abcde
Bar","(.*X|^B)","&&rksdKohP",[multiline,dotall,global])),
    <<"kRwyz">> = iolist_to_binary(re:replace("abcde
1234Xyz","(?s)(.*X|^B)","kRw",[])),
    <<"kRwyz">> = iolist_to_binary(re:replace("abcde
1234Xyz","(?s)(.*X|^B)","kRw",[global])),
    <<"abcBBNpHBBiHWAaBarFoo">> = iolist_to_binary(re:replace("BarFoo","(?s)(.*X|^B)","abc&\\1NpH\\1&iHWAa&",[])),
    <<"abcBBNpHBBiHWAaBarFoo">> = iolist_to_binary(re:replace("BarFoo","(?s)(.*X|^B)","abc&\\1NpH\\1&iHWAa&",[global])),
    <<"abcde
Bar">> = iolist_to_binary(re:replace("abcde
Bar","(?s)(.*X|^B)","g",[])),
    <<"abcde
Bar">> = iolist_to_binary(re:replace("abcde
Bar","(?s)(.*X|^B)","g",[global])),
    <<"Ujyz">> = iolist_to_binary(re:replace("abcde
1234Xyz","(?s:.*X|^B)","Uj",[])),
    <<"Ujyz">> = iolist_to_binary(re:replace("abcde
1234Xyz","(?s:.*X|^B)","Uj",[global])),
    <<"lIXiGIqarFoo">> = iolist_to_binary(re:replace("BarFoo","(?s:.*X|^B)","lIXi\\1\\1GIq",[])),
    <<"lIXiGIqarFoo">> = iolist_to_binary(re:replace("BarFoo","(?s:.*X|^B)","lIXi\\1\\1GIq",[global])),
    <<"abcde
Bar">> = iolist_to_binary(re:replace("abcde
Bar","(?s:.*X|^B)","ALpo\\1E\\1X\\1Acu&",[])),
    <<"abcde
Bar">> = iolist_to_binary(re:replace("abcde
Bar","(?s:.*X|^B)","ALpo\\1E\\1X\\1Acu&",[global])),
    <<"abc
B">> = iolist_to_binary(re:replace("abc
B","^.*B","ltduU\\1rj\\1to&",[])),
    <<"abc
B">> = iolist_to_binary(re:replace("abc
B","^.*B","ltduU\\1rj\\1to&",[global])),
    <<"HeH">> = iolist_to_binary(re:replace("abc
B","(?s)^.*B","H\\1eH",[])),
    <<"HeH">> = iolist_to_binary(re:replace("abc
B","(?s)^.*B","H\\1eH",[global])),
    <<"abc
u">> = iolist_to_binary(re:replace("abc
B","(?m)^.*B","u",[])),
    <<"abc
u">> = iolist_to_binary(re:replace("abc
B","(?m)^.*B","u",[global])),
    <<"ysQfabc
BpOVCabc
Ba">> = iolist_to_binary(re:replace("abc
B","(?ms)^.*B","ysQf\\1&pO\\1VC&a",[])),
    <<"ysQfabc
BpOVCabc
Ba">> = iolist_to_binary(re:replace("abc
B","(?ms)^.*B","ysQf\\1&pO\\1VC&a",[global])),
    <<"abc
BXBUMdBMBxorPoSKMb">> = iolist_to_binary(re:replace("abc
B","(?ms)^B","\\1BX&UMd&MBxorPoSK\\1Mb",[])),
    <<"abc
BXBUMdBMBxorPoSKMb">> = iolist_to_binary(re:replace("abc
B","(?ms)^B","\\1BX&UMd&MBxorPoSK\\1Mb",[global])),
    <<"SB">> = iolist_to_binary(re:replace("B","(?s)B$","\\1S&",[])),
    <<"SB">> = iolist_to_binary(re:replace("B","(?s)B$","\\1S&",[global])),
    <<"XKhbeUQxIl">> = iolist_to_binary(re:replace("123456654321","^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]","X\\1K\\1hb\\1e\\1\\1UQxIl",[])),
    <<"XKhbeUQxIl">> = iolist_to_binary(re:replace("123456654321","^[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]","X\\1K\\1hb\\1e\\1\\1UQxIl",[global])),
    <<"dXq">> = iolist_to_binary(re:replace("123456654321","^\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d","\\1dXq",[])),
    <<"dXq">> = iolist_to_binary(re:replace("123456654321","^\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d\\d","\\1dXq",[global])),
    <<"HOyNFMmIhSgQdQ123456654321K">> = iolist_to_binary(re:replace("123456654321","^[\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d]","HOyNFM\\1mIhSgQdQ&K\\1",[])),
    <<"HOyNFMmIhSgQdQ123456654321K">> = iolist_to_binary(re:replace("123456654321","^[\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d][\\d]","HOyNFM\\1mIhSgQdQ&K\\1",[global])),
    <<"rhabcabcabcabcabcabcabcabcOfhH">> = iolist_to_binary(re:replace("abcabcabcabc","^[abc]{12}","rh&&Of\\1hH",[])),
    <<"rhabcabcabcabcabcabcabcabcOfhH">> = iolist_to_binary(re:replace("abcabcabcabc","^[abc]{12}","rh&&Of\\1hH",[global])),
    <<"cbWVIYcxbQg">> = iolist_to_binary(re:replace("abcabcabcabc","^[a-c]{12}","cbWVIYcxbQg\\1",[])),
    <<"cbWVIYcxbQg">> = iolist_to_binary(re:replace("abcabcabcabc","^[a-c]{12}","cbWVIYcxbQg\\1",[global])),
    <<"phc">> = iolist_to_binary(re:replace("abcabcabcabc","^(a|b|c){12}","ph\\1",[])),
    <<"phc">> = iolist_to_binary(re:replace("abcabcabcabc","^(a|b|c){12}","ph\\1",[global])),
    <<"NArawnQ">> = iolist_to_binary(re:replace("n","^[abcdefghijklmnopqrstuvwxy0123456789]","NAraw&\\1Q",[])),
    <<"NArawnQ">> = iolist_to_binary(re:replace("n","^[abcdefghijklmnopqrstuvwxy0123456789]","NAraw&\\1Q",[global])),
    <<"z">> = iolist_to_binary(re:replace("z","^[abcdefghijklmnopqrstuvwxy0123456789]","&&NApA\\1v\\1\\1cnExjYTArB",[])),
    <<"z">> = iolist_to_binary(re:replace("z","^[abcdefghijklmnopqrstuvwxy0123456789]","&&NApA\\1v\\1\\1cnExjYTArB",[global])),
    <<"AabcdqAIOCV">> = iolist_to_binary(re:replace("abcd","abcde{0,0}","A&qAIOCV",[])),
    <<"AabcdqAIOCV">> = iolist_to_binary(re:replace("abcd","abcde{0,0}","A&qAIOCV",[global])),
    <<"abce">> = iolist_to_binary(re:replace("abce","abcde{0,0}","KqTqEDm",[])),
    <<"abce">> = iolist_to_binary(re:replace("abce","abcde{0,0}","KqTqEDm",[global])),
    ok.
run10() ->
    <<"abeioXlXnsabeoN">> = iolist_to_binary(re:replace("abe","ab[cd]{0,0}e","&ioXlXns&oN\\1",[])),
    <<"abeioXlXnsabeoN">> = iolist_to_binary(re:replace("abe","ab[cd]{0,0}e","&ioXlXns&oN\\1",[global])),
    <<"abcde">> = iolist_to_binary(re:replace("abcde","ab[cd]{0,0}e","kw",[])),
    <<"abcde">> = iolist_to_binary(re:replace("abcde","ab[cd]{0,0}e","kw",[global])),
    <<"UcabdTyIabdix">> = iolist_to_binary(re:replace("abd","ab(c){0,0}d","Uc&TyI&ix",[])),
    <<"UcabdTyIabdix">> = iolist_to_binary(re:replace("abd","ab(c){0,0}d","Uc&TyI&ix",[global])),
    <<"abcd">> = iolist_to_binary(re:replace("abcd","ab(c){0,0}d","mIik",[])),
    <<"abcd">> = iolist_to_binary(re:replace("abcd","ab(c){0,0}d","mIik",[global])),
    <<"dqceagxefBdIO">> = iolist_to_binary(re:replace("a","a(b*)","dqce&gxefB\\1\\1dIO",[])),
    <<"dqceagxefBdIO">> = iolist_to_binary(re:replace("a","a(b*)","dqce&gxefB\\1\\1dIO",[global])),
    <<"wabLabwgabjiabEJTwm">> = iolist_to_binary(re:replace("ab","a(b*)","w&L&wg&ji&EJTwm",[])),
    <<"wabLabwgabjiabEJTwm">> = iolist_to_binary(re:replace("ab","a(b*)","w&L&wg&ji&EJTwm",[global])),
    <<"YabbbbabbbbnbbbbRwbbbbEj">> = iolist_to_binary(re:replace("abbbb","a(b*)","Y&&n\\1Rw\\1Ej",[])),
    <<"YabbbbabbbbnbbbbRwbbbbEj">> = iolist_to_binary(re:replace("abbbb","a(b*)","Y&&n\\1Rw\\1Ej",[global])),
    <<"bbbbb">> = iolist_to_binary(re:replace("bbbbb","a(b*)","xXpYPTdeI\\1eC&\\1maI",[])),
    <<"bbbbb">> = iolist_to_binary(re:replace("bbbbb","a(b*)","xXpYPTdeI\\1eC&\\1maI",[global])),
    <<"rbRgYff">> = iolist_to_binary(re:replace("abe","ab\\d{0}e","rbRgYff",[])),
    <<"rbRgYff">> = iolist_to_binary(re:replace("abe","ab\\d{0}e","rbRgYff",[global])),
    <<"ab1e">> = iolist_to_binary(re:replace("ab1e","ab\\d{0}e","qFVJL",[])),
    <<"ab1e">> = iolist_to_binary(re:replace("ab1e","ab\\d{0}e","qFVJL",[global])),
    <<"the QtqBOx brown fox">> = iolist_to_binary(re:replace("the \"quick\" brown fox","\"([^\\\\\"]+|\\\\.)*\"","QtqBOx",[])),
    <<"the QtqBOx brown fox">> = iolist_to_binary(re:replace("the \"quick\" brown fox","\"([^\\\\\"]+|\\\\.)*\"","QtqBOx",[global])),
    <<"tXNokRjRKvX\"the \\\"quick\\\" brown fox\"I brown fox\"the \\\"quick\\\" brown fox\"WSIA">> = iolist_to_binary(re:replace("\"the \\\"quick\\\" brown fox\"","\"([^\\\\\"]+|\\\\.)*\"","tXNokRjRKvX&I\\1&WSIA",[])),
    <<"tXNokRjRKvX\"the \\\"quick\\\" brown fox\"I brown fox\"the \\\"quick\\\" brown fox\"WSIA">> = iolist_to_binary(re:replace("\"the \\\"quick\\\" brown fox\"","\"([^\\\\\"]+|\\\\.)*\"","tXNokRjRKvX&I\\1&WSIA",[global])),
    <<"eopBsGmBuabc">> = iolist_to_binary(re:replace("abc","","eopBsGmB&u\\1",[])),
    <<"eopBsGmBuaeopBsGmBubeopBsGmBuceopBsGmBu">> = iolist_to_binary(re:replace("abc","","eopBsGmB&u\\1",[global])),
    <<"QVBStnKyKwiFacbrwKKKt">> = iolist_to_binary(re:replace("acb","a[^a]b","QVBStnKyKwiF&rwKK\\1Kt",[])),
    <<"QVBStnKyKwiFacbrwKKKt">> = iolist_to_binary(re:replace("acb","a[^a]b","QVBStnKyKwiF&rwKK\\1Kt",[global])),
    <<"a
bfFGmLJOyxg">> = iolist_to_binary(re:replace("a
b","a[^a]b","&fFGmLJOy\\1xg",[])),
    <<"a
bfFGmLJOyxg">> = iolist_to_binary(re:replace("a
b","a[^a]b","&fFGmLJOy\\1xg",[global])),
    <<"vvdSSUIVj">> = iolist_to_binary(re:replace("acb","a.b","vvd\\1SSUIVj\\1",[])),
    <<"vvdSSUIVj">> = iolist_to_binary(re:replace("acb","a.b","vvd\\1SSUIVj\\1",[global])),
    <<"a
b">> = iolist_to_binary(re:replace("a
b","a.b","\\1cU",[])),
    <<"a
b">> = iolist_to_binary(re:replace("a
b","a.b","\\1cU",[global])),
    <<"XacbgESUEcd">> = iolist_to_binary(re:replace("acb","a[^a]b","\\1X&gESUEcd",[dotall])),
    <<"XacbgESUEcd">> = iolist_to_binary(re:replace("acb","a[^a]b","\\1X&gESUEcd",[dotall,global])),
    <<"XMY">> = iolist_to_binary(re:replace("a
b","a[^a]b","XMY",[dotall])),
    <<"XMY">> = iolist_to_binary(re:replace("a
b","a[^a]b","XMY",[dotall,global])),
    <<"tGJacbacb">> = iolist_to_binary(re:replace("acb","a.b","tGJ&&",[dotall])),
    <<"tGJacbacb">> = iolist_to_binary(re:replace("acb","a.b","tGJ&&",[dotall,global])),
    <<"duQQOa
bssHG">> = iolist_to_binary(re:replace("a
b","a.b","\\1duQQO&ss\\1HG",[dotall])),
    <<"duQQOa
bssHG">> = iolist_to_binary(re:replace("a
b","a.b","\\1duQQO&ss\\1HG",[dotall,global])),
    <<"acmBfj">> = iolist_to_binary(re:replace("bac","^(b+?|a){1,2}?c","\\1cmBfj",[])),
    <<"acmBfj">> = iolist_to_binary(re:replace("bac","^(b+?|a){1,2}?c","\\1cmBfj",[global])),
    <<"tQbbacktkvaVkDbbacK">> = iolist_to_binary(re:replace("bbac","^(b+?|a){1,2}?c","tQ&ktkv\\1VkD&K",[])),
    <<"tQbbacktkvaVkDbbacK">> = iolist_to_binary(re:replace("bbac","^(b+?|a){1,2}?c","tQ&ktkv\\1VkD&K",[global])),
    <<"chbbbacaBsFRl">> = iolist_to_binary(re:replace("bbbac","^(b+?|a){1,2}?c","ch&\\1BsFRl",[])),
    <<"chbbbacaBsFRl">> = iolist_to_binary(re:replace("bbbac","^(b+?|a){1,2}?c","ch&\\1BsFRl",[global])),
    <<"US">> = iolist_to_binary(re:replace("bbbbac","^(b+?|a){1,2}?c","US",[])),
    <<"US">> = iolist_to_binary(re:replace("bbbbac","^(b+?|a){1,2}?c","US",[global])),
    <<"QUVwfLaFRTxkapVJd">> = iolist_to_binary(re:replace("bbbbbac","^(b+?|a){1,2}?c","QUVwfL\\1FRTxk\\1pVJd",[])),
    <<"QUVwfLaFRTxkapVJd">> = iolist_to_binary(re:replace("bbbbbac","^(b+?|a){1,2}?c","QUVwfL\\1FRTxk\\1pVJd",[global])),
    <<"xNami">> = iolist_to_binary(re:replace("bac","^(b+|a){1,2}?c","xN\\1mi",[])),
    <<"xNami">> = iolist_to_binary(re:replace("bac","^(b+|a){1,2}?c","xN\\1mi",[global])),
    <<"bbacCbbacubbactbbacXbbacnbbacET">> = iolist_to_binary(re:replace("bbac","^(b+|a){1,2}?c","&C&u&t&X&n&ET",[])),
    <<"bbacCbbacubbactbbacXbbacnbbacET">> = iolist_to_binary(re:replace("bbac","^(b+|a){1,2}?c","&C&u&t&X&n&ET",[global])),
    <<"B">> = iolist_to_binary(re:replace("bbbac","^(b+|a){1,2}?c","B",[])),
    <<"B">> = iolist_to_binary(re:replace("bbbac","^(b+|a){1,2}?c","B",[global])),
    <<"XFykuakPaulQTqER">> = iolist_to_binary(re:replace("bbbbac","^(b+|a){1,2}?c","XFyku\\1kP\\1ulQTqER",[])),
    <<"XFykuakPaulQTqER">> = iolist_to_binary(re:replace("bbbbac","^(b+|a){1,2}?c","XFyku\\1kP\\1ulQTqER",[global])),
    <<"ubbbbbacsAbbbbbacibbbbbacObkaQXXqLaPgbbbbbac">> = iolist_to_binary(re:replace("bbbbbac","^(b+|a){1,2}?c","u&sA&i&Obk\\1QXXqL\\1Pg&",[])),
    <<"ubbbbbacsAbbbbbacibbbbbacObkaQXXqLaPgbbbbbac">> = iolist_to_binary(re:replace("bbbbbac","^(b+|a){1,2}?c","u&sA&i&Obk\\1QXXqL\\1Pg&",[global])),
    <<"aJMhXxxExhBlXkR">> = iolist_to_binary(re:replace("ax","(?!\\A)x","JMhX&xE&hBl\\1Xk\\1R",[multiline])),
    <<"aJMhXxxExhBlXkR">> = iolist_to_binary(re:replace("ax","(?!\\A)x","JMhX&xE&hBl\\1Xk\\1R",[multiline,global])),
    <<"a
riUNlLxf">> = iolist_to_binary(re:replace("a
x","(?!\\A)x","riUNlL&f",[multiline])),
    <<"a
riUNlLxf">> = iolist_to_binary(re:replace("a
x","(?!\\A)x","riUNlL&f",[multiline,global])),
    <<"x
b">> = iolist_to_binary(re:replace("x
b","(?!\\A)x","GuWxO",[multiline])),
    <<"x
b">> = iolist_to_binary(re:replace("x
b","(?!\\A)x","GuWxO",[multiline,global])),
    <<"PMnCDCDPMt">> = iolist_to_binary(re:replace("CD","(A|B)*?CD","PMn&&PMt",[])),
    <<"PMnCDCDPMt">> = iolist_to_binary(re:replace("CD","(A|B)*?CD","PMn&&PMt",[global])),
    <<"rxywwCD">> = iolist_to_binary(re:replace("CD","(A|B)*CD","rx\\1\\1yww&",[])),
    <<"rxywwCD">> = iolist_to_binary(re:replace("CD","(A|B)*CD","rx\\1\\1yww&",[global])),
    <<"fEMAOjEdetPXRABABcBSckAB">> = iolist_to_binary(re:replace("ABABAB","(AB)*?\\1","fEMAOjEdetPXR&cBSck",[])),
    <<"fEMAOjEdetPXRABABcBSckAB">> = iolist_to_binary(re:replace("ABABAB","(AB)*?\\1","fEMAOjEdetPXR&cBSck",[global])),
    <<"ABFdiFlvyqFlWABRsa">> = iolist_to_binary(re:replace("ABABAB","(AB)*\\1","\\1FdiFlvyqFlW\\1Rsa",[])),
    <<"ABFdiFlvyqFlWABRsa">> = iolist_to_binary(re:replace("ABABAB","(AB)*\\1","\\1FdiFlvyqFlW\\1Rsa",[global])),
    <<"n">> = iolist_to_binary(re:replace("foo","(?<!bar)foo","n",[])),
    <<"n">> = iolist_to_binary(re:replace("foo","(?<!bar)foo","n",[global])),
    <<"catxbTBQedCtvvdd">> = iolist_to_binary(re:replace("catfood","(?<!bar)foo","xbTBQe\\1dCtvvd",[])),
    <<"catxbTBQedCtvvdd">> = iolist_to_binary(re:replace("catfood","(?<!bar)foo","xbTBQe\\1dCtvvd",[global])),
    <<"arsfoofoofooKyttle">> = iolist_to_binary(re:replace("arfootle","(?<!bar)foo","s&&&Kyt",[])),
    <<"arsfoofoofooKyttle">> = iolist_to_binary(re:replace("arfootle","(?<!bar)foo","s&&&Kyt",[global])),
    <<"rBrfoovYCesh">> = iolist_to_binary(re:replace("rfoosh","(?<!bar)foo","Br&vYCe",[])),
    <<"rBrfoovYCesh">> = iolist_to_binary(re:replace("rfoosh","(?<!bar)foo","Br&vYCe",[global])),
    <<"barfoo">> = iolist_to_binary(re:replace("barfoo","(?<!bar)foo","g&PQFusOgmXayn\\1mL&S",[])),
    <<"barfoo">> = iolist_to_binary(re:replace("barfoo","(?<!bar)foo","g&PQFusOgmXayn\\1mL&S",[global])),
    <<"towbarfoo">> = iolist_to_binary(re:replace("towbarfoo","(?<!bar)foo","yVEV",[])),
    <<"towbarfoo">> = iolist_to_binary(re:replace("towbarfoo","(?<!bar)foo","yVEV",[global])),
    <<"Pcatfood">> = iolist_to_binary(re:replace("catfood","\\w{3}(?<!bar)foo","\\1P&",[])),
    <<"Pcatfood">> = iolist_to_binary(re:replace("catfood","\\w{3}(?<!bar)foo","\\1P&",[global])),
    <<"foo">> = iolist_to_binary(re:replace("foo","\\w{3}(?<!bar)foo","q",[])),
    <<"foo">> = iolist_to_binary(re:replace("foo","\\w{3}(?<!bar)foo","q",[global])),
    <<"barfoo">> = iolist_to_binary(re:replace("barfoo","\\w{3}(?<!bar)foo","&PNmWin\\1XCGPwUmQi",[])),
    <<"barfoo">> = iolist_to_binary(re:replace("barfoo","\\w{3}(?<!bar)foo","&PNmWin\\1XCGPwUmQi",[global])),
    <<"towbarfoo">> = iolist_to_binary(re:replace("towbarfoo","\\w{3}(?<!bar)foo","&",[])),
    <<"towbarfoo">> = iolist_to_binary(re:replace("towbarfoo","\\w{3}(?<!bar)foo","&",[global])),
    ok.
run11() ->
    <<"fooafookbarSbVX">> = iolist_to_binary(re:replace("fooabar","(?<=(foo)a)bar","\\1k&SbVX",[])),
    <<"fooafookbarSbVX">> = iolist_to_binary(re:replace("fooabar","(?<=(foo)a)bar","\\1k&SbVX",[global])),
    <<"bar">> = iolist_to_binary(re:replace("bar","(?<=(foo)a)bar","BL\\1jHdC&pT",[])),
    <<"bar">> = iolist_to_binary(re:replace("bar","(?<=(foo)a)bar","BL\\1jHdC&pT",[global])),
    <<"foobbar">> = iolist_to_binary(re:replace("foobbar","(?<=(foo)a)bar","AO&rL\\1a&uLgKct",[])),
    <<"foobbar">> = iolist_to_binary(re:replace("foobbar","(?<=(foo)a)bar","AO&rL\\1a&uLgKct",[global])),
    <<"IhhXe">> = iolist_to_binary(re:replace("abc","\\Aabc\\z","IhhXe\\1",[multiline])),
    <<"IhhXe">> = iolist_to_binary(re:replace("abc","\\Aabc\\z","IhhXe\\1",[multiline,global])),
    <<"NfmmMjGabcabcShiabcabcqAf">> = iolist_to_binary(re:replace("abc","\\Aabc\\z","NfmmMj\\1G&&Sh\\1i&&qA\\1f",[multiline])),
    <<"NfmmMjGabcabcShiabcabcqAf">> = iolist_to_binary(re:replace("abc","\\Aabc\\z","NfmmMj\\1G&&Sh\\1i&&qA\\1f",[multiline,global])),
    <<"qqq
abc">> = iolist_to_binary(re:replace("qqq
abc","\\Aabc\\z","fDWQoN&&DK\\1X\\1QE&hqEG",[multiline])),
    <<"qqq
abc">> = iolist_to_binary(re:replace("qqq
abc","\\Aabc\\z","fDWQoN&&DK\\1X\\1QE&hqEG",[multiline,global])),
    <<"abc
zzz">> = iolist_to_binary(re:replace("abc
zzz","\\Aabc\\z","sSxs",[multiline])),
    <<"abc
zzz">> = iolist_to_binary(re:replace("abc
zzz","\\Aabc\\z","sSxs",[multiline,global])),
    <<"qqq
abc
zzz">> = iolist_to_binary(re:replace("qqq
abc
zzz","\\Aabc\\z","svIYJDEofMMv&DC\\1e&\\1",[multiline])),
    <<"qqq
abc
zzz">> = iolist_to_binary(re:replace("qqq
abc
zzz","\\Aabc\\z","svIYJDEofMMv&DC\\1e&\\1",[multiline,global])),
    <<"1jvV.23I.230003938LsY">> = iolist_to_binary(re:replace("1.230003938","(?>(\\.\\d\\d[1-9]?))\\d+","jvV\\1I&LsY",[])),
    <<"1jvV.23I.230003938LsY">> = iolist_to_binary(re:replace("1.230003938","(?>(\\.\\d\\d[1-9]?))\\d+","jvV\\1I&LsY",[global])),
    <<"1TlT.875ebymLLEyQ.875">> = iolist_to_binary(re:replace("1.875000282","(?>(\\.\\d\\d[1-9]?))\\d+","TlT\\1ebymLLEyQ\\1",[])),
    <<"1TlT.875ebymLLEyQ.875">> = iolist_to_binary(re:replace("1.875000282","(?>(\\.\\d\\d[1-9]?))\\d+","TlT\\1ebymLLEyQ\\1",[global])),
    <<"1.235">> = iolist_to_binary(re:replace("1.235","(?>(\\.\\d\\d[1-9]?))\\d+","jrpMnKp\\1&LavAr&vf\\1o",[])),
    <<"1.235">> = iolist_to_binary(re:replace("1.235","(?>(\\.\\d\\d[1-9]?))\\d+","jrpMnKp\\1&LavAr&vf\\1o",[global])),
    <<"MBpartyknow is the time for all good men to come to the aid of the partynow is the time for all good men to come to the aid of the partyiuXpartypartypartyDJKoRl">> = iolist_to_binary(re:replace("now is the time for all good men to come to the aid of the party","^((?>\\w+)|(?>\\s+))*$","MB\\1k&&iuX\\1\\1\\1DJKoRl",[])),
    <<"MBpartyknow is the time for all good men to come to the aid of the partynow is the time for all good men to come to the aid of the partyiuXpartypartypartyDJKoRl">> = iolist_to_binary(re:replace("now is the time for all good men to come to the aid of the party","^((?>\\w+)|(?>\\s+))*$","MB\\1k&&iuX\\1\\1\\1DJKoRl",[global])),
    <<"this is not a line with only words and spaces!">> = iolist_to_binary(re:replace("this is not a line with only words and spaces!","^((?>\\w+)|(?>\\s+))*$","rPUccT\\1v&yM",[])),
    <<"this is not a line with only words and spaces!">> = iolist_to_binary(re:replace("this is not a line with only words and spaces!","^((?>\\w+)|(?>\\s+))*$","rPUccT\\1v&yM",[global])),
    <<"y12345bPF12345HwvSYT">> = iolist_to_binary(re:replace("12345a","(\\d+)(\\w)","y\\1bPF\\1HwvSYT",[])),
    <<"y12345bPF12345HwvSYT">> = iolist_to_binary(re:replace("12345a","(\\d+)(\\w)","y\\1bPF\\1HwvSYT",[global])),
    <<"cM+">> = iolist_to_binary(re:replace("12345+","(\\d+)(\\w)","cM",[])),
    <<"cM+">> = iolist_to_binary(re:replace("12345+","(\\d+)(\\w)","cM",[global])),
    <<"YwekY12345N12345acbCoStuYolo">> = iolist_to_binary(re:replace("12345a","((?>\\d+))(\\w)","YwekY\\1N&cbCoStuYolo",[])),
    <<"YwekY12345N12345acbCoStuYolo">> = iolist_to_binary(re:replace("12345a","((?>\\d+))(\\w)","YwekY\\1N&cbCoStuYolo",[global])),
    <<"12345+">> = iolist_to_binary(re:replace("12345+","((?>\\d+))(\\w)","Sf",[])),
    <<"12345+">> = iolist_to_binary(re:replace("12345+","((?>\\d+))(\\w)","Sf",[global])),
    <<"aaabuuLJdE">> = iolist_to_binary(re:replace("aaab","(?>a+)b","&uu\\1L\\1JdE",[])),
    <<"aaabuuLJdE">> = iolist_to_binary(re:replace("aaab","(?>a+)b","&uu\\1L\\1JdE",[global])),
    <<"vveCaaabqaaab">> = iolist_to_binary(re:replace("aaab","((?>a+)b)","vveC\\1q\\1",[])),
    <<"vveCaaabqaaab">> = iolist_to_binary(re:replace("aaab","((?>a+)b)","vveC\\1q\\1",[global])),
    <<"AIykFFUtx">> = iolist_to_binary(re:replace("aaab","(?>(a+))b","AIykFFUtx",[])),
    <<"AIykFFUtx">> = iolist_to_binary(re:replace("aaab","(?>(a+))b","AIykFFUtx",[global])),
    <<"aaatmbbbkwwObbbccc">> = iolist_to_binary(re:replace("aaabbbccc","(?>b)+","tm&k\\1wwO\\1&",[])),
    <<"aaatmbbbkwwObbbccc">> = iolist_to_binary(re:replace("aaabbbccc","(?>b)+","tm&k\\1wwO\\1&",[global])),
    <<"sIaaabbbbcCmqcRbaaabbbbcEopSkFrcccd">> = iolist_to_binary(re:replace("aaabbbbccccd","(?>a+|b+|c+)*c","sI&\\1CmqcRb&EopSkFr",[])),
    <<"sIaaabbbbcCmqcRbaaabbbbcEopSkFrsIcCmqcRbcEopSkFrsIcCmqcRbcEopSkFrsIcCmqcRbcEopSkFrd">> = iolist_to_binary(re:replace("aaabbbbccccd","(?>a+|b+|c+)*c","sI&\\1CmqcRb&EopSkFr",[global])),
    <<"((cDRlERYdxxLVljabc(ade)ufh()()xx">> = iolist_to_binary(re:replace("((abc(ade)ufh()()x","((?>[^()]+)|\\([^()]*\\))+","cDRlERYdx\\1LVlj&\\1",[])),
    <<"((cDRlERYdxxLVljabc(ade)ufh()()xx">> = iolist_to_binary(re:replace("((abc(ade)ufh()()x","((?>[^()]+)|\\([^()]*\\))+","cDRlERYdx\\1LVlj&\\1",[global])),
    <<"oabcjREj">> = iolist_to_binary(re:replace("(abc)","\\(((?>[^()]+)|\\([^()]+\\))+\\)","o\\1jREj",[])),
    <<"oabcjREj">> = iolist_to_binary(re:replace("(abc)","\\(((?>[^()]+)|\\([^()]+\\))+\\)","o\\1jREj",[global])),
    <<"(abc(def)xyz)xyzel">> = iolist_to_binary(re:replace("(abc(def)xyz)","\\(((?>[^()]+)|\\([^()]+\\))+\\)","&\\1el",[])),
    <<"(abc(def)xyz)xyzel">> = iolist_to_binary(re:replace("(abc(def)xyz)","\\(((?>[^()]+)|\\([^()]+\\))+\\)","&\\1el",[global])),
    <<"((()aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("((()aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","\\(((?>[^()]+)|\\([^()]+\\))+\\)","lb&x&V",[])),
    <<"((()aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("((()aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","\\(((?>[^()]+)|\\([^()]+\\))+\\)","lb&x&V",[global])),
    <<"XpabAyWDhuR">> = iolist_to_binary(re:replace("ab","a(?-i)b","Xp&Ay\\1WDhuR",[caseless])),
    <<"XpabAyWDhuR">> = iolist_to_binary(re:replace("ab","a(?-i)b","Xp&Ay\\1WDhuR",[caseless,global])),
    <<"u">> = iolist_to_binary(re:replace("Ab","a(?-i)b","u",[caseless])),
    <<"u">> = iolist_to_binary(re:replace("Ab","a(?-i)b","u",[caseless,global])),
    <<"aB">> = iolist_to_binary(re:replace("aB","a(?-i)b","xmIA&a\\1HwppQ&cs\\1vp",[caseless])),
    <<"aB">> = iolist_to_binary(re:replace("aB","a(?-i)b","xmIA&a\\1HwppQ&cs\\1vp",[caseless,global])),
    <<"AB">> = iolist_to_binary(re:replace("AB","a(?-i)b","&Dh&L",[caseless])),
    <<"AB">> = iolist_to_binary(re:replace("AB","a(?-i)b","&Dh&L",[caseless,global])),
    <<"TPua bca bcd ewb">> = iolist_to_binary(re:replace("a bcd e","(a (?x)b c)d e","TPu\\1&wb",[])),
    <<"TPua bca bcd ewb">> = iolist_to_binary(re:replace("a bcd e","(a (?x)b c)d e","TPu\\1&wb",[global])),
    <<"a b cd e">> = iolist_to_binary(re:replace("a b cd e","(a (?x)b c)d e","OJhKNSyPeRoI&Wnp",[])),
    <<"a b cd e">> = iolist_to_binary(re:replace("a b cd e","(a (?x)b c)d e","OJhKNSyPeRoI&Wnp",[global])),
    <<"abcd e">> = iolist_to_binary(re:replace("abcd e","(a (?x)b c)d e","K",[])),
    <<"abcd e">> = iolist_to_binary(re:replace("abcd e","(a (?x)b c)d e","K",[global])),
    <<"a bcde">> = iolist_to_binary(re:replace("a bcde","(a (?x)b c)d e","E\\1\\1toPe\\1lGQK",[])),
    <<"a bcde">> = iolist_to_binary(re:replace("a bcde","(a (?x)b c)d e","E\\1\\1toPe\\1lGQK",[global])),
    <<"Kia bcde faBhPa bcde flDx">> = iolist_to_binary(re:replace("a bcde f","(a b(?x)c d (?-x)e f)","Ki&aBhP&lDx",[])),
    <<"Kia bcde faBhPa bcde flDx">> = iolist_to_binary(re:replace("a bcde f","(a b(?x)c d (?-x)e f)","Ki&aBhP&lDx",[global])),
    <<"abcdef">> = iolist_to_binary(re:replace("abcdef","(a b(?x)c d (?-x)e f)","iQiLCUpSr",[])),
    <<"abcdef">> = iolist_to_binary(re:replace("abcdef","(a b(?x)c d (?-x)e f)","iQiLCUpSr",[global])),
    <<"HrabcPimCU">> = iolist_to_binary(re:replace("abc","(a(?i)b)c","Hr&PimCU",[])),
    <<"HrabcPimCU">> = iolist_to_binary(re:replace("abc","(a(?i)b)c","Hr&PimCU",[global])),
    <<"DCaBcKnrfLxyCvnaBc">> = iolist_to_binary(re:replace("aBc","(a(?i)b)c","DC&KnrfLxyCvn&",[])),
    <<"DCaBcKnrfLxyCvnaBc">> = iolist_to_binary(re:replace("aBc","(a(?i)b)c","DC&KnrfLxyCvn&",[global])),
    <<"abC">> = iolist_to_binary(re:replace("abC","(a(?i)b)c","\\1L\\1\\1&iARUDvV",[])),
    <<"abC">> = iolist_to_binary(re:replace("abC","(a(?i)b)c","\\1L\\1\\1&iARUDvV",[global])),
    <<"aBC">> = iolist_to_binary(re:replace("aBC","(a(?i)b)c","&\\1Mgf\\1",[])),
    <<"aBC">> = iolist_to_binary(re:replace("aBC","(a(?i)b)c","&\\1Mgf\\1",[global])),
    <<"Abc">> = iolist_to_binary(re:replace("Abc","(a(?i)b)c","&jO\\1aGGc",[])),
    <<"Abc">> = iolist_to_binary(re:replace("Abc","(a(?i)b)c","&jO\\1aGGc",[global])),
    <<"ABc">> = iolist_to_binary(re:replace("ABc","(a(?i)b)c","&",[])),
    <<"ABc">> = iolist_to_binary(re:replace("ABc","(a(?i)b)c","&",[global])),
    <<"ABC">> = iolist_to_binary(re:replace("ABC","(a(?i)b)c","tBTI",[])),
    <<"ABC">> = iolist_to_binary(re:replace("ABC","(a(?i)b)c","tBTI",[global])),
    <<"AbC">> = iolist_to_binary(re:replace("AbC","(a(?i)b)c","h&qu&\\1&mjP&i&qU",[])),
    <<"AbC">> = iolist_to_binary(re:replace("AbC","(a(?i)b)c","h&qu&\\1&mjP&i&qU",[global])),
    <<"mYIhaIbabcacAjQLa">> = iolist_to_binary(re:replace("abc","a(?i:b)c","mYIhaIb&acAjQLa",[])),
    <<"mYIhaIbabcacAjQLa">> = iolist_to_binary(re:replace("abc","a(?i:b)c","mYIhaIb&acAjQLa",[global])),
    <<"VGaBciplC">> = iolist_to_binary(re:replace("aBc","a(?i:b)c","VG&iplC",[])),
    <<"VGaBciplC">> = iolist_to_binary(re:replace("aBc","a(?i:b)c","VG&iplC",[global])),
    <<"ABC">> = iolist_to_binary(re:replace("ABC","a(?i:b)c","al",[])),
    <<"ABC">> = iolist_to_binary(re:replace("ABC","a(?i:b)c","al",[global])),
    <<"abC">> = iolist_to_binary(re:replace("abC","a(?i:b)c","SDV\\1",[])),
    <<"abC">> = iolist_to_binary(re:replace("abC","a(?i:b)c","SDV\\1",[global])),
    <<"aBC">> = iolist_to_binary(re:replace("aBC","a(?i:b)c","C&p&eF\\1QF&mi\\1&",[])),
    <<"aBC">> = iolist_to_binary(re:replace("aBC","a(?i:b)c","C&p&eF\\1QF&mi\\1&",[global])),
    <<"LsCaBcvaBcNOdFhYFVvFQ">> = iolist_to_binary(re:replace("aBc","a(?i:b)*c","LsC&v&NOdFhYFVvFQ",[])),
    <<"LsCaBcvaBcNOdFhYFVvFQ">> = iolist_to_binary(re:replace("aBc","a(?i:b)*c","LsC&v&NOdFhYFVvFQ",[global])),
    <<"BymiaBBcOuWN">> = iolist_to_binary(re:replace("aBBc","a(?i:b)*c","Bymi&OuWN",[])),
    <<"BymiaBBcOuWN">> = iolist_to_binary(re:replace("aBBc","a(?i:b)*c","Bymi&OuWN",[global])),
    <<"aBC">> = iolist_to_binary(re:replace("aBC","a(?i:b)*c","Cy",[])),
    <<"aBC">> = iolist_to_binary(re:replace("aBC","a(?i:b)*c","Cy",[global])),
    <<"aBBC">> = iolist_to_binary(re:replace("aBBC","a(?i:b)*c","qyBKu\\1v",[])),
    <<"aBBC">> = iolist_to_binary(re:replace("aBBC","a(?i:b)*c","qyBKu\\1v",[global])),
    ok.
run12() ->
    <<"cVsDabcdW">> = iolist_to_binary(re:replace("abcd","a(?=b(?i)c)\\w\\wd","\\1cVsD&W",[])),
    <<"cVsDabcdW">> = iolist_to_binary(re:replace("abcd","a(?=b(?i)c)\\w\\wd","\\1cVsD&W",[global])),
    <<"wabCdojyKixPq">> = iolist_to_binary(re:replace("abCd","a(?=b(?i)c)\\w\\wd","w&ojyKixPq",[])),
    <<"wabCdojyKixPq">> = iolist_to_binary(re:replace("abCd","a(?=b(?i)c)\\w\\wd","w&ojyKixPq",[global])),
    <<"aBCd">> = iolist_to_binary(re:replace("aBCd","a(?=b(?i)c)\\w\\wd","\\1DX\\1Pqr\\1\\1DQ",[])),
    <<"aBCd">> = iolist_to_binary(re:replace("aBCd","a(?=b(?i)c)\\w\\wd","\\1DX\\1Pqr\\1\\1DQ",[global])),
    <<"abcD">> = iolist_to_binary(re:replace("abcD","a(?=b(?i)c)\\w\\wd","x&dFsqqlLfIA",[])),
    <<"abcD">> = iolist_to_binary(re:replace("abcD","a(?=b(?i)c)\\w\\wd","x&dFsqqlLfIA",[global])),
    <<"Pmore than millionjObNmClO">> = iolist_to_binary(re:replace("more than million","(?s-i:more.*than).*million","P&jObNmClO",[caseless])),
    <<"Pmore than millionjObNmClO">> = iolist_to_binary(re:replace("more than million","(?s-i:more.*than).*million","P&jObNmClO",[caseless,global])),
    <<"xmore than MILLIONpLkf">> = iolist_to_binary(re:replace("more than MILLION","(?s-i:more.*than).*million","x&pLkf",[caseless])),
    <<"xmore than MILLIONpLkf">> = iolist_to_binary(re:replace("more than MILLION","(?s-i:more.*than).*million","x&pLkf",[caseless,global])),
    <<"FEmore 
 than MillioncWUmore 
 than Millionpddmore 
 than Millionmore 
 than MillionALbNurmn">> = iolist_to_binary(re:replace("more 
 than Million","(?s-i:more.*than).*million","FE&cWU&pdd&&ALbNurmn",[caseless])),
    <<"FEmore 
 than MillioncWUmore 
 than Millionpddmore 
 than Millionmore 
 than MillionALbNurmn">> = iolist_to_binary(re:replace("more 
 than Million","(?s-i:more.*than).*million","FE&cWU&pdd&&ALbNurmn",[caseless,global])),
    <<"MORE THAN MILLION">> = iolist_to_binary(re:replace("MORE THAN MILLION","(?s-i:more.*than).*million","\\1GXcllkWrI&\\1BG",[caseless])),
    <<"MORE THAN MILLION">> = iolist_to_binary(re:replace("MORE THAN MILLION","(?s-i:more.*than).*million","\\1GXcllkWrI&\\1BG",[caseless,global])),
    <<"more 
 than 
 million">> = iolist_to_binary(re:replace("more 
 than 
 million","(?s-i:more.*than).*million","bmMeaNS&VvJW",[caseless])),
    <<"more 
 than 
 million">> = iolist_to_binary(re:replace("more 
 than 
 million","(?s-i:more.*than).*million","bmMeaNS&VvJW",[caseless,global])),
    <<"Fmore than millionNvmore than millionGWYRb">> = iolist_to_binary(re:replace("more than million","(?:(?s-i)more.*than).*million","F\\1&Nv&\\1G\\1WYRb",[caseless])),
    <<"Fmore than millionNvmore than millionGWYRb">> = iolist_to_binary(re:replace("more than million","(?:(?s-i)more.*than).*million","F\\1&Nv&\\1G\\1WYRb",[caseless,global])),
    <<"WGmore than MILLIONksSqpubXCRDoMob">> = iolist_to_binary(re:replace("more than MILLION","(?:(?s-i)more.*than).*million","WG&ks\\1Sqpu\\1bXCRDoMob",[caseless])),
    <<"WGmore than MILLIONksSqpubXCRDoMob">> = iolist_to_binary(re:replace("more than MILLION","(?:(?s-i)more.*than).*million","WG&ks\\1Sqpu\\1bXCRDoMob",[caseless,global])),
    <<"y">> = iolist_to_binary(re:replace("more 
 than Million","(?:(?s-i)more.*than).*million","\\1y\\1",[caseless])),
    <<"y">> = iolist_to_binary(re:replace("more 
 than Million","(?:(?s-i)more.*than).*million","\\1y\\1",[caseless,global])),
    <<"MORE THAN MILLION">> = iolist_to_binary(re:replace("MORE THAN MILLION","(?:(?s-i)more.*than).*million","&jqGxgx\\1VA&SKEd\\1",[caseless])),
    <<"MORE THAN MILLION">> = iolist_to_binary(re:replace("MORE THAN MILLION","(?:(?s-i)more.*than).*million","&jqGxgx\\1VA&SKEd\\1",[caseless,global])),
    <<"more 
 than 
 million">> = iolist_to_binary(re:replace("more 
 than 
 million","(?:(?s-i)more.*than).*million","nCe&pljE\\1u",[caseless])),
    <<"more 
 than 
 million">> = iolist_to_binary(re:replace("more 
 than 
 million","(?:(?s-i)more.*than).*million","nCe&pljE\\1u",[caseless,global])),
    <<"ehaicAQxGvl">> = iolist_to_binary(re:replace("abc","(?>a(?i)b+)+c","\\1ehaicAQxGvl",[])),
    <<"ehaicAQxGvl">> = iolist_to_binary(re:replace("abc","(?>a(?i)b+)+c","\\1ehaicAQxGvl",[global])),
    <<"ggaBbctWBnaBbcPcVBlWkC">> = iolist_to_binary(re:replace("aBbc","(?>a(?i)b+)+c","gg&tWB\\1n&PcV\\1BlWkC",[])),
    <<"ggaBbctWBnaBbcPcVBlWkC">> = iolist_to_binary(re:replace("aBbc","(?>a(?i)b+)+c","gg&tWB\\1n&PcV\\1BlWkC",[global])),
    <<"baBBcRcaBBcS">> = iolist_to_binary(re:replace("aBBc","(?>a(?i)b+)+c","b&\\1Rc\\1&S",[])),
    <<"baBBcRcaBBcS">> = iolist_to_binary(re:replace("aBBc","(?>a(?i)b+)+c","b&\\1Rc\\1&S",[global])),
    <<"Abc">> = iolist_to_binary(re:replace("Abc","(?>a(?i)b+)+c","lrN&M\\1rFghJV&",[])),
    <<"Abc">> = iolist_to_binary(re:replace("Abc","(?>a(?i)b+)+c","lrN&M\\1rFghJV&",[global])),
    <<"abAb">> = iolist_to_binary(re:replace("abAb","(?>a(?i)b+)+c","\\1yb\\1j&li",[])),
    <<"abAb">> = iolist_to_binary(re:replace("abAb","(?>a(?i)b+)+c","\\1yb\\1j&li",[global])),
    <<"abbC">> = iolist_to_binary(re:replace("abbC","(?>a(?i)b+)+c","qdtT&xXSc",[])),
    <<"abbC">> = iolist_to_binary(re:replace("abbC","(?>a(?i)b+)+c","qdtT&xXSc",[global])),
    <<"abca">> = iolist_to_binary(re:replace("abc","(?=a(?i)b)\\w\\wc","&a",[])),
    <<"abca">> = iolist_to_binary(re:replace("abc","(?=a(?i)b)\\w\\wc","&a",[global])),
    <<"aBcaQirMaBcTRaBce">> = iolist_to_binary(re:replace("aBc","(?=a(?i)b)\\w\\wc","&aQi\\1rM&TR&\\1e",[])),
    <<"aBcaQirMaBcTRaBce">> = iolist_to_binary(re:replace("aBc","(?=a(?i)b)\\w\\wc","&aQi\\1rM&TR&\\1e",[global])),
    <<"Ab">> = iolist_to_binary(re:replace("Ab","(?=a(?i)b)\\w\\wc","K\\1NDG",[])),
    <<"Ab">> = iolist_to_binary(re:replace("Ab","(?=a(?i)b)\\w\\wc","K\\1NDG",[global])),
    <<"abC">> = iolist_to_binary(re:replace("abC","(?=a(?i)b)\\w\\wc","Agd&\\1yU",[])),
    <<"abC">> = iolist_to_binary(re:replace("abC","(?=a(?i)b)\\w\\wc","Agd&\\1yU",[global])),
    <<"aBC">> = iolist_to_binary(re:replace("aBC","(?=a(?i)b)\\w\\wc","KNLv\\1j&KK&",[])),
    <<"aBC">> = iolist_to_binary(re:replace("aBC","(?=a(?i)b)\\w\\wc","KNLv\\1j&KK&",[global])),
    <<"abGnM">> = iolist_to_binary(re:replace("abxxc","(?<=a(?i)b)(\\w\\w)c","GnM",[])),
    <<"abGnM">> = iolist_to_binary(re:replace("abxxc","(?<=a(?i)b)(\\w\\w)c","GnM",[global])),
    <<"aBxxcRBxxcmXVc">> = iolist_to_binary(re:replace("aBxxc","(?<=a(?i)b)(\\w\\w)c","&RB&mXVc",[])),
    <<"aBxxcRBxxcmXVc">> = iolist_to_binary(re:replace("aBxxc","(?<=a(?i)b)(\\w\\w)c","&RB&mXVc",[global])),
    <<"Abxxc">> = iolist_to_binary(re:replace("Abxxc","(?<=a(?i)b)(\\w\\w)c","jWUnJUS",[])),
    <<"Abxxc">> = iolist_to_binary(re:replace("Abxxc","(?<=a(?i)b)(\\w\\w)c","jWUnJUS",[global])),
    <<"ABxxc">> = iolist_to_binary(re:replace("ABxxc","(?<=a(?i)b)(\\w\\w)c","PgBuM",[])),
    <<"ABxxc">> = iolist_to_binary(re:replace("ABxxc","(?<=a(?i)b)(\\w\\w)c","PgBuM",[global])),
    <<"abxxC">> = iolist_to_binary(re:replace("abxxC","(?<=a(?i)b)(\\w\\w)c","&rKCsmwsrXilq",[])),
    <<"abxxC">> = iolist_to_binary(re:replace("abxxC","(?<=a(?i)b)(\\w\\w)c","&rKCsmwsrXilq",[global])),
    <<"aaTaAaAWgmx">> = iolist_to_binary(re:replace("aA","(?:(a)|b)(?(1)A|B)","\\1aT&&Wgmx",[])),
    <<"aaTaAaAWgmx">> = iolist_to_binary(re:replace("aA","(?:(a)|b)(?(1)A|B)","\\1aT&&Wgmx",[global])),
    <<"ljtkcC">> = iolist_to_binary(re:replace("bB","(?:(a)|b)(?(1)A|B)","ljtkcC",[])),
    <<"ljtkcC">> = iolist_to_binary(re:replace("bB","(?:(a)|b)(?(1)A|B)","ljtkcC",[global])),
    <<"aB">> = iolist_to_binary(re:replace("aB","(?:(a)|b)(?(1)A|B)","&&\\1Tmj\\1aBVw&Su\\1nww\\1",[])),
    <<"aB">> = iolist_to_binary(re:replace("aB","(?:(a)|b)(?(1)A|B)","&&\\1Tmj\\1aBVw&Su\\1nww\\1",[global])),
    <<"bA">> = iolist_to_binary(re:replace("bA","(?:(a)|b)(?(1)A|B)","ogel\\1leKhJPBR\\1&B\\1pB",[])),
    <<"bA">> = iolist_to_binary(re:replace("bA","(?:(a)|b)(?(1)A|B)","ogel\\1leKhJPBR\\1&B\\1pB",[global])),
    <<"DfKaaxraasMvaaaa">> = iolist_to_binary(re:replace("aa","^(a)?(?(1)a|b)+$","DfK&xr&sMv&&",[])),
    <<"DfKaaxraasMvaaaa">> = iolist_to_binary(re:replace("aa","^(a)?(?(1)a|b)+$","DfK&xr&sMv&&",[global])),
    <<"bDDDKoimlSswYrmbw">> = iolist_to_binary(re:replace("b","^(a)?(?(1)a|b)+$","&DDDKoimlSswYrm&w",[])),
    <<"bDDDKoimlSswYrmbw">> = iolist_to_binary(re:replace("b","^(a)?(?(1)a|b)+$","&DDDKoimlSswYrm&w",[global])),
    <<"iBocbbbbNxWYjxympSmB">> = iolist_to_binary(re:replace("bb","^(a)?(?(1)a|b)+$","iBoc&&NxWYj\\1xympSmB",[])),
    <<"iBocbbbbNxWYjxympSmB">> = iolist_to_binary(re:replace("bb","^(a)?(?(1)a|b)+$","iBoc&&NxWYj\\1xympSmB",[global])),
    <<"ab">> = iolist_to_binary(re:replace("ab","^(a)?(?(1)a|b)+$","u&dq&",[])),
    <<"ab">> = iolist_to_binary(re:replace("ab","^(a)?(?(1)a|b)+$","u&dq&",[global])),
    <<"lCkPabc:qRySQabc:YHrF">> = iolist_to_binary(re:replace("abc:","^(?(?=abc)\\w{3}:|\\d\\d)","lCk\\1P&qRySQ\\1&YHrF",[])),
    <<"lCkPabc:qRySQabc:YHrF">> = iolist_to_binary(re:replace("abc:","^(?(?=abc)\\w{3}:|\\d\\d)","lCk\\1P&qRySQ\\1&YHrF",[global])),
    <<"QkbJD12bLtir12fa">> = iolist_to_binary(re:replace("12","^(?(?=abc)\\w{3}:|\\d\\d)","QkbJD&bLtir&fa",[])),
    <<"QkbJD12bLtir12fa">> = iolist_to_binary(re:replace("12","^(?(?=abc)\\w{3}:|\\d\\d)","QkbJD&bLtir&fa",[global])),
    <<"12JDGniTa3">> = iolist_to_binary(re:replace("123","^(?(?=abc)\\w{3}:|\\d\\d)","&J\\1DGniTa",[])),
    <<"12JDGniTa3">> = iolist_to_binary(re:replace("123","^(?(?=abc)\\w{3}:|\\d\\d)","&J\\1DGniTa",[global])),
    <<"xyz">> = iolist_to_binary(re:replace("xyz","^(?(?=abc)\\w{3}:|\\d\\d)","\\1bfWxNNO\\1\\1uiB",[])),
    <<"xyz">> = iolist_to_binary(re:replace("xyz","^(?(?=abc)\\w{3}:|\\d\\d)","\\1bfWxNNO\\1\\1uiB",[global])),
    <<"inSfgh">> = iolist_to_binary(re:replace("abc:","^(?(?!abc)\\d\\d|\\w{3}:)$","inSf\\1\\1gh",[])),
    <<"inSfgh">> = iolist_to_binary(re:replace("abc:","^(?(?!abc)\\d\\d|\\w{3}:)$","inSf\\1\\1gh",[global])),
    <<"12JtcOTqU">> = iolist_to_binary(re:replace("12","^(?(?!abc)\\d\\d|\\w{3}:)$","&JtcOT\\1qU",[])),
    <<"12JtcOTqU">> = iolist_to_binary(re:replace("12","^(?(?!abc)\\d\\d|\\w{3}:)$","&JtcOT\\1qU",[global])),
    <<"123">> = iolist_to_binary(re:replace("123","^(?(?!abc)\\d\\d|\\w{3}:)$","fEQ",[])),
    <<"123">> = iolist_to_binary(re:replace("123","^(?(?!abc)\\d\\d|\\w{3}:)$","fEQ",[global])),
    <<"xyz">> = iolist_to_binary(re:replace("xyz","^(?(?!abc)\\d\\d|\\w{3}:)$","ilQoSPAJ",[])),
    <<"xyz">> = iolist_to_binary(re:replace("xyz","^(?(?!abc)\\d\\d|\\w{3}:)$","ilQoSPAJ",[global])),
    <<"foosOIiDwUMulbarNN">> = iolist_to_binary(re:replace("foobar","(?(?<=foo)bar|cat)","sOIiDw\\1U\\1Mul&\\1NN\\1",[])),
    <<"foosOIiDwUMulbarNN">> = iolist_to_binary(re:replace("foobar","(?(?<=foo)bar|cat)","sOIiDw\\1U\\1Mul&\\1NN\\1",[global])),
    <<"catOncatobtglyVw">> = iolist_to_binary(re:replace("cat","(?(?<=foo)bar|cat)","&On&obtglyVw",[])),
    <<"catOncatobtglyVw">> = iolist_to_binary(re:replace("cat","(?(?<=foo)bar|cat)","&On&obtglyVw",[global])),
    <<"fRSlcatv">> = iolist_to_binary(re:replace("fcat","(?(?<=foo)bar|cat)","R\\1S\\1l&v",[])),
    <<"fRSlcatv">> = iolist_to_binary(re:replace("fcat","(?(?<=foo)bar|cat)","R\\1S\\1l&v",[global])),
    <<"foeDVNDb">> = iolist_to_binary(re:replace("focat","(?(?<=foo)bar|cat)","eDVNDb",[])),
    <<"foeDVNDb">> = iolist_to_binary(re:replace("focat","(?(?<=foo)bar|cat)","eDVNDb",[global])),
    <<"foocat">> = iolist_to_binary(re:replace("foocat","(?(?<=foo)bar|cat)","p\\1",[])),
    <<"foocat">> = iolist_to_binary(re:replace("foocat","(?(?<=foo)bar|cat)","p\\1",[global])),
    <<"fooShDPcSaaEbar">> = iolist_to_binary(re:replace("foobar","(?(?<!foo)cat|bar)","\\1ShDPcSaaE&",[])),
    <<"fooShDPcSaaEbar">> = iolist_to_binary(re:replace("foobar","(?(?<!foo)cat|bar)","\\1ShDPcSaaE&",[global])),
    <<"kgxcatRsUCY">> = iolist_to_binary(re:replace("cat","(?(?<!foo)cat|bar)","kgx\\1&RsUCY",[])),
    <<"kgxcatRsUCY">> = iolist_to_binary(re:replace("cat","(?(?<!foo)cat|bar)","kgx\\1&RsUCY",[global])),
    <<"fOwWeWH">> = iolist_to_binary(re:replace("fcat","(?(?<!foo)cat|bar)","\\1OwWeWH",[])),
    <<"fOwWeWH">> = iolist_to_binary(re:replace("fcat","(?(?<!foo)cat|bar)","\\1OwWeWH",[global])),
    <<"foRKNdIe">> = iolist_to_binary(re:replace("focat","(?(?<!foo)cat|bar)","RKNdIe",[])),
    <<"foRKNdIe">> = iolist_to_binary(re:replace("focat","(?(?<!foo)cat|bar)","RKNdIe",[global])),
    <<"foocat">> = iolist_to_binary(re:replace("foocat","(?(?<!foo)cat|bar)","&dYBP",[])),
    <<"foocat">> = iolist_to_binary(re:replace("foocat","(?(?<!foo)cat|bar)","&dYBP",[global])),
    <<"cGurgcYoWHqabcdqXicAl">> = iolist_to_binary(re:replace("abcd","( \\( )? [^()]+ (?(1) \\) |) ","cGurgcY\\1oWHq&qXicAl",[extended])),
    <<"cGurgcYoWHqabcdqXicAl">> = iolist_to_binary(re:replace("abcd","( \\( )? [^()]+ (?(1) \\) |) ","cGurgcY\\1oWHq&qXicAl",[extended,global])),
    <<"hXTky(abcd)El(abcd)GX(kFf">> = iolist_to_binary(re:replace("(abcd)","( \\( )? [^()]+ (?(1) \\) |) ","hXTky&El&GX\\1kFf",[extended])),
    <<"hXTky(abcd)El(abcd)GX(kFf">> = iolist_to_binary(re:replace("(abcd)","( \\( )? [^()]+ (?(1) \\) |) ","hXTky&El&GX\\1kFf",[extended,global])),
    <<"hdx(abcd) fox">> = iolist_to_binary(re:replace("the quick (abcd) fox","( \\( )? [^()]+ (?(1) \\) |) ","hd\\1x",[extended])),
    <<"hdxhd(xhdx">> = iolist_to_binary(re:replace("the quick (abcd) fox","( \\( )? [^()]+ (?(1) \\) |) ","hd\\1x",[extended,global])),
    <<"(">> = iolist_to_binary(re:replace("(abcd","( \\( )? [^()]+ (?(1) \\) |) ","\\1",[extended])),
    <<"(">> = iolist_to_binary(re:replace("(abcd","( \\( )? [^()]+ (?(1) \\) |) ","\\1",[extended,global])),
    <<"aGjfXar">> = iolist_to_binary(re:replace("abcd","( \\( )? [^()]+ (?(1) \\) ) ","aGjfXar",[extended])),
    <<"aGjfXar">> = iolist_to_binary(re:replace("abcd","( \\( )? [^()]+ (?(1) \\) ) ","aGjfXar",[extended,global])),
    <<"DmEP(AVjI(abcd)r">> = iolist_to_binary(re:replace("(abcd)","( \\( )? [^()]+ (?(1) \\) ) ","DmEP\\1AVjI&r",[extended])),
    <<"DmEP(AVjI(abcd)r">> = iolist_to_binary(re:replace("(abcd)","( \\( )? [^()]+ (?(1) \\) ) ","DmEP\\1AVjI&r",[extended,global])),
    <<"Tthe quick tTxSOuYhbPTthe quick FKp(abcd) fox">> = iolist_to_binary(re:replace("the quick (abcd) fox","( \\( )? [^()]+ (?(1) \\) ) ","T&tTxS\\1O\\1uYhbPT&\\1FKp",[extended])),
    <<"Tthe quick tTxSOuYhbPTthe quick FKpT(abcd)tTxS(O(uYhbPT(abcd)(FKpT foxtTxSOuYhbPT foxFKp">> = iolist_to_binary(re:replace("the quick (abcd) fox","( \\( )? [^()]+ (?(1) \\) ) ","T&tTxS\\1O\\1uYhbPT&\\1FKp",[extended,global])),
    <<"(LhIrrFgkHmabcdfdoY">> = iolist_to_binary(re:replace("(abcd","( \\( )? [^()]+ (?(1) \\) ) ","LhIrrFgkHm&fd\\1oY",[extended])),
    <<"(LhIrrFgkHmabcdfdoY">> = iolist_to_binary(re:replace("(abcd","( \\( )? [^()]+ (?(1) \\) ) ","LhIrrFgkHm&fd\\1oY",[extended,global])),
    <<"Im11cADc12pHh">> = iolist_to_binary(re:replace("12","^(?(2)a|(1)(2))+$","Im\\1\\1cADc&pHh",[])),
    <<"Im11cADc12pHh">> = iolist_to_binary(re:replace("12","^(?(2)a|(1)(2))+$","Im\\1\\1cADc&pHh",[global])),
    <<"tKEd12a1">> = iolist_to_binary(re:replace("12a","^(?(2)a|(1)(2))+$","tKEd&\\1",[])),
    <<"tKEd12a1">> = iolist_to_binary(re:replace("12a","^(?(2)a|(1)(2))+$","tKEd&\\1",[global])),
    <<"m1nyi12aaEwbrLGfNM">> = iolist_to_binary(re:replace("12aa","^(?(2)a|(1)(2))+$","m\\1nyi&EwbrLGfNM",[])),
    <<"m1nyi12aaEwbrLGfNM">> = iolist_to_binary(re:replace("12aa","^(?(2)a|(1)(2))+$","m\\1nyi&EwbrLGfNM",[global])),
    <<"1234">> = iolist_to_binary(re:replace("1234","^(?(2)a|(1)(2))+$","Iqlk&bhmeIrGmiGmVd",[])),
    <<"1234">> = iolist_to_binary(re:replace("1234","^(?(2)a|(1)(2))+$","Iqlk&bhmeIrGmiGmVd",[global])),
    <<"CIsFJQblahgcRrp">> = iolist_to_binary(re:replace("blah blah","((?i)blah)\\s+\\1","CIsFJQ\\1gcRrp",[])),
    <<"CIsFJQblahgcRrp">> = iolist_to_binary(re:replace("blah blah","((?i)blah)\\s+\\1","CIsFJQ\\1gcRrp",[global])),
    <<"lmHuBLAHBLAHCBLAHBBLAHfyc">> = iolist_to_binary(re:replace("BLAH BLAH","((?i)blah)\\s+\\1","lmHu\\1\\1C\\1B\\1fyc",[])),
    <<"lmHuBLAHBLAHCBLAHBBLAHfyc">> = iolist_to_binary(re:replace("BLAH BLAH","((?i)blah)\\s+\\1","lmHu\\1\\1C\\1B\\1fyc",[global])),
    <<"GQrbsavAq">> = iolist_to_binary(re:replace("Blah Blah","((?i)blah)\\s+\\1","GQrbsavAq",[])),
    <<"GQrbsavAq">> = iolist_to_binary(re:replace("Blah Blah","((?i)blah)\\s+\\1","GQrbsavAq",[global])),
    <<"blaHTXUblaH blaHlHlMOAblaH blaHblaH blaHblaHEBblaH blaHEF">> = iolist_to_binary(re:replace("blaH blaH","((?i)blah)\\s+\\1","\\1TXU&lHlMOA&&\\1EB&EF",[])),
    <<"blaHTXUblaH blaHlHlMOAblaH blaHblaH blaHblaHEBblaH blaHEF">> = iolist_to_binary(re:replace("blaH blaH","((?i)blah)\\s+\\1","\\1TXU&lHlMOA&&\\1EB&EF",[global])),
    <<"blah BLAH">> = iolist_to_binary(re:replace("blah BLAH","((?i)blah)\\s+\\1","id\\1&iAQbk",[])),
    <<"blah BLAH">> = iolist_to_binary(re:replace("blah BLAH","((?i)blah)\\s+\\1","id\\1&iAQbk",[global])),
    <<"Blah blah">> = iolist_to_binary(re:replace("Blah blah","((?i)blah)\\s+\\1","ymJEo\\1JHMVX&pfeH",[])),
    <<"Blah blah">> = iolist_to_binary(re:replace("Blah blah","((?i)blah)\\s+\\1","ymJEo\\1JHMVX&pfeH",[global])),
    <<"blaH blah">> = iolist_to_binary(re:replace("blaH blah","((?i)blah)\\s+\\1","vPR\\1TpFC\\1FV",[])),
    <<"blaH blah">> = iolist_to_binary(re:replace("blaH blah","((?i)blah)\\s+\\1","vPR\\1TpFC\\1FV",[global])),
    <<"blah blah">> = iolist_to_binary(re:replace("blah blah","((?i)blah)\\s+(?i:\\1)","&",[])),
    <<"blah blah">> = iolist_to_binary(re:replace("blah blah","((?i)blah)\\s+(?i:\\1)","&",[global])),
    <<"BLAH BLAHBLAHVTAYjnmBLAH BLAHanO">> = iolist_to_binary(re:replace("BLAH BLAH","((?i)blah)\\s+(?i:\\1)","&\\1VTAYjnm&anO",[])),
    <<"BLAH BLAHBLAHVTAYjnmBLAH BLAHanO">> = iolist_to_binary(re:replace("BLAH BLAH","((?i)blah)\\s+(?i:\\1)","&\\1VTAYjnm&anO",[global])),
    <<"wBlah BlahNsBlah BlahU">> = iolist_to_binary(re:replace("Blah Blah","((?i)blah)\\s+(?i:\\1)","w&Ns&U",[])),
    <<"wBlah BlahNsBlah BlahU">> = iolist_to_binary(re:replace("Blah Blah","((?i)blah)\\s+(?i:\\1)","w&Ns&U",[global])),
    <<"JblaHblaHblaH blaHblaH">> = iolist_to_binary(re:replace("blaH blaH","((?i)blah)\\s+(?i:\\1)","J\\1\\1&\\1",[])),
    <<"JblaHblaHblaH blaHblaH">> = iolist_to_binary(re:replace("blaH blaH","((?i)blah)\\s+(?i:\\1)","J\\1\\1&\\1",[global])),
    <<"kmHqhblahVblah BLAHxPLoblah BLAHdblahkDblah BLAHcblah">> = iolist_to_binary(re:replace("blah BLAH","((?i)blah)\\s+(?i:\\1)","kmHqh\\1V&xPLo&d\\1kD&c\\1",[])),
    <<"kmHqhblahVblah BLAHxPLoblah BLAHdblahkDblah BLAHcblah">> = iolist_to_binary(re:replace("blah BLAH","((?i)blah)\\s+(?i:\\1)","kmHqh\\1V&xPLo&d\\1kD&c\\1",[global])),
    <<"JeuSTa">> = iolist_to_binary(re:replace("Blah blah","((?i)blah)\\s+(?i:\\1)","JeuSTa",[])),
    <<"JeuSTa">> = iolist_to_binary(re:replace("Blah blah","((?i)blah)\\s+(?i:\\1)","JeuSTa",[global])),
    <<"rGvPufMblaH blahS">> = iolist_to_binary(re:replace("blaH blah","((?i)blah)\\s+(?i:\\1)","rGvPufM&S",[])),
    <<"rGvPufMblaH blahS">> = iolist_to_binary(re:replace("blaH blah","((?i)blah)\\s+(?i:\\1)","rGvPufM&S",[global])),
    <<"TblahblahUmmu">> = iolist_to_binary(re:replace("blah ABLAH","((?i)blah)\\s+(?m)A(?i:\\1)","T\\1\\1Ummu",[])),
    <<"TblahblahUmmu">> = iolist_to_binary(re:replace("blah ABLAH","((?i)blah)\\s+(?m)A(?i:\\1)","T\\1\\1Ummu",[global])),
    <<"blah aBLAH">> = iolist_to_binary(re:replace("blah aBLAH","((?i)blah)\\s+(?m)A(?i:\\1)","IRrlhH\\1TBy\\1hR&SlYv",[])),
    <<"blah aBLAH">> = iolist_to_binary(re:replace("blah aBLAH","((?i)blah)\\s+(?m)A(?i:\\1)","IRrlhH\\1TBy\\1hR&SlYv",[global])),
    <<"aWaQjaDduHuWkQDeaf">> = iolist_to_binary(re:replace("a","(?>a*)*","&W&QjaDduHuWkQDe&f",[])),
    <<"aWaQjaDduHuWkQDeafWQjaDduHuWkQDef">> = iolist_to_binary(re:replace("a","(?>a*)*","&W&QjaDduHuWkQDe&f",[global])),
    <<"nPOwaaHbn">> = iolist_to_binary(re:replace("aa","(?>a*)*","nPOw&Hbn",[])),
    <<"nPOwaaHbnnPOwHbn">> = iolist_to_binary(re:replace("aa","(?>a*)*","nPOw&Hbn",[global])),
    <<"lUDErmsSNiolx">> = iolist_to_binary(re:replace("aaaa","(?>a*)*","lUDErmsSNiolx",[])),
    <<"lUDErmsSNiolxlUDErmsSNiolx">> = iolist_to_binary(re:replace("aaaa","(?>a*)*","lUDErmsSNiolx",[global])),
    <<"nnmRyETDugSpewabclo">> = iolist_to_binary(re:replace("abc","(abc|)+","\\1nnmRyE\\1TDu\\1gSpew&lo",[])),
    <<"nnmRyETDugSpewabclonnmRyETDugSpewlo">> = iolist_to_binary(re:replace("abc","(abc|)+","\\1nnmRyE\\1TDu\\1gSpew&lo",[global])),
    <<"yodYxabcabcCeJlaBW">> = iolist_to_binary(re:replace("abcabc","(abc|)+","\\1yod\\1Yx&CeJlaBW",[])),
    <<"yodYxabcabcCeJlaBWyodYxCeJlaBW">> = iolist_to_binary(re:replace("abcabc","(abc|)+","\\1yod\\1Yx&CeJlaBW",[global])),
    <<"abcabcabcSAguoo">> = iolist_to_binary(re:replace("abcabcabc","(abc|)+","&SAguoo",[])),
    <<"abcabcabcSAguooSAguoo">> = iolist_to_binary(re:replace("abcabcabc","(abc|)+","&SAguoo",[global])),
    <<"gKxyz">> = iolist_to_binary(re:replace("xyz","(abc|)+","gK&",[])),
    <<"gKxgKygKzgK">> = iolist_to_binary(re:replace("xyz","(abc|)+","gK&",[global])),
    ok.
run13() ->
    <<"VqTSha">> = iolist_to_binary(re:replace("a","([a]*)*","VqTSha",[])),
    <<"VqTShaVqTSha">> = iolist_to_binary(re:replace("a","([a]*)*","VqTSha",[global])),
    <<"umIMCIfaaaaaIcUxswrPAle">> = iolist_to_binary(re:replace("aaaaa","([a]*)*","umIMCIf&IcUxswr\\1PAle",[])),
    <<"umIMCIfaaaaaIcUxswrPAleumIMCIfIcUxswrPAle">> = iolist_to_binary(re:replace("aaaaa","([a]*)*","umIMCIf&IcUxswr\\1PAle",[global])),
    <<"IrRiaaaxxN">> = iolist_to_binary(re:replace("a","([ab]*)*","IrRia&&\\1\\1xxN",[])),
    <<"IrRiaaaxxNIrRiaxxN">> = iolist_to_binary(re:replace("a","([ab]*)*","IrRia&&\\1\\1xxN",[global])),
    <<"BhNg">> = iolist_to_binary(re:replace("b","([ab]*)*","B\\1hNg",[])),
    <<"BhNgBhNg">> = iolist_to_binary(re:replace("b","([ab]*)*","B\\1hNg",[global])),
    <<"ksleilabababnabababgabababckag">> = iolist_to_binary(re:replace("ababab","([ab]*)*","ksleil\\1&n&\\1g&ckag",[])),
    <<"ksleilabababnabababgabababckagksleilngckag">> = iolist_to_binary(re:replace("ababab","([ab]*)*","ksleil\\1&n&\\1g&ckag",[global])),
    <<"HOFVAgJOKaaaabcde">> = iolist_to_binary(re:replace("aaaabcde","([ab]*)*","HOFVAgJOK&",[])),
    <<"HOFVAgJOKaaaabHOFVAgJOKcHOFVAgJOKdHOFVAgJOKeHOFVAgJOK">> = iolist_to_binary(re:replace("aaaabcde","([ab]*)*","HOFVAgJOK&",[global])),
    <<"AqQnVO">> = iolist_to_binary(re:replace("bbbb","([ab]*)*","AqQnVO",[])),
    <<"AqQnVOAqQnVO">> = iolist_to_binary(re:replace("bbbb","([ab]*)*","AqQnVO",[global])),
    <<"vnKNXwprpJxY">> = iolist_to_binary(re:replace("b","([^a]*)*","vnKNXwp\\1rp\\1JxY",[])),
    <<"vnKNXwprpJxYvnKNXwprpJxY">> = iolist_to_binary(re:replace("b","([^a]*)*","vnKNXwp\\1rp\\1JxY",[global])),
    <<"bbbbbbbblbbbbCMbjHlAnNY">> = iolist_to_binary(re:replace("bbbb","([^a]*)*","&&l&\\1CMbjHlAnNY",[])),
    <<"bbbbbbbblbbbbCMbjHlAnNYlCMbjHlAnNY">> = iolist_to_binary(re:replace("bbbb","([^a]*)*","&&l&\\1CMbjHlAnNY",[global])),
    <<"CrbBlrjAUcQReBRNaaa">> = iolist_to_binary(re:replace("aaa","([^a]*)*","CrbBlrjAUcQReBRN",[])),
    <<"CrbBlrjAUcQReBRNaCrbBlrjAUcQReBRNaCrbBlrjAUcQReBRNaCrbBlrjAUcQReBRN">> = iolist_to_binary(re:replace("aaa","([^a]*)*","CrbBlrjAUcQReBRN",[global])),
    <<"FTHvDKUVGccccJcccca">> = iolist_to_binary(re:replace("cccc","([^ab]*)*","FT\\1HvDKUVG&J\\1&\\1a",[])),
    <<"FTHvDKUVGccccJccccaFTHvDKUVGJa">> = iolist_to_binary(re:replace("cccc","([^ab]*)*","FT\\1HvDKUVG&J\\1&\\1a",[global])),
    <<"qHEPBQLSxabab">> = iolist_to_binary(re:replace("abab","([^ab]*)*","qHE\\1PBQLSx",[])),
    <<"qHEPBQLSxaqHEPBQLSxbqHEPBQLSxaqHEPBQLSxbqHEPBQLSx">> = iolist_to_binary(re:replace("abab","([^ab]*)*","qHE\\1PBQLSx",[global])),
    <<"ceuREbnlQIAtjva">> = iolist_to_binary(re:replace("a","([a]*?)*","ceuREb\\1nlQIA\\1tjv",[])),
    <<"ceuREbnlQIAtjvceuREbnlQIAtjvceuREbnlQIAtjv">> = iolist_to_binary(re:replace("a","([a]*?)*","ceuREb\\1nlQIA\\1tjv",[global])),
    <<"xadyaaaa">> = iolist_to_binary(re:replace("aaaa","([a]*?)*","\\1xa&d\\1\\1\\1&y",[])),
    <<"xadyxaadayxadyxaadayxadyxaadayxadyxaadayxady">> = iolist_to_binary(re:replace("aaaa","([a]*?)*","\\1xa&d\\1\\1\\1&y",[global])),
    <<"ulvseXcnAHfTuxa">> = iolist_to_binary(re:replace("a","([ab]*?)*","\\1ulvseXc\\1nAHf\\1Tux",[])),
    <<"ulvseXcnAHfTuxulvseXcnAHfTuxulvseXcnAHfTux">> = iolist_to_binary(re:replace("a","([ab]*?)*","\\1ulvseXc\\1nAHf\\1Tux",[global])),
    <<"JfEqTKkUYCsYRBab">> = iolist_to_binary(re:replace("b","([ab]*?)*","J&fEqTKkUYCsYR\\1Ba",[])),
    <<"JfEqTKkUYCsYRBaJbfEqTKkUYCsYRBaJfEqTKkUYCsYRBa">> = iolist_to_binary(re:replace("b","([ab]*?)*","J&fEqTKkUYCsYR\\1Ba",[global])),
    <<"ucDKTCpyhMJmdGabab">> = iolist_to_binary(re:replace("abab","([ab]*?)*","&ucD&KTCpy&hM\\1JmdG\\1",[])),
    <<"ucDKTCpyhMJmdGaucDaKTCpyahMJmdGucDKTCpyhMJmdGbucDbKTCpybhMJmdGucDKTCpyhMJmdGaucDaKTCpyahMJmdGucDKTCpyhMJmdGbucDbKTCpybhMJmdGucDKTCpyhMJmdG">> = iolist_to_binary(re:replace("abab","([ab]*?)*","&ucD&KTCpy&hM\\1JmdG\\1",[global])),
    <<"unfMosGsMoIIOOgTbaba">> = iolist_to_binary(re:replace("baba","([ab]*?)*","un&fMos&GsMoI\\1IOOgT\\1",[])),
    <<"unfMosGsMoIIOOgTunbfMosbGsMoIIOOgTunfMosGsMoIIOOgTunafMosaGsMoIIOOgTunfMosGsMoIIOOgTunbfMosbGsMoIIOOgTunfMosGsMoIIOOgTunafMosaGsMoIIOOgTunfMosGsMoIIOOgT">> = iolist_to_binary(re:replace("baba","([ab]*?)*","un&fMos&GsMoI\\1IOOgT\\1",[global])),
    <<"TXb">> = iolist_to_binary(re:replace("b","([^a]*?)*","\\1TX&",[])),
    <<"TXTXbTX">> = iolist_to_binary(re:replace("b","([^a]*?)*","\\1TX&",[global])),
    <<"xDMyvobHjfHHqLbbbb">> = iolist_to_binary(re:replace("bbbb","([^a]*?)*","&x&DMy&vobHjfH&HqL",[])),
    <<"xDMyvobHjfHHqLbxbDMybvobHjfHbHqLxDMyvobHjfHHqLbxbDMybvobHjfHbHqLxDMyvobHjfHHqLbxbDMybvobHjfHbHqLxDMyvobHjfHHqLbxbDMybvobHjfHbHqLxDMyvobHjfHHqL">> = iolist_to_binary(re:replace("bbbb","([^a]*?)*","&x&DMy&vobHjfH&HqL",[global])),
    <<"KIuDxHaaa">> = iolist_to_binary(re:replace("aaa","([^a]*?)*","\\1&\\1KI&&uDxH",[])),
    <<"KIuDxHaKIuDxHaKIuDxHaKIuDxH">> = iolist_to_binary(re:replace("aaa","([^a]*?)*","\\1&\\1KI&&uDxH",[global])),
    <<"DIwUfDc">> = iolist_to_binary(re:replace("c","([^ab]*?)*","DIwU\\1fD",[])),
    <<"DIwUfDDIwUfDDIwUfD">> = iolist_to_binary(re:replace("c","([^ab]*?)*","DIwU\\1fD",[global])),
    <<"mlYAcccc">> = iolist_to_binary(re:replace("cccc","([^ab]*?)*","&&m&lYA",[])),
    <<"mlYAccmclYAmlYAccmclYAmlYAccmclYAmlYAccmclYAmlYA">> = iolist_to_binary(re:replace("cccc","([^ab]*?)*","&&m&lYA",[global])),
    <<"hCcQaEejLMkpMbOoWbaba">> = iolist_to_binary(re:replace("baba","([^ab]*?)*","hC\\1c\\1QaE\\1ejLMkpMbOoW",[])),
    <<"hCcQaEejLMkpMbOoWbhCcQaEejLMkpMbOoWahCcQaEejLMkpMbOoWbhCcQaEejLMkpMbOoWahCcQaEejLMkpMbOoW">> = iolist_to_binary(re:replace("baba","([^ab]*?)*","hC\\1c\\1QaE\\1ejLMkpMbOoW",[global])),
    <<"hUaDhqAQkrYaH">> = iolist_to_binary(re:replace("a","(?>a*)*","hU\\1&DhqAQkrYaH",[])),
    <<"hUaDhqAQkrYaHhUDhqAQkrYaH">> = iolist_to_binary(re:replace("a","(?>a*)*","hU\\1&DhqAQkrYaH",[global])),
    <<"rBTLaaaYbcde">> = iolist_to_binary(re:replace("aaabcde","(?>a*)*","rBTL&Y",[])),
    <<"rBTLaaaYrBTLYbrBTLYcrBTLYdrBTLYerBTLY">> = iolist_to_binary(re:replace("aaabcde","(?>a*)*","rBTL&Y",[global])),
    <<"SmyMhdAN">> = iolist_to_binary(re:replace("aaaaa","((?>a*))*","S\\1myMhdAN",[])),
    <<"SmyMhdANSmyMhdAN">> = iolist_to_binary(re:replace("aaaaa","((?>a*))*","S\\1myMhdAN",[global])),
    <<"VCDSmcyPWaadgbbaa">> = iolist_to_binary(re:replace("aabbaa","((?>a*))*","VCDSmcyPW\\1&dg",[])),
    <<"VCDSmcyPWaadgVCDSmcyPWdgbVCDSmcyPWdgbVCDSmcyPWaadgVCDSmcyPWdg">> = iolist_to_binary(re:replace("aabbaa","((?>a*))*","VCDSmcyPW\\1&dg",[global])),
    <<"Baaaaa">> = iolist_to_binary(re:replace("aaaaa","((?>a*?))*","\\1B&",[])),
    <<"BaBaBaBaBaB">> = iolist_to_binary(re:replace("aaaaa","((?>a*?))*","\\1B&",[global])),
    <<"RIUeeXdQaaabbaa">> = iolist_to_binary(re:replace("aabbaa","((?>a*?))*","\\1R&\\1IUeeXdQa&",[])),
    <<"RIUeeXdQaaRIUeeXdQaaRIUeeXdQabRIUeeXdQabRIUeeXdQaaRIUeeXdQaaRIUeeXdQa">> = iolist_to_binary(re:replace("aabbaa","((?>a*?))*","\\1R&\\1IUeeXdQa&",[global])),
    <<"QA12-sep-98">> = iolist_to_binary(re:replace("12-sep-98","(?(?=[^a-z]+[a-z])  \\d{2}-[a-z]{3}-\\d{2}  |  \\d{2}-\\d{2}-\\d{2} ) ","QA\\1&",[extended])),
    <<"QA12-sep-98">> = iolist_to_binary(re:replace("12-sep-98","(?(?=[^a-z]+[a-z])  \\d{2}-[a-z]{3}-\\d{2}  |  \\d{2}-\\d{2}-\\d{2} ) ","QA\\1&",[extended,global])),
    <<"DxMd12-09-98H">> = iolist_to_binary(re:replace("12-09-98","(?(?=[^a-z]+[a-z])  \\d{2}-[a-z]{3}-\\d{2}  |  \\d{2}-\\d{2}-\\d{2} ) ","DxMd&H",[extended])),
    <<"DxMd12-09-98H">> = iolist_to_binary(re:replace("12-09-98","(?(?=[^a-z]+[a-z])  \\d{2}-[a-z]{3}-\\d{2}  |  \\d{2}-\\d{2}-\\d{2} ) ","DxMd&H",[extended,global])),
    <<"sep-12-98">> = iolist_to_binary(re:replace("sep-12-98","(?(?=[^a-z]+[a-z])  \\d{2}-[a-z]{3}-\\d{2}  |  \\d{2}-\\d{2}-\\d{2} ) ","GBQiDroa&F\\1",[extended])),
    <<"sep-12-98">> = iolist_to_binary(re:replace("sep-12-98","(?(?=[^a-z]+[a-z])  \\d{2}-[a-z]{3}-\\d{2}  |  \\d{2}-\\d{2}-\\d{2} ) ","GBQiDroa&F\\1",[extended,global])),
    <<"foodbarfoovQhyA">> = iolist_to_binary(re:replace("foobarfoo","(?<=(foo))bar\\1","d&vQhyA",[])),
    <<"foodbarfoovQhyA">> = iolist_to_binary(re:replace("foobarfoo","(?<=(foo))bar\\1","d&vQhyA",[global])),
    <<"foohtKBtling">> = iolist_to_binary(re:replace("foobarfootling","(?<=(foo))bar\\1","htKB",[])),
    <<"foohtKBtling">> = iolist_to_binary(re:replace("foobarfootling","(?<=(foo))bar\\1","htKB",[global])),
    <<"foobar">> = iolist_to_binary(re:replace("foobar","(?<=(foo))bar\\1","vR&jLCa\\1y\\1cD",[])),
    <<"foobar">> = iolist_to_binary(re:replace("foobar","(?<=(foo))bar\\1","vR&jLCa\\1y\\1cD",[global])),
    <<"barfoo">> = iolist_to_binary(re:replace("barfoo","(?<=(foo))bar\\1","lG",[])),
    <<"barfoo">> = iolist_to_binary(re:replace("barfoo","(?<=(foo))bar\\1","lG",[global])),
    <<"cbsaturday">> = iolist_to_binary(re:replace("saturday","(?i:saturday|sunday)","cb&\\1",[])),
    <<"cbsaturday">> = iolist_to_binary(re:replace("saturday","(?i:saturday|sunday)","cb&\\1",[global])),
    <<"QBObvsfLS">> = iolist_to_binary(re:replace("sunday","(?i:saturday|sunday)","QBObvsfLS",[])),
    <<"QBObvsfLS">> = iolist_to_binary(re:replace("sunday","(?i:saturday|sunday)","QBObvsfLS",[global])),
    <<"muFQTESaturdayESaturdayPEBB">> = iolist_to_binary(re:replace("Saturday","(?i:saturday|sunday)","mu\\1FQ\\1TE&E&P\\1EBB\\1",[])),
    <<"muFQTESaturdayESaturdayPEBB">> = iolist_to_binary(re:replace("Saturday","(?i:saturday|sunday)","mu\\1FQ\\1TE&E&P\\1EBB\\1",[global])),
    <<"drqTUpJSundayvsuSunday">> = iolist_to_binary(re:replace("Sunday","(?i:saturday|sunday)","drqTU\\1pJ\\1&vsu&",[])),
    <<"drqTUpJSundayvsuSunday">> = iolist_to_binary(re:replace("Sunday","(?i:saturday|sunday)","drqTU\\1pJ\\1&vsu&",[global])),
    <<"wSATURDAYtSQSATURDAY">> = iolist_to_binary(re:replace("SATURDAY","(?i:saturday|sunday)","w&t\\1S\\1Q&",[])),
    <<"wSATURDAYtSQSATURDAY">> = iolist_to_binary(re:replace("SATURDAY","(?i:saturday|sunday)","w&t\\1S\\1Q&",[global])),
    <<"BUmgeWbSPrmQuh">> = iolist_to_binary(re:replace("SUNDAY","(?i:saturday|sunday)","BU\\1mgeWbSPrmQu\\1h",[])),
    <<"BUmgeWbSPrmQuh">> = iolist_to_binary(re:replace("SUNDAY","(?i:saturday|sunday)","BU\\1mgeWbSPrmQu\\1h",[global])),
    <<"AhiD">> = iolist_to_binary(re:replace("SunDay","(?i:saturday|sunday)","Ahi\\1D",[])),
    <<"AhiD">> = iolist_to_binary(re:replace("SunDay","(?i:saturday|sunday)","Ahi\\1D",[global])),
    <<"xJwrB">> = iolist_to_binary(re:replace("abcx","(a(?i)bc|BB)x","xJwrB",[])),
    <<"xJwrB">> = iolist_to_binary(re:replace("abcx","(a(?i)bc|BB)x","xJwrB",[global])),
    <<"WqYokXSFmo">> = iolist_to_binary(re:replace("aBCx","(a(?i)bc|BB)x","WqYokXSFmo",[])),
    <<"WqYokXSFmo">> = iolist_to_binary(re:replace("aBCx","(a(?i)bc|BB)x","WqYokXSFmo",[global])),
    <<"ViVjAQCNIlGCBbbRWbbKs">> = iolist_to_binary(re:replace("bbx","(a(?i)bc|BB)x","ViVjAQCNIlGCB\\1RW\\1Ks",[])),
    <<"ViVjAQCNIlGCBbbRWbbKs">> = iolist_to_binary(re:replace("bbx","(a(?i)bc|BB)x","ViVjAQCNIlGCB\\1RW\\1Ks",[global])),
    <<"cBBxBByBBx">> = iolist_to_binary(re:replace("BBx","(a(?i)bc|BB)x","c&\\1y&",[])),
    <<"cBBxBByBBx">> = iolist_to_binary(re:replace("BBx","(a(?i)bc|BB)x","c&\\1y&",[global])),
    <<"abcX">> = iolist_to_binary(re:replace("abcX","(a(?i)bc|BB)x","U",[])),
    <<"abcX">> = iolist_to_binary(re:replace("abcX","(a(?i)bc|BB)x","U",[global])),
    <<"aBCX">> = iolist_to_binary(re:replace("aBCX","(a(?i)bc|BB)x","\\1qT\\1bjyP\\1\\1Ki\\1iMujiN",[])),
    <<"aBCX">> = iolist_to_binary(re:replace("aBCX","(a(?i)bc|BB)x","\\1qT\\1bjyP\\1\\1Ki\\1iMujiN",[global])),
    <<"bbX">> = iolist_to_binary(re:replace("bbX","(a(?i)bc|BB)x","PLae\\1JqVIra&oco",[])),
    <<"bbX">> = iolist_to_binary(re:replace("bbX","(a(?i)bc|BB)x","PLae\\1JqVIra&oco",[global])),
    <<"BBX">> = iolist_to_binary(re:replace("BBX","(a(?i)bc|BB)x","GsAhcAq&HmjdSm\\1K&t",[])),
    <<"BBX">> = iolist_to_binary(re:replace("BBX","(a(?i)bc|BB)x","GsAhcAq&HmjdSm\\1K&t",[global])),
    <<"jMnYwcUacqacDac">> = iolist_to_binary(re:replace("ac","^([ab](?i)[cd]|[ef])","jMnYwcU\\1q\\1D\\1",[])),
    <<"jMnYwcUacqacDac">> = iolist_to_binary(re:replace("ac","^([ab](?i)[cd]|[ef])","jMnYwcU\\1q\\1D\\1",[global])),
    <<"BaCaCaCfcBaCIWxCjSaCliri">> = iolist_to_binary(re:replace("aC","^([ab](?i)[cd]|[ef])","B&\\1\\1fcB\\1IWxCjS&liri",[])),
    <<"BaCaCaCfcBaCIWxCjSaCliri">> = iolist_to_binary(re:replace("aC","^([ab](?i)[cd]|[ef])","B&\\1\\1fcB\\1IWxCjS&liri",[global])),
    <<"wNbDvbDem">> = iolist_to_binary(re:replace("bD","^([ab](?i)[cd]|[ef])","wN&v\\1em",[])),
    <<"wNbDvbDem">> = iolist_to_binary(re:replace("bD","^([ab](?i)[cd]|[ef])","wN&v\\1em",[global])),
    <<"oXlephant">> = iolist_to_binary(re:replace("elephant","^([ab](?i)[cd]|[ef])","oX",[])),
    <<"oXlephant">> = iolist_to_binary(re:replace("elephant","^([ab](?i)[cd]|[ef])","oX",[global])),
    <<"EjEqBEBjEiurope">> = iolist_to_binary(re:replace("Europe","^([ab](?i)[cd]|[ef])","Ej\\1qB&Bj\\1i",[])),
    <<"EjEqBEBjEiurope">> = iolist_to_binary(re:replace("Europe","^([ab](?i)[cd]|[ef])","Ej\\1qB&Bj\\1i",[global])),
    <<"frog">> = iolist_to_binary(re:replace("frog","^([ab](?i)[cd]|[ef])","\\1",[])),
    <<"frog">> = iolist_to_binary(re:replace("frog","^([ab](?i)[cd]|[ef])","\\1",[global])),
    <<"rarance">> = iolist_to_binary(re:replace("France","^([ab](?i)[cd]|[ef])","ra",[])),
    <<"rarance">> = iolist_to_binary(re:replace("France","^([ab](?i)[cd]|[ef])","ra",[global])),
    <<"Africa">> = iolist_to_binary(re:replace("Africa","^([ab](?i)[cd]|[ef])","EHLgXekX",[])),
    <<"Africa">> = iolist_to_binary(re:replace("Africa","^([ab](?i)[cd]|[ef])","EHLgXekX",[global])),
    <<"rababKababrcuwyQBhDabRgB">> = iolist_to_binary(re:replace("ab","^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)","r&&K&\\1rcuwyQBhD\\1RgB",[])),
    <<"rababKababrcuwyQBhDabRgB">> = iolist_to_binary(re:replace("ab","^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)","r&&K&\\1rcuwyQBhD\\1RgB",[global])),
    <<"DMaBdbraBdBdk">> = iolist_to_binary(re:replace("aBd","^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)","DM\\1br\\1Bdk",[])),
    <<"DMaBdbraBdBdk">> = iolist_to_binary(re:replace("aBd","^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)","DM\\1br\\1Bdk",[global])),
    <<"XeCprJuxyqUwxyAfxyxy">> = iolist_to_binary(re:replace("xy","^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)","XeCprJu&qUw\\1Af&&",[])),
    <<"XeCprJuxyqUwxyAfxyxy">> = iolist_to_binary(re:replace("xy","^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)","XeCprJu&qUw\\1Af&&",[global])),
    <<"rxYjcw">> = iolist_to_binary(re:replace("xY","^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)","r\\1jcw",[])),
    <<"rxYjcw">> = iolist_to_binary(re:replace("xY","^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)","r\\1jcw",[global])),
    <<"zusowFJzEGzMYMebra">> = iolist_to_binary(re:replace("zebra","^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)","\\1usowFJ\\1EG\\1MYM",[])),
    <<"zusowFJzEGzMYMebra">> = iolist_to_binary(re:replace("zebra","^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)","\\1usowFJ\\1EG\\1MYM",[global])),
    <<"AZFZtlJambesi">> = iolist_to_binary(re:replace("Zambesi","^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)","A&F&tlJ",[])),
    <<"AZFZtlJambesi">> = iolist_to_binary(re:replace("Zambesi","^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)","A&F&tlJ",[global])),
    <<"aCD">> = iolist_to_binary(re:replace("aCD","^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)","iX",[])),
    <<"aCD">> = iolist_to_binary(re:replace("aCD","^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)","iX",[global])),
    <<"XY">> = iolist_to_binary(re:replace("XY","^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)","j&&J\\1&I",[])),
    <<"XY">> = iolist_to_binary(re:replace("XY","^(ab|a(?i)[b-c](?m-i)d|x(?i)y|z)","j&&J\\1&I",[global])),
    <<"foo
kjlukbPhbarsuCghlveb">> = iolist_to_binary(re:replace("foo
bar","(?<=foo\\n)^bar","kj\\1lukbPh&su\\1Cghlveb",[multiline])),
    <<"foo
kjlukbPhbarsuCghlveb">> = iolist_to_binary(re:replace("foo
bar","(?<=foo\\n)^bar","kj\\1lukbPh&su\\1Cghlveb",[multiline,global])),
    <<"bar">> = iolist_to_binary(re:replace("bar","(?<=foo\\n)^bar","uXqdQvfv&\\1tC\\1ipRP",[multiline])),
    <<"bar">> = iolist_to_binary(re:replace("bar","(?<=foo\\n)^bar","uXqdQvfv&\\1tC\\1ipRP",[multiline,global])),
    <<"baz
bar">> = iolist_to_binary(re:replace("baz
bar","(?<=foo\\n)^bar","poYUMCLsWcR\\1fr\\1X\\1",[multiline])),
    <<"baz
bar">> = iolist_to_binary(re:replace("baz
bar","(?<=foo\\n)^bar","poYUMCLsWcR\\1fr\\1X\\1",[multiline,global])),
    <<"barEbazihCGRgMPqq">> = iolist_to_binary(re:replace("barbaz","(?<=(?<!foo)bar)baz","E&ihCGRgMPqq\\1",[])),
    <<"barEbazihCGRgMPqq">> = iolist_to_binary(re:replace("barbaz","(?<=(?<!foo)bar)baz","E&ihCGRgMPqq\\1",[global])),
    <<"barbarQRobazSSbazbaz">> = iolist_to_binary(re:replace("barbarbaz","(?<=(?<!foo)bar)baz","QRo&SS&&",[])),
    <<"barbarQRobazSSbazbaz">> = iolist_to_binary(re:replace("barbarbaz","(?<=(?<!foo)bar)baz","QRo&SS&&",[global])),
    <<"koobarDk">> = iolist_to_binary(re:replace("koobarbaz","(?<=(?<!foo)bar)baz","D\\1k\\1",[])),
    <<"koobarDk">> = iolist_to_binary(re:replace("koobarbaz","(?<=(?<!foo)bar)baz","D\\1k\\1",[global])),
    <<"baz">> = iolist_to_binary(re:replace("baz","(?<=(?<!foo)bar)baz","soL&R\\1GSAmJChxOln",[])),
    <<"baz">> = iolist_to_binary(re:replace("baz","(?<=(?<!foo)bar)baz","soL&R\\1GSAmJChxOln",[global])),
    <<"foobarbaz">> = iolist_to_binary(re:replace("foobarbaz","(?<=(?<!foo)bar)baz","y&e",[])),
    <<"foobarbaz">> = iolist_to_binary(re:replace("foobarbaz","(?<=(?<!foo)bar)baz","y&e",[global])),
    <<"kaaaaaanSruMXTFCEa">> = iolist_to_binary(re:replace("aaaaa","^(a\\1?){4}$","k\\1&nSruMXTFCE\\1",[])),
    <<"kaaaaaanSruMXTFCEa">> = iolist_to_binary(re:replace("aaaaa","^(a\\1?){4}$","k\\1&nSruMXTFCE\\1",[global])),
    <<"ayaanviaaaaaaacaaaaaaaYCXYPUdaaaaaaaHi">> = iolist_to_binary(re:replace("aaaaaaa","^(a\\1?){4}$","\\1y\\1\\1nvi&c&YCXYPUd&Hi",[])),
    <<"ayaanviaaaaaaacaaaaaaaYCXYPUdaaaaaaaHi">> = iolist_to_binary(re:replace("aaaaaaa","^(a\\1?){4}$","\\1y\\1\\1nvi&c&YCXYPUd&Hi",[global])),
    <<"GOpaaaaaaaaaabyaaaauUbSQjaaaaaaaaaaV">> = iolist_to_binary(re:replace("aaaaaaaaaa","^(a\\1?){4}$","GOp&by\\1uUbSQj&V",[])),
    <<"GOpaaaaaaaaaabyaaaauUbSQjaaaaaaaaaaV">> = iolist_to_binary(re:replace("aaaaaaaaaa","^(a\\1?){4}$","GOp&by\\1uUbSQj&V",[global])),
    <<"a">> = iolist_to_binary(re:replace("a","^(a\\1?){4}$","U",[])),
    <<"a">> = iolist_to_binary(re:replace("a","^(a\\1?){4}$","U",[global])),
    <<"aa">> = iolist_to_binary(re:replace("aa","^(a\\1?){4}$","NglUgPv\\1IB&\\1XMXPO",[])),
    <<"aa">> = iolist_to_binary(re:replace("aa","^(a\\1?){4}$","NglUgPv\\1IB&\\1XMXPO",[global])),
    <<"aaa">> = iolist_to_binary(re:replace("aaa","^(a\\1?){4}$","&tLnp",[])),
    <<"aaa">> = iolist_to_binary(re:replace("aaa","^(a\\1?){4}$","&tLnp",[global])),
    <<"aaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaa","^(a\\1?){4}$","vF",[])),
    <<"aaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaa","^(a\\1?){4}$","vF",[global])),
    <<"aaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaa","^(a\\1?){4}$","j\\1xp&mKu\\1HHgUS&IE&",[])),
    <<"aaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaa","^(a\\1?){4}$","j\\1xp&mKu\\1HHgUS&IE&",[global])),
    <<"aaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaa","^(a\\1?){4}$","yi\\1IibTMat&Rkn",[])),
    <<"aaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaa","^(a\\1?){4}$","yi\\1IibTMat&Rkn",[global])),
    <<"aaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaa","^(a\\1?){4}$","ruXsFS&L&b\\1adX",[])),
    <<"aaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaa","^(a\\1?){4}$","ruXsFS&L&b\\1adX",[global])),
    <<"aaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaa","^(a\\1?){4}$","kCb",[])),
    <<"aaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaa","^(a\\1?){4}$","kCb",[global])),
    <<"aaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaa","^(a\\1?){4}$","ufsBIAN\\1",[])),
    <<"aaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaa","^(a\\1?){4}$","ufsBIAN\\1",[global])),
    <<"aaaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaa","^(a\\1?){4}$","V\\1\\1ECNL\\1Xf",[])),
    <<"aaaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaa","^(a\\1?){4}$","V\\1\\1ECNL\\1Xf",[global])),
    <<"aaaaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaaa","^(a\\1?){4}$","PBNukCrgiybP",[])),
    <<"aaaaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaaa","^(a\\1?){4}$","PBNukCrgiybP",[global])),
    ok.
run14() ->
    <<"eFGTeaqaaaahFWnaaaa">> = iolist_to_binary(re:replace("aaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","eFGTe\\1q&hFWn&",[])),
    <<"eFGTeaqaaaahFWnaaaa">> = iolist_to_binary(re:replace("aaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","eFGTe\\1q&hFWn&",[global])),
    <<"GQ">> = iolist_to_binary(re:replace("aaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","GQ",[])),
    <<"GQ">> = iolist_to_binary(re:replace("aaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","GQ",[global])),
    <<"taaaaaa">> = iolist_to_binary(re:replace("aaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","t&",[])),
    <<"taaaaaa">> = iolist_to_binary(re:replace("aaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","t&",[global])),
    <<"PaHcMWBmFjXXO">> = iolist_to_binary(re:replace("aaaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","PaHcMWBmFjXXO",[])),
    <<"PaHcMWBmFjXXO">> = iolist_to_binary(re:replace("aaaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","PaHcMWBmFjXXO",[global])),
    <<"Rau">> = iolist_to_binary(re:replace("aaaaaaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","R\\1u",[])),
    <<"Rau">> = iolist_to_binary(re:replace("aaaaaaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","R\\1u",[global])),
    <<"a">> = iolist_to_binary(re:replace("a","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","geop\\1&",[])),
    <<"a">> = iolist_to_binary(re:replace("a","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","geop\\1&",[global])),
    <<"aa">> = iolist_to_binary(re:replace("aa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","JTHjDKqA",[])),
    <<"aa">> = iolist_to_binary(re:replace("aa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","JTHjDKqA",[global])),
    <<"aaa">> = iolist_to_binary(re:replace("aaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","&GvS\\1&\\1tBh\\1\\1",[])),
    <<"aaa">> = iolist_to_binary(re:replace("aaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","&GvS\\1&\\1tBh\\1\\1",[global])),
    <<"aaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","iCveQd\\1W&",[])),
    <<"aaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","iCveQd\\1W&",[global])),
    <<"aaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","thGaLpke&&mlDI",[])),
    <<"aaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","thGaLpke&&mlDI",[global])),
    <<"aaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","eIP\\1xN",[])),
    <<"aaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","eIP\\1xN",[global])),
    <<"aaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","KKqbLs",[])),
    <<"aaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","KKqbLs",[global])),
    <<"aaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","&jYN&OlnrIjJAVLKO",[])),
    <<"aaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","&jYN&OlnrIjJAVLKO",[global])),
    <<"aaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","PYINshqOHf&&awstrl\\1&",[])),
    <<"aaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","PYINshqOHf&&awstrl\\1&",[global])),
    <<"aaaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","HqueiI",[])),
    <<"aaaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","HqueiI",[global])),
    <<"aaaaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","MRJcrKPN\\1hmh",[])),
    <<"aaaaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaaa","^(a\\1?)(a\\1?)(a\\2?)(a\\3?)$","MRJcrKPN\\1hmh",[global])),
    <<"">> = iolist_to_binary(re:replace("abc","abc","\\1",[])),
    <<"">> = iolist_to_binary(re:replace("abc","abc","\\1",[global])),
    <<"xKVSabclXpy">> = iolist_to_binary(re:replace("xabcy","abc","KVS&lXp",[])),
    <<"xKVSabclXpy">> = iolist_to_binary(re:replace("xabcy","abc","KVS&lXp",[global])),
    <<"abgrKSEVpabc">> = iolist_to_binary(re:replace("ababc","abc","grKSEVp&",[])),
    <<"abgrKSEVpabc">> = iolist_to_binary(re:replace("ababc","abc","grKSEVp&",[global])),
    <<"xbc">> = iolist_to_binary(re:replace("xbc","abc","d\\1q\\1qQpRmEN&KbSKW&x",[])),
    <<"xbc">> = iolist_to_binary(re:replace("xbc","abc","d\\1q\\1qQpRmEN&KbSKW&x",[global])),
    <<"axc">> = iolist_to_binary(re:replace("axc","abc","WCdJ&ih",[])),
    <<"axc">> = iolist_to_binary(re:replace("axc","abc","WCdJ&ih",[global])),
    <<"abx">> = iolist_to_binary(re:replace("abx","abc","Yj\\1UDq&fbyqfUOv",[])),
    <<"abx">> = iolist_to_binary(re:replace("abx","abc","Yj\\1UDq&fbyqfUOv",[global])),
    <<"DuaOoTKn">> = iolist_to_binary(re:replace("abc","ab*c","DuaOoTKn\\1",[])),
    <<"DuaOoTKn">> = iolist_to_binary(re:replace("abc","ab*c","DuaOoTKn\\1",[global])),
    <<"lUAkQQE">> = iolist_to_binary(re:replace("abc","ab*bc","lUAkQQE",[])),
    <<"lUAkQQE">> = iolist_to_binary(re:replace("abc","ab*bc","lUAkQQE",[global])),
    <<"e">> = iolist_to_binary(re:replace("abbc","ab*bc","e",[])),
    <<"e">> = iolist_to_binary(re:replace("abbc","ab*bc","e",[global])),
    <<"LOeabbbbcRabbbbcxkWabbbbcFSngiabbbbcdabbbbcDm">> = iolist_to_binary(re:replace("abbbbc","ab*bc","LOe&R&xkW&FSngi&d&Dm",[])),
    <<"LOeabbbbcRabbbbcxkWabbbbcFSngiabbbbcdabbbbcDm">> = iolist_to_binary(re:replace("abbbbc","ab*bc","LOe&R&xkW&FSngi&d&Dm",[global])),
    <<"IFSvaLmRAwsbbbbc">> = iolist_to_binary(re:replace("abbbbc",".{1}","IFSvaLmRAws",[])),
    <<"IFSvaLmRAwsIFSvaLmRAwsIFSvaLmRAwsIFSvaLmRAwsIFSvaLmRAwsIFSvaLmRAws">> = iolist_to_binary(re:replace("abbbbc",".{1}","IFSvaLmRAws",[global])),
    <<"DQUrabbbabbbUYwApYRiYSqabbbbc">> = iolist_to_binary(re:replace("abbbbc",".{3,4}","DQUr\\1&&\\1UYwApYRiYSq&",[])),
    <<"DQUrabbbabbbUYwApYRiYSqabbbbc">> = iolist_to_binary(re:replace("abbbbc",".{3,4}","DQUr\\1&&\\1UYwApYRiYSq&",[global])),
    <<"pfGYlabbbbcdNpJmOaQHl">> = iolist_to_binary(re:replace("abbbbc","ab{0,}bc","pfGYl&dNpJm\\1OaQHl",[])),
    <<"pfGYlabbbbcdNpJmOaQHl">> = iolist_to_binary(re:replace("abbbbc","ab{0,}bc","pfGYl&dNpJm\\1OaQHl",[global])),
    <<"IHNVcUg">> = iolist_to_binary(re:replace("abbc","ab+bc","\\1IHNVcUg",[])),
    <<"IHNVcUg">> = iolist_to_binary(re:replace("abbc","ab+bc","\\1IHNVcUg",[global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","ab+bc","N",[])),
    <<"abc">> = iolist_to_binary(re:replace("abc","ab+bc","N",[global])),
    <<"abq">> = iolist_to_binary(re:replace("abq","ab+bc","dxkm&dmRGQJb",[])),
    <<"abq">> = iolist_to_binary(re:replace("abq","ab+bc","dxkm&dmRGQJb",[global])),
    <<"urCYmabbbbcYvabbbbcF">> = iolist_to_binary(re:replace("abbbbc","ab+bc","urCY\\1m&Yv&F",[])),
    <<"urCYmabbbbcYvabbbbcF">> = iolist_to_binary(re:replace("abbbbc","ab+bc","urCY\\1m&Yv&F",[global])),
    <<"W">> = iolist_to_binary(re:replace("abbbbc","ab{1,}bc","W\\1",[])),
    <<"W">> = iolist_to_binary(re:replace("abbbbc","ab{1,}bc","W\\1",[global])),
    <<"LocabbbbcFabbbbcvgabbbbc">> = iolist_to_binary(re:replace("abbbbc","ab{1,3}bc","Loc&F&vg&",[])),
    <<"LocabbbbcFabbbbcvgabbbbc">> = iolist_to_binary(re:replace("abbbbc","ab{1,3}bc","Loc&F&vg&",[global])),
    <<"tWIlHMJfBx">> = iolist_to_binary(re:replace("abbbbc","ab{3,4}bc","tWIlHMJ\\1\\1fBx\\1",[])),
    <<"tWIlHMJfBx">> = iolist_to_binary(re:replace("abbbbc","ab{3,4}bc","tWIlHMJ\\1\\1fBx\\1",[global])),
    <<"abq">> = iolist_to_binary(re:replace("abq","ab{4,5}bc","Io\\1ytBG&",[])),
    <<"abq">> = iolist_to_binary(re:replace("abq","ab{4,5}bc","Io\\1ytBG&",[global])),
    <<"abbbbc">> = iolist_to_binary(re:replace("abbbbc","ab{4,5}bc","EPDyK",[])),
    <<"abbbbc">> = iolist_to_binary(re:replace("abbbbc","ab{4,5}bc","EPDyK",[global])),
    <<"ovFfXEabbcxcDncD">> = iolist_to_binary(re:replace("abbc","ab?bc","ovFfXE\\1&x\\1cDncD",[])),
    <<"ovFfXEabbcxcDncD">> = iolist_to_binary(re:replace("abbc","ab?bc","ovFfXE\\1&x\\1cDncD",[global])),
    <<"DJadEBdkEMaabcRtCWFGE">> = iolist_to_binary(re:replace("abc","ab?bc","DJadEBdkEMa&RtCWFGE",[])),
    <<"DJadEBdkEMaabcRtCWFGE">> = iolist_to_binary(re:replace("abc","ab?bc","DJadEBdkEMa&RtCWFGE",[global])),
    <<"Tdgo">> = iolist_to_binary(re:replace("abc","ab{0,1}bc","T\\1dgo",[])),
    <<"Tdgo">> = iolist_to_binary(re:replace("abc","ab{0,1}bc","T\\1dgo",[global])),
    <<"abcabcrvd">> = iolist_to_binary(re:replace("abc","ab?c","&&rvd",[])),
    <<"abcabcrvd">> = iolist_to_binary(re:replace("abc","ab?c","&&rvd",[global])),
    <<"JEKgTqabcgvK">> = iolist_to_binary(re:replace("abc","ab{0,1}c","JEKgT\\1q&gvK",[])),
    <<"JEKgTqabcgvK">> = iolist_to_binary(re:replace("abc","ab{0,1}c","JEKgT\\1q&gvK",[global])),
    <<"UPWVy">> = iolist_to_binary(re:replace("abc","^abc$","UP\\1WVy",[])),
    <<"UPWVy">> = iolist_to_binary(re:replace("abc","^abc$","UP\\1WVy",[global])),
    <<"abbbbc">> = iolist_to_binary(re:replace("abbbbc","^abc$","\\1AbO&omfYRdL\\1Au&DFG\\1",[])),
    <<"abbbbc">> = iolist_to_binary(re:replace("abbbbc","^abc$","\\1AbO&omfYRdL\\1Au&DFG\\1",[global])),
    <<"abcc">> = iolist_to_binary(re:replace("abcc","^abc$","v\\1pmFxwVLtNDmRV",[])),
    <<"abcc">> = iolist_to_binary(re:replace("abcc","^abc$","v\\1pmFxwVLtNDmRV",[global])),
    ok.
run15() ->
    <<"yVlokOKtokQabcKSabcc">> = iolist_to_binary(re:replace("abcc","^abc","yVlokOK\\1\\1tok\\1\\1Q&KS&",[])),
    <<"yVlokOKtokQabcKSabcc">> = iolist_to_binary(re:replace("abcc","^abc","yVlokOK\\1\\1tok\\1\\1Q&KS&",[global])),
    <<"aeabcMcDykUabc">> = iolist_to_binary(re:replace("aabc","abc$","e\\1&McDykU\\1&",[])),
    <<"aeabcMcDykUabc">> = iolist_to_binary(re:replace("aabc","abc$","e\\1&McDykU\\1&",[global])),
    <<"aabcd">> = iolist_to_binary(re:replace("aabcd","abc$","QEARo&c",[])),
    <<"aabcd">> = iolist_to_binary(re:replace("aabcd","abc$","QEARo&c",[global])),
    <<"KFGQOVabc">> = iolist_to_binary(re:replace("abc","^","KFG&QO\\1V",[])),
    <<"KFGQOVabc">> = iolist_to_binary(re:replace("abc","^","KFG&QO\\1V",[global])),
    <<"abcbhTlpTdfe">> = iolist_to_binary(re:replace("abc","$","bhTlp\\1Tdfe\\1",[])),
    <<"abcbhTlpTdfe">> = iolist_to_binary(re:replace("abc","$","bhTlp\\1Tdfe\\1",[global])),
    <<"PJllegKeFhjiLabc">> = iolist_to_binary(re:replace("abc","a.c","PJllegKeFh\\1j\\1iL&",[])),
    <<"PJllegKeFhjiLabc">> = iolist_to_binary(re:replace("abc","a.c","PJllegKeFh\\1j\\1iL&",[global])),
    <<"gUuqhRhIO">> = iolist_to_binary(re:replace("axc","a.c","\\1g\\1U\\1\\1uqhRh\\1IO",[])),
    <<"gUuqhRhIO">> = iolist_to_binary(re:replace("axc","a.c","\\1g\\1U\\1\\1uqhRh\\1IO",[global])),
    <<"QVEsbJSBcadjBEjT">> = iolist_to_binary(re:replace("axyzc","a.*c","QVEsbJSBcadjB\\1EjT\\1",[])),
    <<"QVEsbJSBcadjBEjT">> = iolist_to_binary(re:replace("axyzc","a.*c","QVEsbJSBcadjB\\1EjT\\1",[global])),
    <<"abdjWabdDjOsitnxUkGd">> = iolist_to_binary(re:replace("abd","a[bc]d","&j\\1W&DjOsitnxUkGd",[])),
    <<"abdjWabdDjOsitnxUkGd">> = iolist_to_binary(re:replace("abd","a[bc]d","&j\\1W&DjOsitnxUkGd",[global])),
    <<"axyzd">> = iolist_to_binary(re:replace("axyzd","a[bc]d","&mpYotei",[])),
    <<"axyzd">> = iolist_to_binary(re:replace("axyzd","a[bc]d","&mpYotei",[global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","a[bc]d","xwN",[])),
    <<"abc">> = iolist_to_binary(re:replace("abc","a[bc]d","xwN",[global])),
    <<"MHqWbacetnace">> = iolist_to_binary(re:replace("ace","a[b-d]e","MHqWb\\1&\\1\\1tn&",[])),
    <<"MHqWbacetnace">> = iolist_to_binary(re:replace("ace","a[b-d]e","MHqWb\\1&\\1\\1tn&",[global])),
    <<"aDgNMNfEyu">> = iolist_to_binary(re:replace("aac","a[b-d]","DgNM\\1NfEyu",[])),
    <<"aDgNMNfEyu">> = iolist_to_binary(re:replace("aac","a[b-d]","DgNM\\1NfEyu",[global])),
    <<"dJbsa-PvrBmxnM">> = iolist_to_binary(re:replace("a-","a[-b]","dJbs&PvrBmxnM",[])),
    <<"dJbsa-PvrBmxnM">> = iolist_to_binary(re:replace("a-","a[-b]","dJbs&PvrBmxnM",[global])),
    <<"WdMja-nqA">> = iolist_to_binary(re:replace("a-","a[b-]","WdMj&nqA\\1",[])),
    <<"WdMja-nqA">> = iolist_to_binary(re:replace("a-","a[b-]","WdMj&nqA\\1",[global])),
    <<"KBa]DAfa]MDQfqvJdYVQ">> = iolist_to_binary(re:replace("a]","a]","KB&DA\\1f&M\\1DQfqvJdYVQ",[])),
    <<"KBa]DAfa]MDQfqvJdYVQ">> = iolist_to_binary(re:replace("a]","a]","KB&DA\\1f&M\\1DQfqvJdYVQ",[global])),
    <<"fKNQlDdcmBPa]bCUa]b">> = iolist_to_binary(re:replace("a]b","a[]]b","fKN\\1\\1QlDdcmBP&C\\1U&\\1",[])),
    <<"fKNQlDdcmBPa]bCUa]b">> = iolist_to_binary(re:replace("a]b","a[]]b","fKN\\1\\1QlDdcmBP&C\\1U&\\1",[global])),
    <<"aNaedpfmffrWLfaeddaedm">> = iolist_to_binary(re:replace("aed","a[^bc]d","aN&pf\\1\\1\\1mf\\1frWLf&d&m",[])),
    <<"aNaedpfmffrWLfaeddaedm">> = iolist_to_binary(re:replace("aed","a[^bc]d","aN&pf\\1\\1\\1mf\\1frWLf&d&m",[global])),
    <<"abd">> = iolist_to_binary(re:replace("abd","a[^bc]d","NQ&IvkhD&RYe\\1\\1\\1",[])),
    <<"abd">> = iolist_to_binary(re:replace("abd","a[^bc]d","NQ&IvkhD&RYe\\1\\1\\1",[global])),
    <<"abd">> = iolist_to_binary(re:replace("abd","a[^bc]d","RV\\1lCqK\\1k",[])),
    <<"abd">> = iolist_to_binary(re:replace("abd","a[^bc]d","RV\\1lCqK\\1k",[global])),
    <<"WXSaOsXBjgadcx">> = iolist_to_binary(re:replace("adc","a[^-b]c","W\\1X\\1S\\1aOsXBj\\1g&x",[])),
    <<"WXSaOsXBjgadcx">> = iolist_to_binary(re:replace("adc","a[^-b]c","W\\1X\\1S\\1aOsXBj\\1g&x",[global])),
    <<"LogM">> = iolist_to_binary(re:replace("adc","a[^]b]c","Lo\\1gM",[])),
    <<"LogM">> = iolist_to_binary(re:replace("adc","a[^]b]c","Lo\\1gM",[global])),
    <<"bAkcTa-camca-cx">> = iolist_to_binary(re:replace("a-c","a[^]b]c","bAk\\1cT&amc&x",[])),
    <<"bAkcTa-camca-cx">> = iolist_to_binary(re:replace("a-c","a[^]b]c","bAk\\1cT&amc&x",[global])),
    <<"a]c">> = iolist_to_binary(re:replace("a]c","a[^]b]c","WJe&",[])),
    <<"a]c">> = iolist_to_binary(re:replace("a]c","a[^]b]c","WJe&",[global])),
    <<"HPaOIKerWiY-">> = iolist_to_binary(re:replace("a-","\\ba\\b","HP&OIKerWi\\1Y",[])),
    <<"HPaOIKerWiY-">> = iolist_to_binary(re:replace("a-","\\ba\\b","HP&OIKerWi\\1Y",[global])),
    <<"-OgUOq">> = iolist_to_binary(re:replace("-a","\\ba\\b","\\1OgUOq",[])),
    <<"-OgUOq">> = iolist_to_binary(re:replace("-a","\\ba\\b","\\1OgUOq",[global])),
    <<"-UKulakpav-">> = iolist_to_binary(re:replace("-a-","\\ba\\b","UKul&kp&v",[])),
    <<"-UKulakpav-">> = iolist_to_binary(re:replace("-a-","\\ba\\b","UKul&kp&v",[global])),
    <<"xy">> = iolist_to_binary(re:replace("xy","\\by\\b","uKOqa\\1ex&p\\1sJydJM\\1hE",[])),
    <<"xy">> = iolist_to_binary(re:replace("xy","\\by\\b","uKOqa\\1ex&p\\1sJydJM\\1hE",[global])),
    <<"yz">> = iolist_to_binary(re:replace("yz","\\by\\b","rRN\\1",[])),
    <<"yz">> = iolist_to_binary(re:replace("yz","\\by\\b","rRN\\1",[global])),
    <<"xyz">> = iolist_to_binary(re:replace("xyz","\\by\\b","oJ",[])),
    <<"xyz">> = iolist_to_binary(re:replace("xyz","\\by\\b","oJ",[global])),
    <<"a-">> = iolist_to_binary(re:replace("a-","\\Ba\\B","&R",[])),
    <<"a-">> = iolist_to_binary(re:replace("a-","\\Ba\\B","&R",[global])),
    <<"-a">> = iolist_to_binary(re:replace("-a","\\Ba\\B","T&",[])),
    <<"-a">> = iolist_to_binary(re:replace("-a","\\Ba\\B","T&",[global])),
    <<"-a-">> = iolist_to_binary(re:replace("-a-","\\Ba\\B","whvhAvFn",[])),
    <<"-a-">> = iolist_to_binary(re:replace("-a-","\\Ba\\B","whvhAvFn",[global])),
    ok.
run16() ->
    <<"xNbyvemA">> = iolist_to_binary(re:replace("xy","\\By\\b","Nb&vemA",[])),
    <<"xNbyvemA">> = iolist_to_binary(re:replace("xy","\\By\\b","Nb&vemA",[global])),
    <<"sGdPdEQYOz">> = iolist_to_binary(re:replace("yz","\\by\\B","s\\1GdP\\1\\1dEQ\\1YO",[])),
    <<"sGdPdEQYOz">> = iolist_to_binary(re:replace("yz","\\by\\B","s\\1GdP\\1\\1dEQ\\1YO",[global])),
    <<"xoFBOVObz">> = iolist_to_binary(re:replace("xyz","\\By\\B","oFBOVOb",[])),
    <<"xoFBOVObz">> = iolist_to_binary(re:replace("xyz","\\By\\B","oFBOVOb",[global])),
    <<"taotHFLuTEAHCbR">> = iolist_to_binary(re:replace("a","\\w","t&\\1otHFLuTEAHCbR",[])),
    <<"taotHFLuTEAHCbR">> = iolist_to_binary(re:replace("a","\\w","t&\\1otHFLuTEAHCbR",[global])),
    <<"B-J">> = iolist_to_binary(re:replace("-","\\W","B&\\1J",[])),
    <<"B-J">> = iolist_to_binary(re:replace("-","\\W","B&\\1J",[global])),
    <<"a">> = iolist_to_binary(re:replace("a","\\W","v&v\\1M&nOy",[])),
    <<"a">> = iolist_to_binary(re:replace("a","\\W","v&v\\1M&nOy",[global])),
    <<"HSa bge">> = iolist_to_binary(re:replace("a b","a\\sb","HS&ge",[])),
    <<"HSa bge">> = iolist_to_binary(re:replace("a b","a\\sb","HS&ge",[global])),
    <<"KmuWa-bkIQYq">> = iolist_to_binary(re:replace("a-b","a\\Sb","KmuW&kIQYq",[])),
    <<"KmuWa-bkIQYq">> = iolist_to_binary(re:replace("a-b","a\\Sb","KmuW&kIQYq",[global])),
    <<"a b">> = iolist_to_binary(re:replace("a b","a\\Sb","qww\\1&EncmL\\1JNGO&O",[])),
    <<"a b">> = iolist_to_binary(re:replace("a b","a\\Sb","qww\\1&EncmL\\1JNGO&O",[global])),
    <<"uVBupM1DBwfMmnlf1">> = iolist_to_binary(re:replace("1","\\d","uVBup\\1M&D\\1\\1BwfMmnlf&",[])),
    <<"uVBupM1DBwfMmnlf1">> = iolist_to_binary(re:replace("1","\\d","uVBup\\1M&D\\1\\1BwfMmnlf&",[global])),
    <<"cOIQhxWWsF-nEAw">> = iolist_to_binary(re:replace("-","\\D","\\1cOIQhxWWs\\1F\\1&nEAw",[])),
    <<"cOIQhxWWsF-nEAw">> = iolist_to_binary(re:replace("-","\\D","\\1cOIQhxWWs\\1F\\1&nEAw",[global])),
    <<"1">> = iolist_to_binary(re:replace("1","\\D","h",[])),
    <<"1">> = iolist_to_binary(re:replace("1","\\D","h",[global])),
    <<"rWaXF">> = iolist_to_binary(re:replace("a","[\\w]","rW\\1&XF",[])),
    <<"rWaXF">> = iolist_to_binary(re:replace("a","[\\w]","rW\\1&XF",[global])),
    <<"wlBBH-G">> = iolist_to_binary(re:replace("-","[\\W]","wlBBH&G",[])),
    <<"wlBBH-G">> = iolist_to_binary(re:replace("-","[\\W]","wlBBH&G",[global])),
    <<"a">> = iolist_to_binary(re:replace("a","[\\W]","v\\1\\1yCoOg&",[])),
    <<"a">> = iolist_to_binary(re:replace("a","[\\W]","v\\1\\1yCoOg&",[global])),
    <<"sEBLg">> = iolist_to_binary(re:replace("a b","a[\\s]b","sEBLg",[])),
    <<"sEBLg">> = iolist_to_binary(re:replace("a b","a[\\s]b","sEBLg",[global])),
    <<"CxGBTma-bFa-baoxSvna-bIJa-bx">> = iolist_to_binary(re:replace("a-b","a[\\S]b","CxGBTm&F&aoxSvn&IJ&x",[])),
    <<"CxGBTma-bFa-baoxSvna-bIJa-bx">> = iolist_to_binary(re:replace("a-b","a[\\S]b","CxGBTm&F&aoxSvn&IJ&x",[global])),
    <<"a b">> = iolist_to_binary(re:replace("a b","a[\\S]b","tca\\1Q",[])),
    <<"a b">> = iolist_to_binary(re:replace("a b","a[\\S]b","tca\\1Q",[global])),
    <<"tSnco1">> = iolist_to_binary(re:replace("1","[\\d]","tSnco&",[])),
    <<"tSnco1">> = iolist_to_binary(re:replace("1","[\\d]","tSnco&",[global])),
    <<"dfo">> = iolist_to_binary(re:replace("-","[\\D]","dfo",[])),
    <<"dfo">> = iolist_to_binary(re:replace("-","[\\D]","dfo",[global])),
    <<"1">> = iolist_to_binary(re:replace("1","[\\D]","U",[])),
    <<"1">> = iolist_to_binary(re:replace("1","[\\D]","U",[global])),
    <<"NRWmeVkGqvPc">> = iolist_to_binary(re:replace("abc","ab|cd","NRWmeVkGqv\\1P",[])),
    <<"NRWmeVkGqvPc">> = iolist_to_binary(re:replace("abc","ab|cd","NRWmeVkGqv\\1P",[global])),
    <<"pcRabtawJMdMabKPNcd">> = iolist_to_binary(re:replace("abcd","ab|cd","pcR&ta\\1wJMdM&KPN",[])),
    <<"pcRabtawJMdMabKPNpcRcdtawJMdMcdKPN">> = iolist_to_binary(re:replace("abcd","ab|cd","pcR&ta\\1wJMdM&KPN",[global])),
    <<"djByCJtDSoefTHKBAMefy">> = iolist_to_binary(re:replace("def","()ef","jByCJtDS\\1o&THKBAM&y",[])),
    <<"djByCJtDSoefTHKBAMefy">> = iolist_to_binary(re:replace("def","()ef","jByCJtDS\\1o&THKBAM&y",[global])),
    <<"qsaEcHRVFjLsoOa(bfk">> = iolist_to_binary(re:replace("a(b","a\\(b","qsa\\1EcHRVFjLsoO&fk",[])),
    <<"qsaEcHRVFjLsoOa(bfk">> = iolist_to_binary(re:replace("a(b","a\\(b","qsa\\1EcHRVFjLsoO&fk",[global])),
    <<"rVqQArLvUabrlnI">> = iolist_to_binary(re:replace("ab","a\\(*b","r\\1\\1VqQArLvU&r\\1lnI",[])),
    <<"rVqQArLvUabrlnI">> = iolist_to_binary(re:replace("ab","a\\(*b","r\\1\\1VqQArLvU&r\\1lnI",[global])),
    <<"gh">> = iolist_to_binary(re:replace("a((b","a\\(*b","gh",[])),
    <<"gh">> = iolist_to_binary(re:replace("a((b","a\\(*b","gh",[global])),
    ok.
run17() ->
    <<"vdKYQDIVnwa\\ba\\bQWKBgh">> = iolist_to_binary(re:replace("a\\b","a\\\\b","vdKYQDIVnw&&QWKBgh",[])),
    <<"vdKYQDIVnwa\\ba\\bQWKBgh">> = iolist_to_binary(re:replace("a\\b","a\\\\b","vdKYQDIVnw&&QWKBgh",[global])),
    <<"FjVsAaaBbc">> = iolist_to_binary(re:replace("abc","((a))","FjVsA\\1&B",[])),
    <<"FjVsAaaBbc">> = iolist_to_binary(re:replace("abc","((a))","FjVsA\\1&B",[global])),
    <<"HgWqxfrraqYwT">> = iolist_to_binary(re:replace("abc","(a)b(c)","HgWqxfrr\\1qYwT",[])),
    <<"HgWqxfrraqYwT">> = iolist_to_binary(re:replace("abc","(a)b(c)","HgWqxfrr\\1qYwT",[global])),
    <<"aabbyjWsTDYmUlc">> = iolist_to_binary(re:replace("aabbabc","a+b+c","yjWsT\\1DYmUlc",[])),
    <<"aabbyjWsTDYmUlc">> = iolist_to_binary(re:replace("aabbabc","a+b+c","yjWsT\\1DYmUlc",[global])),
    <<"aabbxfcMrdAu">> = iolist_to_binary(re:replace("aabbabc","a{1,}b{1,}c","xfcMrdAu",[])),
    <<"aabbxfcMrdAu">> = iolist_to_binary(re:replace("aabbabc","a{1,}b{1,}c","xfcMrdAu",[global])),
    <<"BliCabcLQrUrabc">> = iolist_to_binary(re:replace("abcabc","a.+?c","\\1BliC&LQrU\\1r",[])),
    <<"BliCabcLQrUrBliCabcLQrUr">> = iolist_to_binary(re:replace("abcabc","a.+?c","\\1BliC&LQrU\\1r",[global])),
    <<"TeTeDbXabablbw">> = iolist_to_binary(re:replace("ab","(a+|b)*","TeTeD\\1X&&l\\1w",[])),
    <<"TeTeDbXabablbwTeTeDXlw">> = iolist_to_binary(re:replace("ab","(a+|b)*","TeTeD\\1X&&l\\1w",[global])),
    <<"HV">> = iolist_to_binary(re:replace("ab","(a+|b){0,}","HV",[])),
    <<"HVHV">> = iolist_to_binary(re:replace("ab","(a+|b){0,}","HV",[global])),
    <<"GmbabwlpUabOy">> = iolist_to_binary(re:replace("ab","(a+|b)+","Gm\\1&wlpU&Oy",[])),
    <<"GmbabwlpUabOy">> = iolist_to_binary(re:replace("ab","(a+|b)+","Gm\\1&wlpU&Oy",[global])),
    <<"snNvqcfbmxQbDRPIP">> = iolist_to_binary(re:replace("ab","(a+|b){1,}","snNvqcf\\1mxQ\\1DRPIP",[])),
    <<"snNvqcfbmxQbDRPIP">> = iolist_to_binary(re:replace("ab","(a+|b){1,}","snNvqcf\\1mxQ\\1DRPIP",[global])),
    <<"aRtbPoOkgRgQnokJdPb">> = iolist_to_binary(re:replace("ab","(a+|b)?","\\1RtbPoOkgRgQnokJdP",[])),
    <<"aRtbPoOkgRgQnokJdPbRtbPoOkgRgQnokJdPRtbPoOkgRgQnokJdP">> = iolist_to_binary(re:replace("ab","(a+|b)?","\\1RtbPoOkgRgQnokJdP",[global])),
    <<"aagBhaIaKaeSvanYhNTcb">> = iolist_to_binary(re:replace("ab","(a+|b){0,1}","&\\1gBh&I&K&eSv\\1nYhNTc",[])),
    <<"aagBhaIaKaeSvanYhNTcbbgBhbIbKbeSvbnYhNTcgBhIKeSvnYhNTc">> = iolist_to_binary(re:replace("ab","(a+|b){0,1}","&\\1gBh&I&K&eSv\\1nYhNTc",[global])),
    <<"O">> = iolist_to_binary(re:replace("cde","[^ab]*","\\1O",[])),
    <<"OO">> = iolist_to_binary(re:replace("cde","[^ab]*","\\1O",[global])),
    <<"b">> = iolist_to_binary(re:replace("b","abc","\\1&&",[])),
    <<"b">> = iolist_to_binary(re:replace("b","abc","\\1&&",[global])),
    <<"gbGDhPlvFnq">> = iolist_to_binary(re:replace("","a*","gbGDh\\1\\1\\1PlvFnq",[])),
    <<"gbGDhPlvFnq">> = iolist_to_binary(re:replace("","a*","gbGDh\\1\\1\\1PlvFnq",[global])),
    <<"occcnIbiYVyabbbcd">> = iolist_to_binary(re:replace("abbbcd","([abc])*d","o\\1\\1\\1nIbiYVy&",[])),
    <<"occcnIbiYVyabbbcd">> = iolist_to_binary(re:replace("abbbcd","([abc])*d","o\\1\\1\\1nIbiYVy&",[global])),
    <<"KaIGHABBJDNX">> = iolist_to_binary(re:replace("abcd","([abc])*bcd","K\\1IGHABBJDNX",[])),
    <<"KaIGHABBJDNX">> = iolist_to_binary(re:replace("abcd","([abc])*bcd","K\\1IGHABBJDNX",[global])),
    <<"ewvNlo">> = iolist_to_binary(re:replace("e","a|b|c|d|e","\\1&\\1wvNlo",[])),
    <<"ewvNlo">> = iolist_to_binary(re:replace("e","a|b|c|d|e","\\1&\\1wvNlo",[global])),
    <<"MMsqXpeLe">> = iolist_to_binary(re:replace("ef","(a|b|c|d|e)f","MMsqXp\\1L\\1",[])),
    <<"MMsqXpeLe">> = iolist_to_binary(re:replace("ef","(a|b|c|d|e)f","MMsqXp\\1L\\1",[global])),
    <<"abcdefgcblGbrYsIosd">> = iolist_to_binary(re:replace("abcdefg","abcd*efg","&\\1\\1cblGbrY\\1\\1sIosd",[])),
    <<"abcdefgcblGbrYsIosd">> = iolist_to_binary(re:replace("abcdefg","abcd*efg","&\\1\\1cblGbrY\\1\\1sIosd",[global])),
    ok.
run18() ->
    <<"xWyIfdabAyabbbz">> = iolist_to_binary(re:replace("xabyabbbz","ab*","WyI\\1\\1fd&A\\1",[])),
    <<"xWyIfdabAyWyIfdabbbAz">> = iolist_to_binary(re:replace("xabyabbbz","ab*","WyI\\1\\1fd&A\\1",[global])),
    <<"xhJaKOGfPanTbAyabbbz">> = iolist_to_binary(re:replace("xayabbbz","ab*","hJ&KOGfP&nTbA",[])),
    <<"xhJaKOGfPanTbAyhJabbbKOGfPabbbnTbAz">> = iolist_to_binary(re:replace("xayabbbz","ab*","hJ&KOGfP&nTbA",[global])),
    <<"abcdkBcdeaJcdpLD">> = iolist_to_binary(re:replace("abcde","(ab|cd)e","\\1kB&aJ\\1pLD",[])),
    <<"abcdkBcdeaJcdpLD">> = iolist_to_binary(re:replace("abcde","(ab|cd)e","\\1kB&aJ\\1pLD",[global])),
    <<"aadYLlnNBfn">> = iolist_to_binary(re:replace("hij","[abhgefdc]ij","a\\1adYLlnNBfn",[])),
    <<"aadYLlnNBfn">> = iolist_to_binary(re:replace("hij","[abhgefdc]ij","a\\1adYLlnNBfn",[global])),
    <<"abcdhefMn">> = iolist_to_binary(re:replace("abcdef","(abc|)ef","h&Mn",[])),
    <<"abcdhefMn">> = iolist_to_binary(re:replace("abcdef","(abc|)ef","h&Mn",[global])),
    <<"aFbcdbbcd">> = iolist_to_binary(re:replace("abcd","(a|b)c*d","F&\\1&",[])),
    <<"aFbcdbbcd">> = iolist_to_binary(re:replace("abcd","(a|b)c*d","F&\\1&",[global])),
    <<"igabcahVNoqXYakTDTBaqO">> = iolist_to_binary(re:replace("abc","(ab|ab*)bc","ig&\\1hVNoqXY\\1kTDTB\\1qO",[])),
    <<"igabcahVNoqXYakTDTBaqO">> = iolist_to_binary(re:replace("abc","(ab|ab*)bc","ig&\\1hVNoqXY\\1kTDTB\\1qO",[global])),
    <<"jRabcmEbcTlkygabcdSabc">> = iolist_to_binary(re:replace("abc","a([bc]*)c*","jR&mE\\1Tlkyg&dS&",[])),
    <<"jRabcmEbcTlkygabcdSabc">> = iolist_to_binary(re:replace("abc","a([bc]*)c*","jR&mE\\1Tlkyg&dS&",[global])),
    <<"TecabcdgBdhbcx">> = iolist_to_binary(re:replace("abcd","a([bc]*)(c*d)","Tec&gBdh\\1x",[])),
    <<"TecabcdgBdhbcx">> = iolist_to_binary(re:replace("abcd","a([bc]*)(c*d)","Tec&gBdh\\1x",[global])),
    <<"MMXYabcdyRoehQihVabcdbbctxa">> = iolist_to_binary(re:replace("abcd","a([bc]+)(c*d)","MMXY&yRoehQihV&b\\1txa",[])),
    <<"MMXYabcdyRoehQihVabcdbbctxa">> = iolist_to_binary(re:replace("abcd","a([bc]+)(c*d)","MMXY&yRoehQihV&b\\1txa",[global])),
    <<"abcd">> = iolist_to_binary(re:replace("abcd","a([bc]*)(c+d)","&",[])),
    <<"abcd">> = iolist_to_binary(re:replace("abcd","a([bc]*)(c+d)","&",[global])),
    <<"SnhXnadcdcdekmBaVtSJUu">> = iolist_to_binary(re:replace("adcdcde","a[bcd]*dcdcde","SnhXn&km\\1BaVtSJUu",[])),
    <<"SnhXnadcdcdekmBaVtSJUu">> = iolist_to_binary(re:replace("adcdcde","a[bcd]*dcdcde","SnhXn&km\\1BaVtSJUu",[global])),
    <<"abcde">> = iolist_to_binary(re:replace("abcde","a[bcd]+dcdcde","FToR",[])),
    <<"abcde">> = iolist_to_binary(re:replace("abcde","a[bcd]+dcdcde","FToR",[global])),
    <<"adcdcde">> = iolist_to_binary(re:replace("adcdcde","a[bcd]+dcdcde","\\1",[])),
    <<"adcdcde">> = iolist_to_binary(re:replace("adcdcde","a[bcd]+dcdcde","\\1",[global])),
    <<"abcJababJvjL">> = iolist_to_binary(re:replace("abc","(ab|a)b*c","&J\\1\\1JvjL",[])),
    <<"abcJababJvjL">> = iolist_to_binary(re:replace("abc","(ab|a)b*c","&J\\1\\1JvjL",[global])),
    <<"tsy">> = iolist_to_binary(re:replace("abcd","((a)(b)c)(d)","tsy",[])),
    <<"tsy">> = iolist_to_binary(re:replace("abcd","((a)(b)c)(d)","tsy",[global])),
    <<"r">> = iolist_to_binary(re:replace("alpha","[a-zA-Z_][a-zA-Z0-9_]*","r",[])),
    <<"r">> = iolist_to_binary(re:replace("alpha","[a-zA-Z_][a-zA-Z0-9_]*","r",[global])),
    <<"abhCvWJbhhPkp">> = iolist_to_binary(re:replace("abh","^a(bc+|b[eh])g|.h$","&CvW\\1J&hP\\1kp",[])),
    <<"abhCvWJbhhPkp">> = iolist_to_binary(re:replace("abh","^a(bc+|b[eh])g|.h$","&CvW\\1J&hP\\1kp",[global])),
    <<"xONy">> = iolist_to_binary(re:replace("effgz","(bc+d$|ef*g.|h?i(j|k))","xONy",[])),
    <<"xONy">> = iolist_to_binary(re:replace("effgz","(bc+d$|ef*g.|h?i(j|k))","xONy",[global])),
    <<"OijRYgOFWijijb">> = iolist_to_binary(re:replace("ij","(bc+d$|ef*g.|h?i(j|k))","O&RYgOFW&\\1b",[])),
    <<"OijRYgOFWijijb">> = iolist_to_binary(re:replace("ij","(bc+d$|ef*g.|h?i(j|k))","O&RYgOFW&\\1b",[global])),
    <<"reffgzwEEGjeffgzPueffgzE">> = iolist_to_binary(re:replace("reffgz","(bc+d$|ef*g.|h?i(j|k))","\\1wEEGj\\1Pu\\1E",[])),
    <<"reffgzwEEGjeffgzPueffgzE">> = iolist_to_binary(re:replace("reffgz","(bc+d$|ef*g.|h?i(j|k))","\\1wEEGj\\1Pu\\1E",[global])),
    <<"effg">> = iolist_to_binary(re:replace("effg","(bc+d$|ef*g.|h?i(j|k))","Hn&&rHTQ",[])),
    <<"effg">> = iolist_to_binary(re:replace("effg","(bc+d$|ef*g.|h?i(j|k))","Hn&&rHTQ",[global])),
    <<"bcdd">> = iolist_to_binary(re:replace("bcdd","(bc+d$|ef*g.|h?i(j|k))","xTpXk&",[])),
    <<"bcdd">> = iolist_to_binary(re:replace("bcdd","(bc+d$|ef*g.|h?i(j|k))","xTpXk&",[global])),
    <<"xLoahcakaehh">> = iolist_to_binary(re:replace("a","((((((((((a))))))))))","xLo&hc&k\\1ehh",[])),
    <<"xLoahcakaehh">> = iolist_to_binary(re:replace("a","((((((((((a))))))))))","xLo&hc&k\\1ehh",[global])),
    <<"Tkaj">> = iolist_to_binary(re:replace("aa","((((((((((a))))))))))\\10","Tkaj",[])),
    <<"Tkaj">> = iolist_to_binary(re:replace("aa","((((((((((a))))))))))\\10","Tkaj",[global])),
    ok.
run19() ->
    <<"aKJCYEg">> = iolist_to_binary(re:replace("a","(((((((((a)))))))))","\\1KJCYEg",[])),
    <<"aKJCYEg">> = iolist_to_binary(re:replace("a","(((((((((a)))))))))","\\1KJCYEg",[global])),
    <<"aa">> = iolist_to_binary(re:replace("aa","multiple words of text","X&O\\1SpFbFf&",[])),
    <<"aa">> = iolist_to_binary(re:replace("aa","multiple words of text","X&O\\1SpFbFf&",[global])),
    <<"uh-uh">> = iolist_to_binary(re:replace("uh-uh","multiple words of text","FM&ELDoDirqkHb",[])),
    <<"uh-uh">> = iolist_to_binary(re:replace("uh-uh","multiple words of text","FM&ELDoDirqkHb",[global])),
    <<"nVWfSGeKlL, yeah">> = iolist_to_binary(re:replace("multiple words, yeah","multiple words","n\\1VWfSGe\\1KlL",[])),
    <<"nVWfSGeKlL, yeah">> = iolist_to_binary(re:replace("multiple words, yeah","multiple words","n\\1VWfSGe\\1KlL",[global])),
    <<"abjmWDabcdenababmXabcdemJMlabX">> = iolist_to_binary(re:replace("abcde","(.*)c(.*)","\\1jmWD&n\\1\\1mX&mJMl\\1X",[])),
    <<"abjmWDabcdenababmXabcdemJMlabX">> = iolist_to_binary(re:replace("abcde","(.*)c(.*)","\\1jmWD&n\\1\\1mX&mJMl\\1X",[global])),
    <<"a(a, b)W(a, b)Kf(a, b)adU(a, b)T">> = iolist_to_binary(re:replace("(a, b)","\\((.*), (.*)\\)","\\1&W&Kf&\\1dU&T",[])),
    <<"a(a, b)W(a, b)Kf(a, b)adU(a, b)T">> = iolist_to_binary(re:replace("(a, b)","\\((.*), (.*)\\)","\\1&W&Kf&\\1dU&T",[global])),
    <<"lynEabcdPJeWGV">> = iolist_to_binary(re:replace("abcd","abcd","l\\1yn\\1E&P\\1JeWGV",[])),
    <<"lynEabcdPJeWGV">> = iolist_to_binary(re:replace("abcd","abcd","l\\1yn\\1E&P\\1JeWGV",[global])),
    <<"oOAIabcdabcdabcdio">> = iolist_to_binary(re:replace("abcd","a(bc)d","oOAI&&&io",[])),
    <<"oOAIabcdabcdabcdio">> = iolist_to_binary(re:replace("abcd","a(bc)d","oOAI&&&io",[global])),
    <<"eKDbRMig">> = iolist_to_binary(re:replace("ac","a[-]?c","\\1eKDb\\1R\\1Mig",[])),
    <<"eKDbRMig">> = iolist_to_binary(re:replace("ac","a[-]?c","\\1eKDb\\1R\\1Mig",[global])),
    <<"abcabcabc">> = iolist_to_binary(re:replace("abcabc","(abc)\\1","&\\1",[])),
    <<"abcabcabc">> = iolist_to_binary(re:replace("abcabc","(abc)\\1","&\\1",[global])),
    <<"lLsEYiU">> = iolist_to_binary(re:replace("abcabc","([a-c]*)\\1","lLsEYiU",[])),
    <<"lLsEYiUlLsEYiU">> = iolist_to_binary(re:replace("abcabc","([a-c]*)\\1","lLsEYiU",[global])),
    <<"KaQaSjraaaeaVaTQy">> = iolist_to_binary(re:replace("a","(a)|\\1","K\\1Q\\1Sjr&\\1&e&V\\1TQy",[])),
    <<"KaQaSjraaaeaVaTQy">> = iolist_to_binary(re:replace("a","(a)|\\1","K\\1Q\\1Sjr&\\1&e&V\\1TQy",[global])),
    <<"OaCb">> = iolist_to_binary(re:replace("ab","(a)|\\1","O&C",[])),
    <<"OaCb">> = iolist_to_binary(re:replace("ab","(a)|\\1","O&C",[global])),
    <<"x">> = iolist_to_binary(re:replace("x","(a)|\\1","iqc",[])),
    <<"x">> = iolist_to_binary(re:replace("x","(a)|\\1","iqc",[global])),
    <<"epUFDnxBdDXmIWbbFbbbcbc">> = iolist_to_binary(re:replace("ababbbcbc","(([a-c])b*?\\2)*","epUFDnxBdDXmIW\\1F\\1",[])),
    <<"epUFDnxBdDXmIWbbFbbepUFDnxBdDXmIWFbepUFDnxBdDXmIWcbcFcbcepUFDnxBdDXmIWF">> = iolist_to_binary(re:replace("ababbbcbc","(([a-c])b*?\\2)*","epUFDnxBdDXmIW\\1F\\1",[global])),
    <<"WhqcbcERQJGEPXkYababbbcbcqW">> = iolist_to_binary(re:replace("ababbbcbc","(([a-c])b*?\\2){3}","Whq\\1ERQJGEPXkY&qW",[])),
    <<"WhqcbcERQJGEPXkYababbbcbcqW">> = iolist_to_binary(re:replace("ababbbcbc","(([a-c])b*?\\2){3}","Whq\\1ERQJGEPXkY&qW",[global])),
    <<"aaaxabaxbaaxbbaxabbaxbbaxLmSkjuaNwdbbaxKcbbax">> = iolist_to_binary(re:replace("aaaxabaxbaaxbbax","((\\3|b)\\2(a)x)+","\\1a&\\1LmSkjuaNwd\\1Kc\\1",[])),
    <<"aaaxabaxbaaxbbaxabbaxbbaxLmSkjuaNwdbbaxKcbbax">> = iolist_to_binary(re:replace("aaaxabaxbaaxbbax","((\\3|b)\\2(a)x)+","\\1a&\\1LmSkjuaNwd\\1Kc\\1",[global])),
    <<"bbaababbabaaaaabpbbaSbbaaaabbaEqqmibba">> = iolist_to_binary(re:replace("bbaababbabaaaaabbaaaabba","((\\3|b)\\2(a)){2,}","bp\\1S&Eqqmi\\1",[])),
    <<"bbaababbabaaaaabpbbaSbbaaaabbaEqqmibba">> = iolist_to_binary(re:replace("bbaababbabaaaaabbaaaabba","((\\3|b)\\2(a)){2,}","bp\\1S&Eqqmi\\1",[global])),
    <<"ClxABC">> = iolist_to_binary(re:replace("ABC","abc","Clx&",[caseless])),
    <<"ClxABC">> = iolist_to_binary(re:replace("ABC","abc","Clx&",[caseless,global])),
    <<"XSlhQaJwtnpwY">> = iolist_to_binary(re:replace("XABCY","abc","Sl\\1h\\1Q\\1aJwtnpw",[caseless])),
    <<"XSlhQaJwtnpwY">> = iolist_to_binary(re:replace("XABCY","abc","Sl\\1h\\1Q\\1aJwtnpw",[caseless,global])),
    <<"ABeiP">> = iolist_to_binary(re:replace("ABABC","abc","eiP",[caseless])),
    <<"ABeiP">> = iolist_to_binary(re:replace("ABABC","abc","eiP",[caseless,global])),
    <<"aaxabxbaxbbx">> = iolist_to_binary(re:replace("aaxabxbaxbbx","abc","g\\1Qnq\\1jC&jh\\1wFsOwY\\1",[caseless])),
    <<"aaxabxbaxbbx">> = iolist_to_binary(re:replace("aaxabxbaxbbx","abc","g\\1Qnq\\1jC&jh\\1wFsOwY\\1",[caseless,global])),
    <<"XBC">> = iolist_to_binary(re:replace("XBC","abc","CjHXsgNepVYlWp",[caseless])),
    <<"XBC">> = iolist_to_binary(re:replace("XBC","abc","CjHXsgNepVYlWp",[caseless,global])),
    <<"AXC">> = iolist_to_binary(re:replace("AXC","abc","HE\\1T&",[caseless])),
    <<"AXC">> = iolist_to_binary(re:replace("AXC","abc","HE\\1T&",[caseless,global])),
    <<"ABX">> = iolist_to_binary(re:replace("ABX","abc","od&ujLupqR",[caseless])),
    <<"ABX">> = iolist_to_binary(re:replace("ABX","abc","od&ujLupqR",[caseless,global])),
    <<"R">> = iolist_to_binary(re:replace("ABC","ab*c","R",[caseless])),
    <<"R">> = iolist_to_binary(re:replace("ABC","ab*c","R",[caseless,global])),
    <<"FvyvrxXtABCs">> = iolist_to_binary(re:replace("ABC","ab*bc","Fvyvrx\\1Xt&s",[caseless])),
    <<"FvyvrxXtABCs">> = iolist_to_binary(re:replace("ABC","ab*bc","Fvyvrx\\1Xt&s",[caseless,global])),
    <<"PjwNaABBCXbegIABBCF">> = iolist_to_binary(re:replace("ABBC","ab*bc","Pj\\1wNa&XbegI&F",[caseless])),
    <<"PjwNaABBCXbegIABBCF">> = iolist_to_binary(re:replace("ABBC","ab*bc","Pj\\1wNa&XbegI&F",[caseless,global])),
    <<"ABvCABBBBCABBBBCLJOpNeVHh">> = iolist_to_binary(re:replace("ABBBBC","ab*?bc","ABvC&&LJOpNeVH\\1h",[caseless])),
    <<"ABvCABBBBCABBBBCLJOpNeVHh">> = iolist_to_binary(re:replace("ABBBBC","ab*?bc","ABvC&&LJOpNeVH\\1h",[caseless,global])),
    ok.
run20() ->
    <<"JEFEIGABBBBCABBBBCABBBBCYBydFwJM">> = iolist_to_binary(re:replace("ABBBBC","ab{0,}?bc","JEFEIG&&&Y\\1BydFwJM",[caseless])),
    <<"JEFEIGABBBBCABBBBCABBBBCYBydFwJM">> = iolist_to_binary(re:replace("ABBBBC","ab{0,}?bc","JEFEIG&&&Y\\1BydFwJM",[caseless,global])),
    <<"UEUMgABBCABBClGDFuMsIl">> = iolist_to_binary(re:replace("ABBC","ab+?bc","UEUMg&&lGDFu\\1MsIl",[caseless])),
    <<"UEUMgABBCABBClGDFuMsIl">> = iolist_to_binary(re:replace("ABBC","ab+?bc","UEUMg&&lGDFu\\1MsIl",[caseless,global])),
    <<"ABC">> = iolist_to_binary(re:replace("ABC","ab+bc","LAYr",[caseless])),
    <<"ABC">> = iolist_to_binary(re:replace("ABC","ab+bc","LAYr",[caseless,global])),
    <<"ABQ">> = iolist_to_binary(re:replace("ABQ","ab+bc","EoY\\1P",[caseless])),
    <<"ABQ">> = iolist_to_binary(re:replace("ABQ","ab+bc","EoY\\1P",[caseless,global])),
    <<"qYbmPPABBBBC">> = iolist_to_binary(re:replace("ABBBBC","ab+bc","qYbmPP&",[caseless])),
    <<"qYbmPPABBBBC">> = iolist_to_binary(re:replace("ABBBBC","ab+bc","qYbmPP&",[caseless,global])),
    <<"CSFfkHmrCTJ">> = iolist_to_binary(re:replace("ABBBBC","ab{1,}?bc","\\1C\\1SFfkHmrCTJ",[caseless])),
    <<"CSFfkHmrCTJ">> = iolist_to_binary(re:replace("ABBBBC","ab{1,}?bc","\\1C\\1SFfkHmrCTJ",[caseless,global])),
    <<"JABBBBCJABBBBC">> = iolist_to_binary(re:replace("ABBBBC","ab{1,3}?bc","J&\\1J&",[caseless])),
    <<"JABBBBCJABBBBC">> = iolist_to_binary(re:replace("ABBBBC","ab{1,3}?bc","J&\\1J&",[caseless,global])),
    <<"QABBBBCHAQKABBBBCt">> = iolist_to_binary(re:replace("ABBBBC","ab{3,4}?bc","Q&HAQK&t",[caseless])),
    <<"QABBBBCHAQKABBBBCt">> = iolist_to_binary(re:replace("ABBBBC","ab{3,4}?bc","Q&HAQK&t",[caseless,global])),
    <<"ABQ">> = iolist_to_binary(re:replace("ABQ","ab{4,5}?bc","\\1WbKKCNjyC",[caseless])),
    <<"ABQ">> = iolist_to_binary(re:replace("ABQ","ab{4,5}?bc","\\1WbKKCNjyC",[caseless,global])),
    <<"ABBBBC">> = iolist_to_binary(re:replace("ABBBBC","ab{4,5}?bc","THHUY&igdJt\\1N&",[caseless])),
    <<"ABBBBC">> = iolist_to_binary(re:replace("ABBBBC","ab{4,5}?bc","THHUY&igdJt\\1N&",[caseless,global])),
    <<"JdNlABBCBpgoAJobghPXXK">> = iolist_to_binary(re:replace("ABBC","ab??bc","JdNl&BpgoAJobghPXXK",[caseless])),
    <<"JdNlABBCBpgoAJobghPXXK">> = iolist_to_binary(re:replace("ABBC","ab??bc","JdNl&BpgoAJobghPXXK",[caseless,global])),
    <<"kABCABC">> = iolist_to_binary(re:replace("ABC","ab??bc","k&&\\1",[caseless])),
    <<"kABCABC">> = iolist_to_binary(re:replace("ABC","ab??bc","k&&\\1",[caseless,global])),
    <<"hXKn">> = iolist_to_binary(re:replace("ABC","ab{0,1}?bc","hXKn",[caseless])),
    <<"hXKn">> = iolist_to_binary(re:replace("ABC","ab{0,1}?bc","hXKn",[caseless,global])),
    <<"MpABCJQ">> = iolist_to_binary(re:replace("ABC","ab??c","\\1Mp&JQ",[caseless])),
    <<"MpABCJQ">> = iolist_to_binary(re:replace("ABC","ab??c","\\1Mp&JQ",[caseless,global])),
    <<"BqnABCgwNu">> = iolist_to_binary(re:replace("ABC","ab{0,1}?c","Bqn\\1&gw\\1Nu",[caseless])),
    <<"BqnABCgwNu">> = iolist_to_binary(re:replace("ABC","ab{0,1}?c","Bqn\\1&gw\\1Nu",[caseless,global])),
    <<"BbDABCv">> = iolist_to_binary(re:replace("ABC","^abc$","\\1BbD&v",[caseless])),
    <<"BbDABCv">> = iolist_to_binary(re:replace("ABC","^abc$","\\1BbD&v",[caseless,global])),
    <<"ABBBBC">> = iolist_to_binary(re:replace("ABBBBC","^abc$","wsTKas&SjtLxJf\\1\\1hMC",[caseless])),
    <<"ABBBBC">> = iolist_to_binary(re:replace("ABBBBC","^abc$","wsTKas&SjtLxJf\\1\\1hMC",[caseless,global])),
    <<"ABCC">> = iolist_to_binary(re:replace("ABCC","^abc$","NeK&\\1F",[caseless])),
    <<"ABCC">> = iolist_to_binary(re:replace("ABCC","^abc$","NeK&\\1F",[caseless,global])),
    <<"hLeXkpLIvABCWC">> = iolist_to_binary(re:replace("ABCC","^abc","hLeXkpLIv&W",[caseless])),
    <<"hLeXkpLIvABCWC">> = iolist_to_binary(re:replace("ABCC","^abc","hLeXkpLIv&W",[caseless,global])),
    <<"AABCABC">> = iolist_to_binary(re:replace("AABC","abc$","&&\\1",[caseless])),
    <<"AABCABC">> = iolist_to_binary(re:replace("AABC","abc$","&&\\1",[caseless,global])),
    <<"aELhPesLAnpxtxBABC">> = iolist_to_binary(re:replace("ABC","^","aELhPe\\1sLAnpxtxB",[caseless])),
    <<"aELhPesLAnpxtxBABC">> = iolist_to_binary(re:replace("ABC","^","aELhPe\\1sLAnpxtxB",[caseless,global])),
    <<"ABCSKH">> = iolist_to_binary(re:replace("ABC","$","SKH",[caseless])),
    <<"ABCSKH">> = iolist_to_binary(re:replace("ABC","$","SKH",[caseless,global])),
    ok.
run21() ->
    <<"IB">> = iolist_to_binary(re:replace("ABC","a.c","IB",[caseless])),
    <<"IB">> = iolist_to_binary(re:replace("ABC","a.c","IB",[caseless,global])),
    <<"COboVXMd">> = iolist_to_binary(re:replace("AXC","a.c","COboVXMd",[caseless])),
    <<"COboVXMd">> = iolist_to_binary(re:replace("AXC","a.c","COboVXMd",[caseless,global])),
    <<"ydGtl">> = iolist_to_binary(re:replace("AXYZC","a.*?c","\\1ydGtl",[caseless])),
    <<"ydGtl">> = iolist_to_binary(re:replace("AXYZC","a.*?c","\\1ydGtl",[caseless,global])),
    <<"AABCwxvweaXGdlD">> = iolist_to_binary(re:replace("AABC","a.*c","&wx\\1vweaX\\1GdlD",[caseless])),
    <<"AABCwxvweaXGdlD">> = iolist_to_binary(re:replace("AABC","a.*c","&wx\\1vweaX\\1GdlD",[caseless,global])),
    <<"AXYZD">> = iolist_to_binary(re:replace("AXYZD","a.*c","V&Yu",[caseless])),
    <<"AXYZD">> = iolist_to_binary(re:replace("AXYZD","a.*c","V&Yu",[caseless,global])),
    <<"ABDuQiJpvCwJtLUQABDnABDe">> = iolist_to_binary(re:replace("ABD","a[bc]d","&uQiJpvCwJtLUQ&n&e",[caseless])),
    <<"ABDuQiJpvCwJtLUQABDnABDe">> = iolist_to_binary(re:replace("ABD","a[bc]d","&uQiJpvCwJtLUQ&n&e",[caseless,global])),
    <<"JnTOLWXACEmWACEF">> = iolist_to_binary(re:replace("ACE","a[b-d]e","JnTOLWX\\1&mW&F\\1",[caseless])),
    <<"JnTOLWXACEmWACEF">> = iolist_to_binary(re:replace("ACE","a[b-d]e","JnTOLWX\\1&mW&F\\1",[caseless,global])),
    <<"ABC">> = iolist_to_binary(re:replace("ABC","a[b-d]e","y&h\\1&u",[caseless])),
    <<"ABC">> = iolist_to_binary(re:replace("ABC","a[b-d]e","y&h\\1&u",[caseless,global])),
    <<"ABD">> = iolist_to_binary(re:replace("ABD","a[b-d]e","d&\\1",[caseless])),
    <<"ABD">> = iolist_to_binary(re:replace("ABD","a[b-d]e","d&\\1",[caseless,global])),
    <<"AsfBOnWLWdrl">> = iolist_to_binary(re:replace("AAC","a[b-d]","sfBOnWLWdrl",[caseless])),
    <<"AsfBOnWLWdrl">> = iolist_to_binary(re:replace("AAC","a[b-d]","sfBOnWLWdrl",[caseless,global])),
    <<"kQ">> = iolist_to_binary(re:replace("A-","a[-b]","kQ",[caseless])),
    <<"kQ">> = iolist_to_binary(re:replace("A-","a[-b]","kQ",[caseless,global])),
    <<"A-jYfA-iIQh">> = iolist_to_binary(re:replace("A-","a[b-]","&jYf&iIQh\\1",[caseless])),
    <<"A-jYfA-iIQh">> = iolist_to_binary(re:replace("A-","a[b-]","&jYf&iIQh\\1",[caseless,global])),
    <<"yA]EA]so">> = iolist_to_binary(re:replace("A]","a]","y&E&so",[caseless])),
    <<"yA]EA]so">> = iolist_to_binary(re:replace("A]","a]","y&E&so",[caseless,global])),
    <<"A]BA]BmuiN">> = iolist_to_binary(re:replace("A]B","a[]]b","\\1&&\\1muiN",[caseless])),
    <<"A]BA]BmuiN">> = iolist_to_binary(re:replace("A]B","a[]]b","\\1&&\\1muiN",[caseless,global])),
    <<"UAED">> = iolist_to_binary(re:replace("AED","a[^bc]d","U&",[caseless])),
    <<"UAED">> = iolist_to_binary(re:replace("AED","a[^bc]d","U&",[caseless,global])),
    <<"yohceADCHvADCkiADCxgGAPsc">> = iolist_to_binary(re:replace("ADC","a[^-b]c","yohce&Hv&ki&xgGAPsc",[caseless])),
    <<"yohceADCHvADCkiADCxgGAPsc">> = iolist_to_binary(re:replace("ADC","a[^-b]c","yohce&Hv&ki&xgGAPsc",[caseless,global])),
    <<"ABD">> = iolist_to_binary(re:replace("ABD","a[^-b]c","t&&q",[caseless])),
    <<"ABD">> = iolist_to_binary(re:replace("ABD","a[^-b]c","t&&q",[caseless,global])),
    <<"A-C">> = iolist_to_binary(re:replace("A-C","a[^-b]c","w\\1SEi\\1&VKdBOyB\\1w",[caseless])),
    <<"A-C">> = iolist_to_binary(re:replace("A-C","a[^-b]c","w\\1SEi\\1&VKdBOyB\\1w",[caseless,global])),
    <<"nIADCH">> = iolist_to_binary(re:replace("ADC","a[^]b]c","nI&H",[caseless])),
    <<"nIADCH">> = iolist_to_binary(re:replace("ADC","a[^]b]c","nI&H",[caseless,global])),
    <<"kxKDSoWC">> = iolist_to_binary(re:replace("ABC","ab|cd","kxKDSoW",[caseless])),
    <<"kxKDSoWC">> = iolist_to_binary(re:replace("ABC","ab|cd","kxKDSoW",[caseless,global])),
    <<"dCD">> = iolist_to_binary(re:replace("ABCD","ab|cd","d",[caseless])),
    <<"dd">> = iolist_to_binary(re:replace("ABCD","ab|cd","d",[caseless,global])),
    <<"DIQboAe">> = iolist_to_binary(re:replace("DEF","()ef","IQboAe",[caseless])),
    <<"DIQboAe">> = iolist_to_binary(re:replace("DEF","()ef","IQboAe",[caseless,global])),
    <<"A]C">> = iolist_to_binary(re:replace("A]C","$b","Ii&smqXytI\\1w\\1",[caseless])),
    <<"A]C">> = iolist_to_binary(re:replace("A]C","$b","Ii&smqXytI\\1w\\1",[caseless,global])),
    <<"B">> = iolist_to_binary(re:replace("B","$b","fX&EijX",[caseless])),
    <<"B">> = iolist_to_binary(re:replace("B","$b","fX&EijX",[caseless,global])),
    <<"uA(BWnxKsFEaL">> = iolist_to_binary(re:replace("A(B","a\\(b","u&WnxKsF\\1EaL\\1",[caseless])),
    <<"uA(BWnxKsFEaL">> = iolist_to_binary(re:replace("A(B","a\\(b","u&WnxKsF\\1EaL\\1",[caseless,global])),
    <<"VOoAB">> = iolist_to_binary(re:replace("AB","a\\(*b","VOo&",[caseless])),
    <<"VOoAB">> = iolist_to_binary(re:replace("AB","a\\(*b","VOo&",[caseless,global])),
    <<"A((BA((BGGkJA((BA((BA((BqWNn">> = iolist_to_binary(re:replace("A((B","a\\(*b","&&GG\\1k\\1J&&&qWNn",[caseless])),
    <<"A((BA((BGGkJA((BA((BA((BqWNn">> = iolist_to_binary(re:replace("A((B","a\\(*b","&&GG\\1k\\1J&&&qWNn",[caseless,global])),
    <<"QOREoyFBbWu">> = iolist_to_binary(re:replace("A\\b","a\\\\b","QOREo\\1y\\1FBbWu",[caseless])),
    <<"QOREoyFBbWu">> = iolist_to_binary(re:replace("A\\b","a\\\\b","QOREo\\1y\\1FBbWu",[caseless,global])),
    <<"Pcnta\\BnSAvUGvRwiwct">> = iolist_to_binary(re:replace("a\\B","a\\\\b","\\1Pcn\\1t&nSAvUGvRwiwct",[caseless])),
    <<"Pcnta\\BnSAvUGvRwiwct">> = iolist_to_binary(re:replace("a\\B","a\\\\b","\\1Pcn\\1t&nSAvUGvRwiwct",[caseless,global])),
    <<"WOHAUuhFQnufAuBC">> = iolist_to_binary(re:replace("ABC","((a))","WOH\\1UuhFQnuf&u",[caseless])),
    <<"WOHAUuhFQnufAuBC">> = iolist_to_binary(re:replace("ABC","((a))","WOH\\1UuhFQnuf&u",[caseless,global])),
    ok.
run22() ->
    <<"ABCyglGX">> = iolist_to_binary(re:replace("ABC","(a)b(c)","&yglGX",[caseless])),
    <<"ABCyglGX">> = iolist_to_binary(re:replace("ABC","(a)b(c)","&yglGX",[caseless,global])),
    <<"AABBxHBNGABCKPNeTiyABCABCANU">> = iolist_to_binary(re:replace("AABBABC","a+b+c","\\1xHBNG&KPNeTiy&&ANU",[caseless])),
    <<"AABBxHBNGABCKPNeTiyABCABCANU">> = iolist_to_binary(re:replace("AABBABC","a+b+c","\\1xHBNG&KPNeTiy&&ANU",[caseless,global])),
    <<"AABBdLaJCwC">> = iolist_to_binary(re:replace("AABBABC","a{1,}b{1,}c","dLaJCwC",[caseless])),
    <<"AABBdLaJCwC">> = iolist_to_binary(re:replace("AABBABC","a{1,}b{1,}c","dLaJCwC",[caseless,global])),
    <<"wRDLkvABCABC">> = iolist_to_binary(re:replace("ABCABC","a.+?c","wRDLkv\\1&",[caseless])),
    <<"wRDLkvABCwRDLkvABC">> = iolist_to_binary(re:replace("ABCABC","a.+?c","wRDLkv\\1&",[caseless,global])),
    <<"yABCsFWABCWNGfXdgihkoABCABC">> = iolist_to_binary(re:replace("ABCABC","a.*?c","y&sFW&WNGfXd\\1gihko&",[caseless])),
    <<"yABCsFWABCWNGfXdgihkoABCyABCsFWABCWNGfXdgihkoABC">> = iolist_to_binary(re:replace("ABCABC","a.*?c","y&sFW&WNGfXd\\1gihko&",[caseless,global])),
    <<"PTJaABCDABC">> = iolist_to_binary(re:replace("ABCABC","a.{0,5}?c","PT\\1Ja&D",[caseless])),
    <<"PTJaABCDPTJaABCD">> = iolist_to_binary(re:replace("ABCABC","a.{0,5}?c","PT\\1Ja&D",[caseless,global])),
    <<"ABDGOD">> = iolist_to_binary(re:replace("AB","(a+|b)*","&DGOD",[caseless])),
    <<"ABDGODDGOD">> = iolist_to_binary(re:replace("AB","(a+|b)*","&DGOD",[caseless,global])),
    <<"KIBqEIlJvBcnqMABpJCB">> = iolist_to_binary(re:replace("AB","(a+|b){0,}","KI\\1qEIlJv\\1cnqM&pJC\\1",[caseless])),
    <<"KIBqEIlJvBcnqMABpJCBKIqEIlJvcnqMpJC">> = iolist_to_binary(re:replace("AB","(a+|b){0,}","KI\\1qEIlJv\\1cnqM&pJC\\1",[caseless,global])),
    <<"gSDxABBtYNus">> = iolist_to_binary(re:replace("AB","(a+|b)+","gSDx&BtYNus",[caseless])),
    <<"gSDxABBtYNus">> = iolist_to_binary(re:replace("AB","(a+|b)+","gSDx&BtYNus",[caseless,global])),
    <<"ABh">> = iolist_to_binary(re:replace("AB","(a+|b){1,}","&h",[caseless])),
    <<"ABh">> = iolist_to_binary(re:replace("AB","(a+|b){1,}","&h",[caseless,global])),
    <<"yktAWAB">> = iolist_to_binary(re:replace("AB","(a+|b)?","ykt&W&",[caseless])),
    <<"yktAWAyktBWByktW">> = iolist_to_binary(re:replace("AB","(a+|b)?","ykt&W&",[caseless,global])),
    <<"AaB">> = iolist_to_binary(re:replace("AB","(a+|b){0,1}","&a",[caseless])),
    <<"AaBaa">> = iolist_to_binary(re:replace("AB","(a+|b){0,1}","&a",[caseless,global])),
    <<"WbIHLJAB">> = iolist_to_binary(re:replace("AB","(a+|b){0,1}?","&WbIHLJ",[caseless])),
    <<"WbIHLJAWbIHLJWbIHLJBWbIHLJWbIHLJ">> = iolist_to_binary(re:replace("AB","(a+|b){0,1}?","&WbIHLJ",[caseless,global])),
    <<"CDEktRCDE">> = iolist_to_binary(re:replace("CDE","[^ab]*","&kt\\1\\1R&",[caseless])),
    <<"CDEktRCDEktR">> = iolist_to_binary(re:replace("CDE","[^ab]*","&kt\\1\\1R&",[caseless,global])),
    <<"ux">> = iolist_to_binary(re:replace("ABBBCD","([abc])*d","ux",[caseless])),
    <<"ux">> = iolist_to_binary(re:replace("ABBBCD","([abc])*d","ux",[caseless,global])),
    <<"qKHABCDdv">> = iolist_to_binary(re:replace("ABCD","([abc])*bcd","qKH&dv",[caseless])),
    <<"qKHABCDdv">> = iolist_to_binary(re:replace("ABCD","([abc])*bcd","qKH&dv",[caseless,global])),
    <<"DUTia">> = iolist_to_binary(re:replace("E","a|b|c|d|e","DUTia",[caseless])),
    <<"DUTia">> = iolist_to_binary(re:replace("E","a|b|c|d|e","DUTia",[caseless,global])),
    <<"ydMawOaiEUEFEuVTct">> = iolist_to_binary(re:replace("EF","(a|b|c|d|e)f","ydMawOai\\1U&\\1uVTct",[caseless])),
    <<"ydMawOaiEUEFEuVTct">> = iolist_to_binary(re:replace("EF","(a|b|c|d|e)f","ydMawOai\\1U&\\1uVTct",[caseless,global])),
    <<"scABCDEFGMyXpsUtrgSD">> = iolist_to_binary(re:replace("ABCDEFG","abcd*efg","sc&MyXpsUtrgSD",[caseless])),
    <<"scABCDEFGMyXpsUtrgSD">> = iolist_to_binary(re:replace("ABCDEFG","abcd*efg","sc&MyXpsUtrgSD",[caseless,global])),
    <<"XtkABUYABBBZ">> = iolist_to_binary(re:replace("XABYABBBZ","ab*","tk&U\\1",[caseless])),
    <<"XtkABUYtkABBBUZ">> = iolist_to_binary(re:replace("XABYABBBZ","ab*","tk&U\\1",[caseless,global])),
    <<"XdETFopYABBBZ">> = iolist_to_binary(re:replace("XAYABBBZ","ab*","dE\\1TFop\\1",[caseless])),
    <<"XdETFopYdETFopZ">> = iolist_to_binary(re:replace("XAYABBBZ","ab*","dE\\1TFop\\1",[caseless,global])),
    ok.
run23() ->
    <<"ABCDEwTiaRcRV">> = iolist_to_binary(re:replace("ABCDE","(ab|cd)e","&wTiaRcRV",[caseless])),
    <<"ABCDEwTiaRcRV">> = iolist_to_binary(re:replace("ABCDE","(ab|cd)e","&wTiaRcRV",[caseless,global])),
    <<"DOQHIJITtHIJ">> = iolist_to_binary(re:replace("HIJ","[abhgefdc]ij","\\1DO\\1Q&ITt&",[caseless])),
    <<"DOQHIJITtHIJ">> = iolist_to_binary(re:replace("HIJ","[abhgefdc]ij","\\1DO\\1Q&ITt&",[caseless,global])),
    <<"ABCDE">> = iolist_to_binary(re:replace("ABCDE","^(ab|cd)e","SQSxbQRhSUBA",[caseless])),
    <<"ABCDE">> = iolist_to_binary(re:replace("ABCDE","^(ab|cd)e","SQSxbQRhSUBA",[caseless,global])),
    <<"ABCDKDx">> = iolist_to_binary(re:replace("ABCDEF","(abc|)ef","KDx",[caseless])),
    <<"ABCDKDx">> = iolist_to_binary(re:replace("ABCDEF","(abc|)ef","KDx",[caseless,global])),
    <<"ABCDVFjoRUBjDtvnALeSGQ">> = iolist_to_binary(re:replace("ABCD","(a|b)c*d","&VFjoRU\\1jDtvnALeSGQ",[caseless])),
    <<"ABCDVFjoRUBjDtvnALeSGQ">> = iolist_to_binary(re:replace("ABCD","(a|b)c*d","&VFjoRU\\1jDtvnALeSGQ",[caseless,global])),
    <<"ABCWvfQRkKAyAUA">> = iolist_to_binary(re:replace("ABC","(ab|ab*)bc","&WvfQRkK\\1y\\1UA",[caseless])),
    <<"ABCWvfQRkKAyAUA">> = iolist_to_binary(re:replace("ABC","(ab|ab*)bc","&WvfQRkK\\1y\\1UA",[caseless,global])),
    <<"jiaeNJBCKxBCe">> = iolist_to_binary(re:replace("ABC","a([bc]*)c*","jiaeNJ\\1Kx\\1e",[caseless])),
    <<"jiaeNJBCKxBCe">> = iolist_to_binary(re:replace("ABC","a([bc]*)c*","jiaeNJ\\1Kx\\1e",[caseless,global])),
    <<"EVnwucABCD">> = iolist_to_binary(re:replace("ABCD","a([bc]*)(c*d)","EVnwuc&",[caseless])),
    <<"EVnwucABCD">> = iolist_to_binary(re:replace("ABCD","a([bc]*)(c*d)","EVnwuc&",[caseless,global])),
    <<"aKTBCABCDLK">> = iolist_to_binary(re:replace("ABCD","a([bc]+)(c*d)","aKT\\1&LK",[caseless])),
    <<"aKTBCABCDLK">> = iolist_to_binary(re:replace("ABCD","a([bc]+)(c*d)","aKT\\1&LK",[caseless,global])),
    <<"RgGBBwcmABCDTgNL">> = iolist_to_binary(re:replace("ABCD","a([bc]*)(c+d)","RgGB\\1wcm&TgNL",[caseless])),
    <<"RgGBBwcmABCDTgNL">> = iolist_to_binary(re:replace("ABCD","a([bc]*)(c+d)","RgGB\\1wcm&TgNL",[caseless,global])),
    <<"TADCDCDEwgADCDCDEFOxEylU">> = iolist_to_binary(re:replace("ADCDCDE","a[bcd]*dcdcde","T&wg&F\\1OxEylU",[caseless])),
    <<"TADCDCDEwgADCDCDEFOxEylU">> = iolist_to_binary(re:replace("ADCDCDE","a[bcd]*dcdcde","T&wg&F\\1OxEylU",[caseless,global])),
    <<"ABABCABCLnABC">> = iolist_to_binary(re:replace("ABC","(ab|a)b*c","\\1&&Ln&",[caseless])),
    <<"ABABCABCLnABC">> = iolist_to_binary(re:replace("ABC","(ab|a)b*c","\\1&&Ln&",[caseless,global])),
    <<"sABClxWABCNnoiUABCABCDJABCABCDrABCD">> = iolist_to_binary(re:replace("ABCD","((a)(b)c)(d)","s\\1lxW\\1NnoiU\\1&J\\1&r&",[caseless])),
    <<"sABClxWABCNnoiUABCABCDJABCABCDrABCD">> = iolist_to_binary(re:replace("ABCD","((a)(b)c)(d)","s\\1lxW\\1NnoiU\\1&J\\1&r&",[caseless,global])),
    <<"vVEiRHOJegALPHAjCJbVaYo">> = iolist_to_binary(re:replace("ALPHA","[a-zA-Z_][a-zA-Z0-9_]*","vVEiRHOJeg&j\\1CJbVaYo",[caseless])),
    <<"vVEiRHOJegALPHAjCJbVaYo">> = iolist_to_binary(re:replace("ALPHA","[a-zA-Z_][a-zA-Z0-9_]*","vVEiRHOJeg&j\\1CJbVaYo",[caseless,global])),
    <<"AGtppsRPRDSBHMkBHkQ">> = iolist_to_binary(re:replace("ABH","^a(bc+|b[eh])g|.h$","G\\1tppsRP\\1RDSBHMk&kQ",[caseless])),
    <<"AGtppsRPRDSBHMkBHkQ">> = iolist_to_binary(re:replace("ABH","^a(bc+|b[eh])g|.h$","G\\1tppsRP\\1RDSBHMk&kQ",[caseless,global])),
    <<"EFFGZlNPEFFGZDSOUbWFhRtX">> = iolist_to_binary(re:replace("EFFGZ","(bc+d$|ef*g.|h?i(j|k))","\\1lNP\\1DSOUbWFhRtX",[caseless])),
    <<"EFFGZlNPEFFGZDSOUbWFhRtX">> = iolist_to_binary(re:replace("EFFGZ","(bc+d$|ef*g.|h?i(j|k))","\\1lNP\\1DSOUbWFhRtX",[caseless,global])),
    <<"bIIJKUIJIJIJjUqIJ">> = iolist_to_binary(re:replace("IJ","(bc+d$|ef*g.|h?i(j|k))","bI\\1KU\\1&&jUq\\1",[caseless])),
    <<"bIIJKUIJIJIJjUqIJ">> = iolist_to_binary(re:replace("IJ","(bc+d$|ef*g.|h?i(j|k))","bI\\1KU\\1&&jUq\\1",[caseless,global])),
    <<"RvBREFFGZf">> = iolist_to_binary(re:replace("REFFGZ","(bc+d$|ef*g.|h?i(j|k))","vBR&f",[caseless])),
    <<"RvBREFFGZf">> = iolist_to_binary(re:replace("REFFGZ","(bc+d$|ef*g.|h?i(j|k))","vBR&f",[caseless,global])),
    <<"ADCDCDE">> = iolist_to_binary(re:replace("ADCDCDE","(bc+d$|ef*g.|h?i(j|k))","\\1\\1sSfPHTpUXDPv",[caseless])),
    <<"ADCDCDE">> = iolist_to_binary(re:replace("ADCDCDE","(bc+d$|ef*g.|h?i(j|k))","\\1\\1sSfPHTpUXDPv",[caseless,global])),
    <<"EFFG">> = iolist_to_binary(re:replace("EFFG","(bc+d$|ef*g.|h?i(j|k))","sr\\1tWRpRn",[caseless])),
    <<"EFFG">> = iolist_to_binary(re:replace("EFFG","(bc+d$|ef*g.|h?i(j|k))","sr\\1tWRpRn",[caseless,global])),
    <<"BCDD">> = iolist_to_binary(re:replace("BCDD","(bc+d$|ef*g.|h?i(j|k))","pLuYEC&",[caseless])),
    <<"BCDD">> = iolist_to_binary(re:replace("BCDD","(bc+d$|ef*g.|h?i(j|k))","pLuYEC&",[caseless,global])),
    <<"GAAxBDcAnAOAAuAXAAAA">> = iolist_to_binary(re:replace("A","((((((((((a))))))))))","G&&xBDc\\1n&O\\1\\1uAX\\1\\1\\1\\1",[caseless])),
    <<"GAAxBDcAnAOAAuAXAAAA">> = iolist_to_binary(re:replace("A","((((((((((a))))))))))","G&&xBDc\\1n&O\\1\\1uAX\\1\\1\\1\\1",[caseless,global])),
    <<"JiuiBBGK">> = iolist_to_binary(re:replace("AA","((((((((((a))))))))))\\10","JiuiBBGK",[caseless])),
    <<"JiuiBBGK">> = iolist_to_binary(re:replace("AA","((((((((((a))))))))))\\10","JiuiBBGK",[caseless,global])),
    <<"QIAAHNIAh">> = iolist_to_binary(re:replace("A","(((((((((a)))))))))","QI\\1&HNI\\1h",[caseless])),
    <<"QIAAHNIAh">> = iolist_to_binary(re:replace("A","(((((((((a)))))))))","QI\\1&HNI\\1h",[caseless,global])),
    ok.
run24() ->
    <<"Ny">> = iolist_to_binary(re:replace("A","(?:(?:(?:(?:(?:(?:(?:(?:(?:(a))))))))))","Ny",[caseless])),
    <<"Ny">> = iolist_to_binary(re:replace("A","(?:(?:(?:(?:(?:(?:(?:(?:(?:(a))))))))))","Ny",[caseless,global])),
    <<"hYR">> = iolist_to_binary(re:replace("C","(?:(?:(?:(?:(?:(?:(?:(?:(?:(a|b|c))))))))))","hYR",[caseless])),
    <<"hYR">> = iolist_to_binary(re:replace("C","(?:(?:(?:(?:(?:(?:(?:(?:(?:(a|b|c))))))))))","hYR",[caseless,global])),
    <<"AA">> = iolist_to_binary(re:replace("AA","multiple words of text","L\\1&UlMoC\\1Aoluf",[caseless])),
    <<"AA">> = iolist_to_binary(re:replace("AA","multiple words of text","L\\1&UlMoC\\1Aoluf",[caseless,global])),
    <<"UH-UH">> = iolist_to_binary(re:replace("UH-UH","multiple words of text","b&qrDkwiki\\1",[caseless])),
    <<"UH-UH">> = iolist_to_binary(re:replace("UH-UH","multiple words of text","b&qrDkwiki\\1",[caseless,global])),
    <<"VrVOACMULTIPLE WORDSHnOs, YEAH">> = iolist_to_binary(re:replace("MULTIPLE WORDS, YEAH","multiple words","VrVOAC&HnO\\1s\\1",[caseless])),
    <<"VrVOACMULTIPLE WORDSHnOs, YEAH">> = iolist_to_binary(re:replace("MULTIPLE WORDS, YEAH","multiple words","VrVOAC&HnO\\1s\\1",[caseless,global])),
    <<"KBrNXAjqQYABCDERvj">> = iolist_to_binary(re:replace("ABCDE","(.*)c(.*)","KBrNXAjqQY&Rvj",[caseless])),
    <<"KBrNXAjqQYABCDERvj">> = iolist_to_binary(re:replace("ABCDE","(.*)c(.*)","KBrNXAjqQY&Rvj",[caseless,global])),
    <<"o">> = iolist_to_binary(re:replace("(A, B)","\\((.*), (.*)\\)","o",[caseless])),
    <<"o">> = iolist_to_binary(re:replace("(A, B)","\\((.*), (.*)\\)","o",[caseless,global])),
    <<"mXgwSISPpB">> = iolist_to_binary(re:replace("ABCD","abcd","mXgw\\1S\\1ISPpB",[caseless])),
    <<"mXgwSISPpB">> = iolist_to_binary(re:replace("ABCD","abcd","mXgw\\1S\\1ISPpB",[caseless,global])),
    <<"uJpSxOBN">> = iolist_to_binary(re:replace("ABCD","a(bc)d","uJpSxOBN",[caseless])),
    <<"uJpSxOBN">> = iolist_to_binary(re:replace("ABCD","a(bc)d","uJpSxOBN",[caseless,global])),
    <<"aDDOV">> = iolist_to_binary(re:replace("AC","a[-]?c","aDD\\1OV",[caseless])),
    <<"aDDOV">> = iolist_to_binary(re:replace("AC","a[-]?c","aDD\\1OV",[caseless,global])),
    <<"sSDdKNABCSAhXJRABCXwp">> = iolist_to_binary(re:replace("ABCABC","(abc)\\1","sSDdKN\\1SAhXJR\\1Xwp",[caseless])),
    <<"sSDdKNABCSAhXJRABCXwp">> = iolist_to_binary(re:replace("ABCABC","(abc)\\1","sSDdKN\\1SAhXJR\\1Xwp",[caseless,global])),
    <<"HHwQpABCABCUNd">> = iolist_to_binary(re:replace("ABCABC","([a-c]*)\\1","HHwQp\\1\\1UNd",[caseless])),
    <<"HHwQpABCABCUNdHHwQpUNd">> = iolist_to_binary(re:replace("ABCABC","([a-c]*)\\1","HHwQp\\1\\1UNd",[caseless,global])),
    <<"abkvDX">> = iolist_to_binary(re:replace("abad","a(?!b).","kv\\1DX",[])),
    <<"abkvDX">> = iolist_to_binary(re:replace("abad","a(?!b).","kv\\1DX",[global])),
    <<"abodmopDrikjpbadadV">> = iolist_to_binary(re:replace("abad","a(?=d).","odmop\\1Drikjpb\\1&&V",[])),
    <<"abodmopDrikjpbadadV">> = iolist_to_binary(re:replace("abad","a(?=d).","odmop\\1Drikjpb\\1&&V",[global])),
    <<"abJBuUN">> = iolist_to_binary(re:replace("abad","a(?=c|d).","JBuU\\1N",[])),
    <<"abJBuUN">> = iolist_to_binary(re:replace("abad","a(?=c|d).","JBuU\\1N",[global])),
    <<"GeTeeVpRCp">> = iolist_to_binary(re:replace("ace","a(?:b|c|d)(.)","G\\1T\\1\\1VpRCp",[])),
    <<"GeTeeVpRCp">> = iolist_to_binary(re:replace("ace","a(?:b|c|d)(.)","G\\1T\\1\\1VpRCp",[global])),
    <<"aqNacefRFeIAeWeace">> = iolist_to_binary(re:replace("ace","a(?:b|c|d)*(.)","aqN&fRF\\1IA\\1We&",[])),
    <<"aqNacefRFeIAeWeace">> = iolist_to_binary(re:replace("ace","a(?:b|c|d)*(.)","aqN&fRF\\1IA\\1We&",[global])),
    <<"oTedfhkqWsMVtaceL">> = iolist_to_binary(re:replace("ace","a(?:b|c|d)+?(.)","oT\\1dfhkqWsMVt&L",[])),
    <<"oTedfhkqWsMVtaceL">> = iolist_to_binary(re:replace("ace","a(?:b|c|d)+?(.)","oT\\1dfhkqWsMVt&L",[global])),
    <<"DqacdfacdxNUnXDDAUbcdbe">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d)+?(.)","Dq&f&xNUnXDDAU",[])),
    <<"DqacdfacdxNUnXDDAUbcdbe">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d)+?(.)","Dq&f&xNUnXDDAU",[global])),
    <<"qtqCYek">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d)+(.)","qtqCY\\1k",[])),
    <<"qtqCYek">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d)+(.)","qtqCY\\1k",[global])),
    <<"JuBrHsMekXgTKSLacdbcdbe">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d){2}(.)","JuBrHsMekXgTKSL&",[])),
    <<"JuBrHsMekXgTKSLacdbcdbe">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d){2}(.)","JuBrHsMekXgTKSL&",[global])),
    ok.
run25() ->
    <<"bDaQVacdbcdbKxbbbHbacdbcdbtbhXTme">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d){4,5}(.)","\\1DaQV&Kxb\\1\\1H\\1&t\\1hXTm",[])),
    <<"bDaQVacdbcdbKxbbbHbacdbcdbtbhXTme">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d){4,5}(.)","\\1DaQV&Kxb\\1\\1H\\1&t\\1hXTm",[global])),
    <<"mbe">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d){4,5}?(.)","m",[])),
    <<"mbe">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d){4,5}?(.)","m",[global])),
    <<"jeacdbcdbekGadYacdbcdbeFefTMe">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d){6,7}(.)","j\\1&kGadY&F\\1fTM\\1",[])),
    <<"jeacdbcdbekGadYacdbcdbeFefTMe">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d){6,7}(.)","j\\1&kGadY&F\\1fTM\\1",[global])),
    <<"WEPrQacdbcdberDacdbcdbeusuieDeVY">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d){6,7}?(.)","WEPrQ&rD&usui\\1D\\1VY",[])),
    <<"WEPrQacdbcdberDacdbcdbeusuieDeVY">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d){6,7}?(.)","WEPrQ&rD&usui\\1D\\1VY",[global])),
    <<"acdbcdbewQe">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d){5,6}(.)","&wQ\\1",[])),
    <<"acdbcdbewQe">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d){5,6}(.)","&wQ\\1",[global])),
    <<"SLsbe">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d){5,6}?(.)","SLs\\1",[])),
    <<"SLsbe">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d){5,6}?(.)","SLs\\1",[global])),
    <<"CReacdbcdbeKacdbcdbeQICTecCoH">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d){5,7}(.)","CRe&K&QICT\\1cCoH",[])),
    <<"CReacdbcdbeKacdbcdbeQICTecCoH">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d){5,7}(.)","CRe&K&QICT\\1cCoH",[global])),
    <<"hsybSbFJkfGRGe">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d){5,7}?(.)","hsy\\1S\\1FJkfGRG",[])),
    <<"hsybSbFJkfGRGe">> = iolist_to_binary(re:replace("acdbcdbe","a(?:b|c|d){5,7}?(.)","hsy\\1S\\1FJkfGRG",[global])),
    <<"cOu">> = iolist_to_binary(re:replace("ace","a(?:b|(c|e){1,2}?|d)+?(.)","\\1Ou",[])),
    <<"cOu">> = iolist_to_binary(re:replace("ace","a(?:b|(c|e){1,2}?|d)+?(.)","\\1Ou",[global])),
    <<"WCvfBkLAB">> = iolist_to_binary(re:replace("AB","^(.+)?B","WCvfBkL&",[])),
    <<"WCvfBkLAB">> = iolist_to_binary(re:replace("AB","^(.+)?B","WCvfBkL&",[global])),
    <<".NBWgjx.FGd..w">> = iolist_to_binary(re:replace(".","^([^a-z])|(\\^)$","\\1NBWgjx&FGd\\1&w",[])),
    <<".NBWgjx.FGd..w">> = iolist_to_binary(re:replace(".","^([^a-z])|(\\^)$","\\1NBWgjx&FGd\\1&w",[global])),
    <<"<&xOUT">> = iolist_to_binary(re:replace("<&OUT","^[<>]&","&x\\1",[])),
    <<"<&xOUT">> = iolist_to_binary(re:replace("<&OUT","^[<>]&","&x\\1",[global])),
    <<"huMWbaaaasRaEC">> = iolist_to_binary(re:replace("aaaaaaaaaa","^(a\\1?){4}$","huMWb\\1sRaEC",[])),
    <<"huMWbaaaasRaEC">> = iolist_to_binary(re:replace("aaaaaaaaaa","^(a\\1?){4}$","huMWb\\1sRaEC",[global])),
    <<"AB">> = iolist_to_binary(re:replace("AB","^(a\\1?){4}$","iex&&NCH&vuWaLb",[])),
    <<"AB">> = iolist_to_binary(re:replace("AB","^(a\\1?){4}$","iex&&NCH&vuWaLb",[global])),
    <<"aaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaa","^(a\\1?){4}$","yJihtas&O&R&I",[])),
    <<"aaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaa","^(a\\1?){4}$","yJihtas&O&R&I",[global])),
    <<"aaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaa","^(a\\1?){4}$","I\\1Hjk",[])),
    <<"aaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaa","^(a\\1?){4}$","I\\1Hjk",[global])),
    <<"EaaaamaaaavFGoBaaaaaaaaaaaaaaBPRaaaaFOhi">> = iolist_to_binary(re:replace("aaaaaaaaaa","^(a(?(1)\\1)){4}$","E\\1m\\1vFGoB\\1&BPR\\1FOhi",[])),
    <<"EaaaamaaaavFGoBaaaaaaaaaaaaaaBPRaaaaFOhi">> = iolist_to_binary(re:replace("aaaaaaaaaa","^(a(?(1)\\1)){4}$","E\\1m\\1vFGoB\\1&BPR\\1FOhi",[global])),
    <<"aaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaa","^(a(?(1)\\1)){4}$","NnSvRd&pb",[])),
    <<"aaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaa","^(a(?(1)\\1)){4}$","NnSvRd&pb",[global])),
    <<"aaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaa","^(a(?(1)\\1)){4}$","uBuYm&cqWpqxe",[])),
    <<"aaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaa","^(a(?(1)\\1)){4}$","uBuYm&cqWpqxe",[global])),
    <<"aEOTS">> = iolist_to_binary(re:replace("ab","(?<=a)b","E\\1OTS\\1\\1",[])),
    <<"aEOTS">> = iolist_to_binary(re:replace("ab","(?<=a)b","E\\1OTS\\1\\1",[global])),
    <<"cb">> = iolist_to_binary(re:replace("cb","(?<=a)b","McBMqqECo\\1AWh\\1",[])),
    <<"cb">> = iolist_to_binary(re:replace("cb","(?<=a)b","McBMqqECo\\1AWh\\1",[global])),
    <<"b">> = iolist_to_binary(re:replace("b","(?<=a)b","qj&\\1Vgmcpc\\1jpNX",[])),
    <<"b">> = iolist_to_binary(re:replace("b","(?<=a)b","qj&\\1Vgmcpc\\1jpNX",[global])),
    <<"abybdyvLRsRMbihr">> = iolist_to_binary(re:replace("ab","(?<!c)b","&y&dy\\1vLRsRM&ihr",[])),
    <<"abybdyvLRsRMbihr">> = iolist_to_binary(re:replace("ab","(?<!c)b","&y&dy\\1vLRsRM&ihr",[global])),
    <<"fgcwoIpb">> = iolist_to_binary(re:replace("b","(?<!c)b","fgcwoIp&",[])),
    <<"fgcwoIpb">> = iolist_to_binary(re:replace("b","(?<!c)b","fgcwoIp&",[global])),
    <<"WoWCFrcHpLbpDF">> = iolist_to_binary(re:replace("b","(?<!c)b","WoW\\1CFrcHpL&p\\1DF",[])),
    <<"WoWCFrcHpLbpDF">> = iolist_to_binary(re:replace("b","(?<!c)b","WoW\\1CFrcHpL&p\\1DF",[global])),
    <<"dHtGrvxuNababjVILFaba">> = iolist_to_binary(re:replace("aba","(?:..)*a","\\1dHtGrvxuN&bjVI\\1LF&",[])),
    <<"dHtGrvxuNababjVILFaba">> = iolist_to_binary(re:replace("aba","(?:..)*a","\\1dHtGrvxuN&bjVI\\1LF&",[global])),
    <<"FMCYajfPDpaePPmkBaNKba">> = iolist_to_binary(re:replace("aba","(?:..)*?a","FMCY&jfPDp&ePPmkBaNK",[])),
    <<"FMCYajfPDpaePPmkBaNKbFMCYajfPDpaePPmkBaNK">> = iolist_to_binary(re:replace("aba","(?:..)*?a","FMCY&jfPDp&ePPmkBaNK",[global])),
    <<"yKc">> = iolist_to_binary(re:replace("abc","^(?:b|a(?=(.)))*\\1","yK",[])),
    <<"yKc">> = iolist_to_binary(re:replace("abc","^(?:b|a(?=(.)))*\\1","yK",[global])),
    <<"yBxxcabc">> = iolist_to_binary(re:replace("abc","^(){3,5}","y\\1Bxx\\1c",[])),
    <<"yBxxcabc">> = iolist_to_binary(re:replace("abc","^(){3,5}","y\\1Bxx\\1c",[global])),
    ok.
run26() ->
    <<"aaxea">> = iolist_to_binary(re:replace("aax","^(a+)*ax","&e\\1",[])),
    <<"aaxea">> = iolist_to_binary(re:replace("aax","^(a+)*ax","&e\\1",[global])),
    <<"waIDivFpmRD">> = iolist_to_binary(re:replace("aax","^((a|b)+)*ax","w\\1IDivFpmRD",[])),
    <<"waIDivFpmRD">> = iolist_to_binary(re:replace("aax","^((a|b)+)*ax","w\\1IDivFpmRD",[global])),
    <<"mjJOdaaxVwUnuEHfFUblaaxE">> = iolist_to_binary(re:replace("aax","^((a|bc)+)*ax","mjJOd&VwUnuEHfFUbl&E",[])),
    <<"mjJOdaaxVwUnuEHfFUblaaxE">> = iolist_to_binary(re:replace("aax","^((a|bc)+)*ax","mjJOd&VwUnuEHfFUbl&E",[global])),
    <<"caqlXiaaCabtGMyJr">> = iolist_to_binary(re:replace("cab","(a|x)*ab","aqlXia\\1aC\\1&tGMyJr",[])),
    <<"caqlXiaaCabtGMyJr">> = iolist_to_binary(re:replace("cab","(a|x)*ab","aqlXia\\1aC\\1&tGMyJr",[global])),
    <<"cQsHTFT">> = iolist_to_binary(re:replace("cab","(a)*ab","Q\\1sHTFT",[])),
    <<"cQsHTFT">> = iolist_to_binary(re:replace("cab","(a)*ab","Q\\1sHTFT",[global])),
    <<"UdwHeAkxpFabTJI">> = iolist_to_binary(re:replace("ab","(?:(?i)a)b","\\1UdwHeAk\\1xpF&\\1T\\1JI",[])),
    <<"UdwHeAkxpFabTJI">> = iolist_to_binary(re:replace("ab","(?:(?i)a)b","\\1UdwHeAk\\1xpF&\\1T\\1JI",[global])),
    <<"paaupnNUOaYjabaXab">> = iolist_to_binary(re:replace("ab","((?i)a)b","pa\\1upnNUO\\1Yj&\\1X&",[])),
    <<"paaupnNUOaYjabaXab">> = iolist_to_binary(re:replace("ab","((?i)a)b","pa\\1upnNUO\\1Yj&\\1X&",[global])),
    <<"uDtryghFVAbxfAbI">> = iolist_to_binary(re:replace("Ab","(?:(?i)a)b","uD\\1trygh\\1FV&xf&I",[])),
    <<"uDtryghFVAbxfAbI">> = iolist_to_binary(re:replace("Ab","(?:(?i)a)b","uD\\1trygh\\1FV&xf&I",[global])),
    <<"AbyTFrAbAOfkVpLjJ">> = iolist_to_binary(re:replace("Ab","((?i)a)b","&yTFr&\\1OfkVpLjJ",[])),
    <<"AbyTFrAbAOfkVpLjJ">> = iolist_to_binary(re:replace("Ab","((?i)a)b","&yTFr&\\1OfkVpLjJ",[global])),
    <<"cb">> = iolist_to_binary(re:replace("cb","(?:(?i)a)b","D\\1MfU\\1&",[])),
    <<"cb">> = iolist_to_binary(re:replace("cb","(?:(?i)a)b","D\\1MfU\\1&",[global])),
    <<"aB">> = iolist_to_binary(re:replace("aB","(?:(?i)a)b","jLBDB&V&CLPU\\1eB&E",[])),
    <<"aB">> = iolist_to_binary(re:replace("aB","(?:(?i)a)b","jLBDB&V&CLPU\\1eB&E",[global])),
    <<"vXw">> = iolist_to_binary(re:replace("ab","(?i:a)b","vXw",[])),
    <<"vXw">> = iolist_to_binary(re:replace("ab","(?i:a)b","vXw",[global])),
    <<"DE">> = iolist_to_binary(re:replace("ab","((?i:a))b","DE",[])),
    <<"DE">> = iolist_to_binary(re:replace("ab","((?i:a))b","DE",[global])),
    <<"oIRAAbAboXH">> = iolist_to_binary(re:replace("Ab","(?i:a)b","oIRA&&oXH",[])),
    <<"oIRAAbAboXH">> = iolist_to_binary(re:replace("Ab","(?i:a)b","oIRA&&oXH",[global])),
    <<"AbAbJUwgUCSBcHYmFvAbOQ">> = iolist_to_binary(re:replace("Ab","((?i:a))b","&&JUwgUCSBcHYmFv&OQ",[])),
    <<"AbAbJUwgUCSBcHYmFvAbOQ">> = iolist_to_binary(re:replace("Ab","((?i:a))b","&&JUwgUCSBcHYmFv&OQ",[global])),
    <<"aB">> = iolist_to_binary(re:replace("aB","(?i:a)b","\\1&yu&\\1ps&A",[])),
    <<"aB">> = iolist_to_binary(re:replace("aB","(?i:a)b","\\1&yu&\\1ps&A",[global])),
    <<"aB">> = iolist_to_binary(re:replace("aB","(?i:a)b","TgOJWMyTNuK&rOFr\\1n",[])),
    <<"aB">> = iolist_to_binary(re:replace("aB","(?i:a)b","TgOJWMyTNuK&rOFr\\1n",[global])),
    <<"DxabYabEhabISWH">> = iolist_to_binary(re:replace("ab","(?:(?-i)a)b","Dx\\1&Y&E\\1h\\1&ISWH",[caseless])),
    <<"DxabYabEhabISWH">> = iolist_to_binary(re:replace("ab","(?:(?-i)a)b","Dx\\1&Y&E\\1h\\1&ISWH",[caseless,global])),
    <<"Qw">> = iolist_to_binary(re:replace("ab","((?-i)a)b","Qw",[caseless])),
    <<"Qw">> = iolist_to_binary(re:replace("ab","((?-i)a)b","Qw",[caseless,global])),
    <<"O">> = iolist_to_binary(re:replace("aB","(?:(?-i)a)b","O",[caseless])),
    <<"O">> = iolist_to_binary(re:replace("aB","(?:(?-i)a)b","O",[caseless,global])),
    ok.
run27() ->
    <<"vaBwErLBaaBFLQaOAoaBJPx">> = iolist_to_binary(re:replace("aB","((?-i)a)b","v&wErLB\\1&FLQaOAo&JPx",[caseless])),
    <<"vaBwErLBaaBFLQaOAoaBJPx">> = iolist_to_binary(re:replace("aB","((?-i)a)b","v&wErLB\\1&FLQaOAo&JPx",[caseless,global])),
    <<"lphGtTIqlw">> = iolist_to_binary(re:replace("aB","(?:(?-i)a)b","lph\\1GtTIqlw",[caseless])),
    <<"lphGtTIqlw">> = iolist_to_binary(re:replace("aB","(?:(?-i)a)b","lph\\1GtTIqlw",[caseless,global])),
    <<"Ab">> = iolist_to_binary(re:replace("Ab","(?:(?-i)a)b","Ubn",[caseless])),
    <<"Ab">> = iolist_to_binary(re:replace("Ab","(?:(?-i)a)b","Ubn",[caseless,global])),
    <<"AB">> = iolist_to_binary(re:replace("AB","(?:(?-i)a)b","&DcgWCx",[caseless])),
    <<"AB">> = iolist_to_binary(re:replace("AB","(?:(?-i)a)b","&DcgWCx",[caseless,global])),
    <<"H">> = iolist_to_binary(re:replace("ab","(?-i:a)b","H",[caseless])),
    <<"H">> = iolist_to_binary(re:replace("ab","(?-i:a)b","H",[caseless,global])),
    <<"NmNp">> = iolist_to_binary(re:replace("ab","((?-i:a))b","NmNp",[caseless])),
    <<"NmNp">> = iolist_to_binary(re:replace("ab","((?-i:a))b","NmNp",[caseless,global])),
    <<"aBaBSTBJNuWaBfUX">> = iolist_to_binary(re:replace("aB","(?-i:a)b","&&STBJNu\\1W\\1&fUX",[caseless])),
    <<"aBaBSTBJNuWaBfUX">> = iolist_to_binary(re:replace("aB","(?-i:a)b","&&STBJNu\\1W\\1&fUX",[caseless,global])),
    <<"otma">> = iolist_to_binary(re:replace("aB","((?-i:a))b","otm\\1",[caseless])),
    <<"otma">> = iolist_to_binary(re:replace("aB","((?-i:a))b","otm\\1",[caseless,global])),
    <<"AB">> = iolist_to_binary(re:replace("AB","(?-i:a)b","\\1wnR\\1Bt\\1Wp",[caseless])),
    <<"AB">> = iolist_to_binary(re:replace("AB","(?-i:a)b","\\1wnR\\1Bt\\1Wp",[caseless,global])),
    <<"Ab">> = iolist_to_binary(re:replace("Ab","(?-i:a)b","\\1\\1\\1cfCNQPaST\\1n",[caseless])),
    <<"Ab">> = iolist_to_binary(re:replace("Ab","(?-i:a)b","\\1\\1\\1cfCNQPaST\\1n",[caseless,global])),
    <<"KqbIu">> = iolist_to_binary(re:replace("aB","(?-i:a)b","KqbIu\\1",[caseless])),
    <<"KqbIu">> = iolist_to_binary(re:replace("aB","(?-i:a)b","KqbIu\\1",[caseless,global])),
    <<"mSBBDWnWtWlJVLdWWaaBa">> = iolist_to_binary(re:replace("aB","((?-i:a))b","mSBBDWnWtWlJVLdWW\\1&\\1",[caseless])),
    <<"mSBBDWnWtWlJVLdWWaaBa">> = iolist_to_binary(re:replace("aB","((?-i:a))b","mSBBDWnWtWlJVLdWW\\1&\\1",[caseless,global])),
    <<"Ab">> = iolist_to_binary(re:replace("Ab","(?-i:a)b","gIkgDq\\1EBa\\1PTmS&",[caseless])),
    <<"Ab">> = iolist_to_binary(re:replace("Ab","(?-i:a)b","gIkgDq\\1EBa\\1PTmS&",[caseless,global])),
    <<"AB">> = iolist_to_binary(re:replace("AB","(?-i:a)b","Sg&&rIwBxW&MAd",[caseless])),
    <<"AB">> = iolist_to_binary(re:replace("AB","(?-i:a)b","Sg&&rIwBxW&MAd",[caseless,global])),
    <<"AB">> = iolist_to_binary(re:replace("AB","((?-i:a.))b","\\1\\1IkVJFLsC\\1&qbiO",[caseless])),
    <<"AB">> = iolist_to_binary(re:replace("AB","((?-i:a.))b","\\1\\1IkVJFLsC\\1&qbiO",[caseless,global])),
    <<"a
B">> = iolist_to_binary(re:replace("a
B","((?-i:a.))b","&r",[caseless])),
    <<"a
B">> = iolist_to_binary(re:replace("a
B","((?-i:a.))b","&r",[caseless,global])),
    <<"ma
BJa
a
Fh">> = iolist_to_binary(re:replace("a
B","((?s-i:a.))b","m&J\\1\\1Fh",[caseless])),
    <<"ma
BJa
a
Fh">> = iolist_to_binary(re:replace("a
B","((?s-i:a.))b","m&J\\1\\1Fh",[caseless,global])),
    <<"ysVqaiqxHWEb">> = iolist_to_binary(re:replace("cabbbb","(?:c|d)(?:)(?:a(?:)(?:b)(?:b(?:))(?:b(?:)(?:b)))","ys\\1\\1Vqai\\1qx\\1HWEb",[])),
    <<"ysVqaiqxHWEb">> = iolist_to_binary(re:replace("cabbbb","(?:c|d)(?:)(?:a(?:)(?:b)(?:b(?:))(?:b(?:)(?:b)))","ys\\1\\1Vqai\\1qx\\1HWEb",[global])),
    <<"eIyFD">> = iolist_to_binary(re:replace("caaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb","(?:c|d)(?:)(?:aaaaaaaa(?:)(?:bbbbbbbb)(?:bbbbbbbb(?:))(?:bbbbbbbb(?:)(?:bbbbbbbb)))","\\1eIyFD\\1",[])),
    <<"eIyFD">> = iolist_to_binary(re:replace("caaaaaaaabbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb","(?:c|d)(?:)(?:aaaaaaaa(?:)(?:bbbbbbbb)(?:bbbbbbbb(?:))(?:bbbbbbbb(?:)(?:bbbbbbbb)))","\\1eIyFD\\1",[global])),
    <<"UUAb4abAb4abGPwAb4abAHE">> = iolist_to_binary(re:replace("Ab4ab","(ab)\\d\\1","UU&&GPw&AHE",[caseless])),
    <<"UUAb4abAb4abGPwAb4abAHE">> = iolist_to_binary(re:replace("Ab4ab","(ab)\\d\\1","UU&&GPw&AHE",[caseless,global])),
    <<"SKAyypUXUEabIHTdcqvab4Abr">> = iolist_to_binary(re:replace("ab4Ab","(ab)\\d\\1","SKAyypUXUE\\1IHTdcqv&r",[caseless])),
    <<"SKAyypUXUEabIHTdcqvab4Abr">> = iolist_to_binary(re:replace("ab4Ab","(ab)\\d\\1","SKAyypUXUE\\1IHTdcqv&r",[caseless,global])),
    <<"qfoobar1234bazkKlufoobar1234bazPPfoobar1234bazf">> = iolist_to_binary(re:replace("foobar1234baz","foo\\w*\\d{4}baz","q&kKlu&PP&f",[])),
    <<"qfoobar1234bazkKlufoobar1234bazPPfoobar1234bazf">> = iolist_to_binary(re:replace("foobar1234baz","foo\\w*\\d{4}baz","q&kKlu&PP&f",[global])),
    <<"x~~Wnm">> = iolist_to_binary(re:replace("x~~","x(~~)*(?:(?:F)?)?","&Wnm",[])),
    <<"x~~Wnm">> = iolist_to_binary(re:replace("x~~","x(~~)*(?:(?:F)?)?","&Wnm",[global])),
    <<"paPAAKruyaaacWwd">> = iolist_to_binary(re:replace("aaac","^a(?#xxx){3}c","paPAAKruy&Wwd",[])),
    <<"paPAAKruyaaacWwd">> = iolist_to_binary(re:replace("aaac","^a(?#xxx){3}c","paPAAKruy&Wwd",[global])),
    ok.
run28() ->
    <<"ImJu">> = iolist_to_binary(re:replace("aaac","^a (?#xxx) (?#yyy) {3}c","I\\1m\\1Ju",[extended])),
    <<"ImJu">> = iolist_to_binary(re:replace("aaac","^a (?#xxx) (?#yyy) {3}c","I\\1m\\1Ju",[extended,global])),
    <<"B
B">> = iolist_to_binary(re:replace("B
B","(?<![cd])b","k\\1dsET\\1ioU\\1cshOFDldx",[])),
    <<"B
B">> = iolist_to_binary(re:replace("B
B","(?<![cd])b","k\\1dsET\\1ioU\\1cshOFDldx",[global])),
    <<"dbcb">> = iolist_to_binary(re:replace("dbcb","(?<![cd])b","uv\\1",[])),
    <<"dbcb">> = iolist_to_binary(re:replace("dbcb","(?<![cd])b","uv\\1",[global])),
    <<"dblacb">> = iolist_to_binary(re:replace("dbaacb","(?<![cd])[ab]","l",[])),
    <<"dbllcb">> = iolist_to_binary(re:replace("dbaacb","(?<![cd])[ab]","l",[global])),
    <<"dbvyfPyXonrRafJaacb">> = iolist_to_binary(re:replace("dbaacb","(?<!(c|d))[ab]","vyfP\\1yX\\1onrR&f\\1\\1J&",[])),
    <<"dbvyfPyXonrRafJavyfPyXonrRafJacb">> = iolist_to_binary(re:replace("dbaacb","(?<!(c|d))[ab]","vyfP\\1yX\\1onrR&f\\1\\1J&",[global])),
    <<"cdaccgEbRxnGkbbmK">> = iolist_to_binary(re:replace("cdaccb","(?<!cd)[ab]","gE&RxnGk&&\\1\\1mK",[])),
    <<"cdaccgEbRxnGkbbmK">> = iolist_to_binary(re:replace("cdaccb","(?<!cd)[ab]","gE&RxnGk&&\\1\\1mK",[global])),
    <<"xJwDKvLJC">> = iolist_to_binary(re:replace("","^(?:a?b?)*$","xJw&DKvLJC",[])),
    <<"xJwDKvLJC">> = iolist_to_binary(re:replace("","^(?:a?b?)*$","xJw&DKvLJC",[global])),
    <<"gm">> = iolist_to_binary(re:replace("a","^(?:a?b?)*$","gm",[])),
    <<"gm">> = iolist_to_binary(re:replace("a","^(?:a?b?)*$","gm",[global])),
    <<"RrLabababUVLUehw">> = iolist_to_binary(re:replace("ab","^(?:a?b?)*$","RrL\\1&&&UVLUehw",[])),
    <<"RrLabababUVLUehw">> = iolist_to_binary(re:replace("ab","^(?:a?b?)*$","RrL\\1&&&UVLUehw",[global])),
    <<"giaaaOaaaaaaqXGgxFhaaadprog">> = iolist_to_binary(re:replace("aaa","^(?:a?b?)*$","gi&O&&qXGgxFh&dprog",[])),
    <<"giaaaOaaaaaaqXGgxFhaaadprog">> = iolist_to_binary(re:replace("aaa","^(?:a?b?)*$","gi&O&&qXGgxFh&dprog",[global])),
    <<"dbcb">> = iolist_to_binary(re:replace("dbcb","^(?:a?b?)*$","q&Rt\\1XCOk&dCHWAxqm&",[])),
    <<"dbcb">> = iolist_to_binary(re:replace("dbcb","^(?:a?b?)*$","q&Rt\\1XCOk&dCHWAxqm&",[global])),
    <<"a--">> = iolist_to_binary(re:replace("a--","^(?:a?b?)*$","e&y",[])),
    <<"a--">> = iolist_to_binary(re:replace("a--","^(?:a?b?)*$","e&y",[global])),
    <<"aa--">> = iolist_to_binary(re:replace("aa--","^(?:a?b?)*$","Mu&NYopF&e\\1u",[])),
    <<"aa--">> = iolist_to_binary(re:replace("aa--","^(?:a?b?)*$","Mu&NYopF&e\\1u",[global])),
    <<"PgdiGyTFyntpga

c">> = iolist_to_binary(re:replace("a
b
c","((?s)^a(.))((?m)^b$)","PgdiGyTFyntpg\\1",[])),
    <<"PgdiGyTFyntpga

c">> = iolist_to_binary(re:replace("a
b
c","((?s)^a(.))((?m)^b$)","PgdiGyTFyntpg\\1",[global])),
    <<"a
h
c">> = iolist_to_binary(re:replace("a
b
c","((?m)^b$)","h",[])),
    <<"a
h
c">> = iolist_to_binary(re:replace("a
b
c","((?m)^b$)","h",[global])),
    <<"a
UwxbpwNvAsyQI">> = iolist_to_binary(re:replace("a
b","(?m)^b","\\1UwxbpwNvAsyQI",[])),
    <<"a
UwxbpwNvAsyQI">> = iolist_to_binary(re:replace("a
b","(?m)^b","\\1UwxbpwNvAsyQI",[global])),
    <<"a
M">> = iolist_to_binary(re:replace("a
b","(?m)^(b)","M",[])),
    <<"a
M">> = iolist_to_binary(re:replace("a
b","(?m)^(b)","M",[global])),
    <<"a
hbt">> = iolist_to_binary(re:replace("a
b","((?m)^b)","h&t",[])),
    <<"a
hbt">> = iolist_to_binary(re:replace("a
b","((?m)^b)","h&t",[global])),
    <<"avMPmb
blHguqIoSmcuudI">> = iolist_to_binary(re:replace("a
b","\\n((?m)^b)","vMPm\\1&lHguqIoSmcuudI",[])),
    <<"avMPmb
blHguqIoSmcuudI">> = iolist_to_binary(re:replace("a
b","\\n((?m)^b)","vMPm\\1&lHguqIoSmcuudI",[global])),
    <<"a
bRhLw">> = iolist_to_binary(re:replace("a
b
c","((?s).)c(?!.)","RhLw",[])),
    <<"a
bRhLw">> = iolist_to_binary(re:replace("a
b
c","((?s).)c(?!.)","RhLw",[global])),
    <<"a
b
cJqvle

c
co
cm
cFUTm">> = iolist_to_binary(re:replace("a
b
c","((?s).)c(?!.)","&Jqvle\\1&&o&m&FUTm",[])),
    <<"a
b
cJqvle

c
co
cm
cFUTm">> = iolist_to_binary(re:replace("a
b
c","((?s).)c(?!.)","&Jqvle\\1&&o&m&FUTm",[global])),
    <<"a
ac">> = iolist_to_binary(re:replace("a
b
c","((?s)b.)c(?!.)","ac",[])),
    <<"a
ac">> = iolist_to_binary(re:replace("a
b
c","((?s)b.)c(?!.)","ac",[global])),
    <<"a
O">> = iolist_to_binary(re:replace("a
b
c","((?s)b.)c(?!.)","O",[])),
    <<"a
O">> = iolist_to_binary(re:replace("a
b
c","((?s)b.)c(?!.)","O",[global])),
    <<"a
b
c">> = iolist_to_binary(re:replace("a
b
c","()^b","scml",[])),
    <<"a
b
c">> = iolist_to_binary(re:replace("a
b
c","()^b","scml",[global])),
    <<"a
b
c">> = iolist_to_binary(re:replace("a
b
c","()^b","lPmB\\1jogUPNE\\1",[])),
    <<"a
b
c">> = iolist_to_binary(re:replace("a
b
c","()^b","lPmB\\1jogUPNE\\1",[global])),
    <<"a
lytYebWbbFmbccWbV
c">> = iolist_to_binary(re:replace("a
b
c","((?m)^b)","lytYe&W&&Fm&ccW\\1V",[])),
    <<"a
lytYebWbbFmbccWbV
c">> = iolist_to_binary(re:replace("a
b
c","((?m)^b)","lytYe&W&&Fm&ccW\\1V",[global])),
    <<"a">> = iolist_to_binary(re:replace("a","(x)?(?(1)a|b)","\\1\\1q",[])),
    <<"a">> = iolist_to_binary(re:replace("a","(x)?(?(1)a|b)","\\1\\1q",[global])),
    <<"a">> = iolist_to_binary(re:replace("a","(x)?(?(1)a|b)","x\\1Pv\\1wqaXlIBys\\1BNnQs",[])),
    <<"a">> = iolist_to_binary(re:replace("a","(x)?(?(1)a|b)","x\\1Pv\\1wqaXlIBys\\1BNnQs",[global])),
    <<"vJraXpcvqi">> = iolist_to_binary(re:replace("a","(x)?(?(1)b|a)","vJr\\1&Xpcvqi",[])),
    <<"vJraXpcvqi">> = iolist_to_binary(re:replace("a","(x)?(?(1)b|a)","vJr\\1&Xpcvqi",[global])),
    ok.
run29() ->
    <<"haKhhw">> = iolist_to_binary(re:replace("a","()?(?(1)b|a)","h&Khhw",[])),
    <<"haKhhw">> = iolist_to_binary(re:replace("a","()?(?(1)b|a)","h&Khhw",[global])),
    <<"rfOTksYhKEDaaKoWu">> = iolist_to_binary(re:replace("a","()?(?(1)a|b)","rfOT\\1ksYhKED&&K\\1oWu",[])),
    <<"rfOTksYhKEDaaKoWu">> = iolist_to_binary(re:replace("a","()?(?(1)a|b)","rfOT\\1ksYhKED&&K\\1oWu",[global])),
    <<"(MGbpmv">> = iolist_to_binary(re:replace("(blah)","^(\\()?blah(?(1)(\\)))$","\\1MGbpmv",[])),
    <<"(MGbpmv">> = iolist_to_binary(re:replace("(blah)","^(\\()?blah(?(1)(\\)))$","\\1MGbpmv",[global])),
    <<"udAFEstNiUeKkd">> = iolist_to_binary(re:replace("blah","^(\\()?blah(?(1)(\\)))$","udAFEstNiUeKkd",[])),
    <<"udAFEstNiUeKkd">> = iolist_to_binary(re:replace("blah","^(\\()?blah(?(1)(\\)))$","udAFEstNiUeKkd",[global])),
    <<"a">> = iolist_to_binary(re:replace("a","^(\\()?blah(?(1)(\\)))$","&vD&&GllMCdwv",[])),
    <<"a">> = iolist_to_binary(re:replace("a","^(\\()?blah(?(1)(\\)))$","&vD&&GllMCdwv",[global])),
    <<"blah)">> = iolist_to_binary(re:replace("blah)","^(\\()?blah(?(1)(\\)))$","S\\1&b\\1",[])),
    <<"blah)">> = iolist_to_binary(re:replace("blah)","^(\\()?blah(?(1)(\\)))$","S\\1&b\\1",[global])),
    <<"(blah">> = iolist_to_binary(re:replace("(blah","^(\\()?blah(?(1)(\\)))$","COkG&q&pR&wm\\1",[])),
    <<"(blah">> = iolist_to_binary(re:replace("(blah","^(\\()?blah(?(1)(\\)))$","COkG&q&pR&wm\\1",[global])),
    <<"(blah)(YUF">> = iolist_to_binary(re:replace("(blah)","^(\\(+)?blah(?(1)(\\)))$","&\\1YUF",[])),
    <<"(blah)(YUF">> = iolist_to_binary(re:replace("(blah)","^(\\(+)?blah(?(1)(\\)))$","&\\1YUF",[global])),
    <<"keblahn">> = iolist_to_binary(re:replace("blah","^(\\(+)?blah(?(1)(\\)))$","\\1ke&n",[])),
    <<"keblahn">> = iolist_to_binary(re:replace("blah","^(\\(+)?blah(?(1)(\\)))$","\\1ke&n",[global])),
    <<"blah)">> = iolist_to_binary(re:replace("blah)","^(\\(+)?blah(?(1)(\\)))$","Tp",[])),
    <<"blah)">> = iolist_to_binary(re:replace("blah)","^(\\(+)?blah(?(1)(\\)))$","Tp",[global])),
    <<"(blah">> = iolist_to_binary(re:replace("(blah","^(\\(+)?blah(?(1)(\\)))$","cWR\\1",[])),
    <<"(blah">> = iolist_to_binary(re:replace("(blah","^(\\(+)?blah(?(1)(\\)))$","cWR\\1",[global])),
    <<"Ig">> = iolist_to_binary(re:replace("a","(?(?!a)b|a)","I\\1g",[])),
    <<"Ig">> = iolist_to_binary(re:replace("a","(?(?!a)b|a)","I\\1g",[global])),
    <<"a">> = iolist_to_binary(re:replace("a","(?(?=a)b|a)","&\\1e",[])),
    <<"a">> = iolist_to_binary(re:replace("a","(?(?=a)b|a)","&\\1e",[global])),
    <<"a">> = iolist_to_binary(re:replace("a","(?(?=a)b|a)","YHPf",[])),
    <<"a">> = iolist_to_binary(re:replace("a","(?(?=a)b|a)","YHPf",[global])),
    <<"qDYnUXHWSlxXQRHVxU">> = iolist_to_binary(re:replace("a","(?(?=a)a|b)","qDYnUXHWSlxXQRHVxU\\1",[])),
    <<"qDYnUXHWSlxXQRHVxU">> = iolist_to_binary(re:replace("a","(?(?=a)a|b)","qDYnUXHWSlxXQRHVxU\\1",[global])),
    <<"apMu">> = iolist_to_binary(re:replace("aaab","(?=(a+?))(\\1ab)","pMu",[])),
    <<"apMu">> = iolist_to_binary(re:replace("aaab","(?=(a+?))(\\1ab)","pMu",[global])),
    <<"ntLDenfone:">> = iolist_to_binary(re:replace("one:","(\\w+:)+","ntLDenf\\1",[])),
    <<"ntLDenfone:">> = iolist_to_binary(re:replace("one:","(\\w+:)+","ntLDenf\\1",[global])),
    <<"aka">> = iolist_to_binary(re:replace("a","$(?<=^(a))","k\\1",[])),
    <<"aka">> = iolist_to_binary(re:replace("a","$(?<=^(a))","k\\1",[global])),
    <<"adDECvKaabaaabKa">> = iolist_to_binary(re:replace("aaab","(?=(a+?))(\\1ab)","dDECvK&\\1&K\\1",[])),
    <<"adDECvKaabaaabKa">> = iolist_to_binary(re:replace("aaab","(?=(a+?))(\\1ab)","dDECvK&\\1&K\\1",[global])),
    <<"aaab">> = iolist_to_binary(re:replace("aaab","^(?=(a+?))\\1ab","\\1VkX&ROnLhn",[])),
    <<"aaab">> = iolist_to_binary(re:replace("aaab","^(?=(a+?))\\1ab","\\1VkX&ROnLhn",[global])),
    <<"aaab">> = iolist_to_binary(re:replace("aaab","^(?=(a+?))\\1ab","s&fIigwcU\\1fcAt\\1Ad\\1d",[])),
    <<"aaab">> = iolist_to_binary(re:replace("aaab","^(?=(a+?))\\1ab","s&fIigwcU\\1fcAt\\1Ad\\1d",[global])),
    <<"wkVJSCabcdbeusn">> = iolist_to_binary(re:replace("abcd","([\\w:]+::)?(\\w+)$","w\\1kVJSC&beus\\1\\1n",[])),
    <<"wkVJSCabcdbeusn">> = iolist_to_binary(re:replace("abcd","([\\w:]+::)?(\\w+)$","w\\1kVJSC&beus\\1\\1n",[global])),
    <<"fIEmgxyxy:z:::XgAmoxnNTxy:z:::abcdb">> = iolist_to_binary(re:replace("xy:z:::abcd","([\\w:]+::)?(\\w+)$","fIEmgxy\\1XgAmoxnNT&b",[])),
    <<"fIEmgxyxy:z:::XgAmoxnNTxy:z:::abcdb">> = iolist_to_binary(re:replace("xy:z:::abcd","([\\w:]+::)?(\\w+)$","fIEmgxy\\1XgAmoxnNT&b",[global])),
    <<"YSwweMKEtREGmRxcEpd">> = iolist_to_binary(re:replace("aexycd","^[^bcd]*(c+)","YSwweMKEtREGmRx\\1Ep",[])),
    <<"YSwweMKEtREGmRxcEpd">> = iolist_to_binary(re:replace("aexycd","^[^bcd]*(c+)","YSwweMKEtREGmRx\\1Ep",[global])),
    <<"cJMWvNaabHEaabaagTLgLgw">> = iolist_to_binary(re:replace("caab","(a*)b+","JMWvN&HE&\\1gTLgLgw",[])),
    <<"cJMWvNaabHEaabaagTLgLgw">> = iolist_to_binary(re:replace("caab","(a*)b+","JMWvN&HE&\\1gTLgLgw",[global])),
    <<"LoaDSHAAabcdcNcg">> = iolist_to_binary(re:replace("abcd","([\\w:]+::)?(\\w+)$","LoaDSHAA&c\\1Ncg",[])),
    <<"LoaDSHAAabcdcNcg">> = iolist_to_binary(re:replace("abcd","([\\w:]+::)?(\\w+)$","LoaDSHAA&c\\1Ncg",[global])),
    <<"AWnYrnkPxy:z:::abcd">> = iolist_to_binary(re:replace("xy:z:::abcd","([\\w:]+::)?(\\w+)$","AWnYrnkP&",[])),
    <<"AWnYrnkPxy:z:::abcd">> = iolist_to_binary(re:replace("xy:z:::abcd","([\\w:]+::)?(\\w+)$","AWnYrnkP&",[global])),
    <<"abcd:">> = iolist_to_binary(re:replace("abcd:","([\\w:]+::)?(\\w+)$","i&YPJxCXsht",[])),
    <<"abcd:">> = iolist_to_binary(re:replace("abcd:","([\\w:]+::)?(\\w+)$","i&YPJxCXsht",[global])),
    <<"abcd:">> = iolist_to_binary(re:replace("abcd:","([\\w:]+::)?(\\w+)$","OdSmgEn&bU&x&&ji\\1D",[])),
    <<"abcd:">> = iolist_to_binary(re:replace("abcd:","([\\w:]+::)?(\\w+)$","OdSmgEn&bU&x&&ji\\1D",[global])),
    <<"ITOSQRaexycJRMPdod">> = iolist_to_binary(re:replace("aexycd","^[^bcd]*(c+)","ITOSQR&JRMPdo",[])),
    <<"ITOSQRaexycJRMPdod">> = iolist_to_binary(re:replace("aexycd","^[^bcd]*(c+)","ITOSQR&JRMPdo",[global])),
    ok.
run30() ->
    <<"VyaaabaaabecaaabTLeQ">> = iolist_to_binary(re:replace("aaab","(?>a+)b","Vy&&ec&TLeQ",[])),
    <<"VyaaabaaabecaaabTLeQ">> = iolist_to_binary(re:replace("aaab","(?>a+)b","Vy&&ec&TLeQ",[global])),
    <<"aPCmRtstvtrOjnb]:">> = iolist_to_binary(re:replace("a:[b]:","([[:]+)","PCmRtstvtrOjn",[])),
    <<"aPCmRtstvtrOjnb]PCmRtstvtrOjn">> = iolist_to_binary(re:replace("a:[b]:","([[:]+)","PCmRtstvtrOjn",[global])),
    <<"aSa=[b]=">> = iolist_to_binary(re:replace("a=[b]=","([[=]+)","Sa\\1",[])),
    <<"aSa=[b]Sa=">> = iolist_to_binary(re:replace("a=[b]=","([[=]+)","Sa\\1",[global])),
    <<"a.[p.[YGkIxvjAQ.[XrH.[.[Db].">> = iolist_to_binary(re:replace("a.[b].","([[.]+)","\\1p&YGkIxvjAQ&XrH\\1\\1D",[])),
    <<"a.[p.[YGkIxvjAQ.[XrH.[.[Db].p.YGkIxvjAQ.XrH..D">> = iolist_to_binary(re:replace("a.[b].","([[.]+)","\\1p&YGkIxvjAQ&XrH\\1\\1D",[global])),
    <<"ggQ">> = iolist_to_binary(re:replace("aaab","((?>a+)b)","ggQ",[])),
    <<"ggQ">> = iolist_to_binary(re:replace("aaab","((?>a+)b)","ggQ",[global])),
    <<"hdkaaadxeeaaaQGHCDfdU">> = iolist_to_binary(re:replace("aaab","(?>(a+))b","hdk\\1dxee\\1QGHCDfdU",[])),
    <<"hdkaaadxeeaaaQGHCDfdU">> = iolist_to_binary(re:replace("aaab","(?>(a+))b","hdk\\1dxee\\1QGHCDfdU",[global])),
    <<"((fnjTxfWdxoabc(ade)ufh()()x">> = iolist_to_binary(re:replace("((abc(ade)ufh()()x","((?>[^()]+)|\\([^()]*\\))+","fnjT\\1fWd\\1o&",[])),
    <<"((fnjTxfWdxoabc(ade)ufh()()x">> = iolist_to_binary(re:replace("((abc(ade)ufh()()x","((?>[^()]+)|\\([^()]*\\))+","fnjT\\1fWd\\1o&",[global])),
    <<"aaab">> = iolist_to_binary(re:replace("aaab","a\\Z","Gq\\1EOfPIdb",[])),
    <<"aaab">> = iolist_to_binary(re:replace("aaab","a\\Z","Gq\\1EOfPIdb",[global])),
    <<"a
b">> = iolist_to_binary(re:replace("a
b","a\\Z","Q&",[])),
    <<"a
b">> = iolist_to_binary(re:replace("a
b","a\\Z","Q&",[global])),
    <<"a
gEn">> = iolist_to_binary(re:replace("a
b","b\\Z","gEn\\1",[])),
    <<"a
gEn">> = iolist_to_binary(re:replace("a
b","b\\Z","gEn\\1",[global])),
    <<"a
PlsbmuNytHsf">> = iolist_to_binary(re:replace("a
b","b\\Z","P\\1ls&muNytHsf",[])),
    <<"a
PlsbmuNytHsf">> = iolist_to_binary(re:replace("a
b","b\\Z","P\\1ls&muNytHsf",[global])),
    <<"a
SJgPidb">> = iolist_to_binary(re:replace("a
b","b\\z","SJgPid&",[])),
    <<"a
SJgPidb">> = iolist_to_binary(re:replace("a
b","b\\z","SJgPid&",[global])),
    <<"NJFRwapl">> = iolist_to_binary(re:replace("a","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","NJFRw&pl",[])),
    <<"NJFRwapl">> = iolist_to_binary(re:replace("a","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","NJFRw&pl",[global])),
    <<"abcE">> = iolist_to_binary(re:replace("abc","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","&E",[])),
    <<"abcE">> = iolist_to_binary(re:replace("abc","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","&E",[global])),
    <<"owcnsqyFea-bEQa-b">> = iolist_to_binary(re:replace("a-b","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","owcnsqyFe&EQ&",[])),
    <<"owcnsqyFea-bEQa-b">> = iolist_to_binary(re:replace("a-b","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","owcnsqyFe&EQ&",[global])),
    <<"ruK0-90-90-9jGN0-9oQda0-9O">> = iolist_to_binary(re:replace("0-9","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","ruK&&&jGN&oQda&O",[])),
    <<"ruK0-90-90-9jGN0-9oQda0-9O">> = iolist_to_binary(re:replace("0-9","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","ruK&&&jGN&oQda&O",[global])),
    <<"Na.bWHMsODna.bQCvNsa.b">> = iolist_to_binary(re:replace("a.b","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","N&WHM\\1sODn&QCvN\\1s&",[])),
    <<"Na.bWHMsODna.bQCvNsa.b">> = iolist_to_binary(re:replace("a.b","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","N&WHM\\1sODn&QCvN\\1s&",[global])),
    <<"sgQuaFh">> = iolist_to_binary(re:replace("5.6.7","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","s\\1gQuaF\\1h",[])),
    <<"sgQuaFh">> = iolist_to_binary(re:replace("5.6.7","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","s\\1gQuaF\\1h",[global])),
    <<"lmSQthe.quick.brown.foxaXJqwxUYswqthe.quick.brown.fox">> = iolist_to_binary(re:replace("the.quick.brown.fox","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","l\\1mSQ&aXJqwxUYswq&",[])),
    <<"lmSQthe.quick.brown.foxaXJqwxUYswqthe.quick.brown.fox">> = iolist_to_binary(re:replace("the.quick.brown.fox","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","l\\1mSQ&aXJqwxUYswq&",[global])),
    <<"dSPa100.b200.300ccRcbUkgXmcHGW">> = iolist_to_binary(re:replace("a100.b200.300c","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","dSP&\\1cRcbUkgXmcHGW\\1",[])),
    <<"dSPa100.b200.300ccRcbUkgXmcHGW">> = iolist_to_binary(re:replace("a100.b200.300c","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","dSP&\\1cRcbUkgXmcHGW\\1",[global])),
    <<"IRqW">> = iolist_to_binary(re:replace("12-ab.1245","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","IRqW",[])),
    <<"IRqW">> = iolist_to_binary(re:replace("12-ab.1245","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","IRqW",[global])),
    <<"">> = iolist_to_binary(re:replace("","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","y\\1kWXv\\1th&UfKUlbLTp",[])),
    <<"">> = iolist_to_binary(re:replace("","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","y\\1kWXv\\1th&UfKUlbLTp",[global])),
    <<".a">> = iolist_to_binary(re:replace(".a","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","pelUw",[])),
    <<".a">> = iolist_to_binary(re:replace(".a","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","pelUw",[global])),
    <<"-a">> = iolist_to_binary(re:replace("-a","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","cfhcWSNABY\\1NMLh",[])),
    <<"-a">> = iolist_to_binary(re:replace("-a","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","cfhcWSNABY\\1NMLh",[global])),
    <<"a-">> = iolist_to_binary(re:replace("a-","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","\\1tf\\1q",[])),
    <<"a-">> = iolist_to_binary(re:replace("a-","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","\\1tf\\1q",[global])),
    <<"a.">> = iolist_to_binary(re:replace("a.","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","&OEf",[])),
    <<"a.">> = iolist_to_binary(re:replace("a.","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","&OEf",[global])),
    <<"a_b">> = iolist_to_binary(re:replace("a_b","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","Vmfyu",[])),
    <<"a_b">> = iolist_to_binary(re:replace("a_b","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","Vmfyu",[global])),
    <<"a.-">> = iolist_to_binary(re:replace("a.-","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","FI\\1\\1MUVjTE",[])),
    <<"a.-">> = iolist_to_binary(re:replace("a.-","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","FI\\1\\1MUVjTE",[global])),
    <<"a..">> = iolist_to_binary(re:replace("a..","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","eicDcY&oLhM&&KRq",[])),
    <<"a..">> = iolist_to_binary(re:replace("a..","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","eicDcY&oLhM&&KRq",[global])),
    <<"ab..bc">> = iolist_to_binary(re:replace("ab..bc","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","&qs&r",[])),
    <<"ab..bc">> = iolist_to_binary(re:replace("ab..bc","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","&qs&r",[global])),
    <<"the.quick.brown.fox-">> = iolist_to_binary(re:replace("the.quick.brown.fox-","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","\\1\\1OSJ&",[])),
    <<"the.quick.brown.fox-">> = iolist_to_binary(re:replace("the.quick.brown.fox-","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","\\1\\1OSJ&",[global])),
    <<"the.quick.brown.fox.">> = iolist_to_binary(re:replace("the.quick.brown.fox.","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","HYIA&\\1Rh&&&GQ",[])),
    <<"the.quick.brown.fox.">> = iolist_to_binary(re:replace("the.quick.brown.fox.","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","HYIA&\\1Rh&&&GQ",[global])),
    <<"the.quick.brown.fox_">> = iolist_to_binary(re:replace("the.quick.brown.fox_","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","\\1&BcQ&wOm&&",[])),
    <<"the.quick.brown.fox_">> = iolist_to_binary(re:replace("the.quick.brown.fox_","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","\\1&BcQ&wOm&&",[global])),
    <<"the.quick.brown.fox+">> = iolist_to_binary(re:replace("the.quick.brown.fox+","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","x&N",[])),
    <<"the.quick.brown.fox+">> = iolist_to_binary(re:replace("the.quick.brown.fox+","^(?>(?(1)\\.|())[^\\W_](?>[a-z0-9-]*[^\\W_])?)+$","x&N",[global])),
    <<"abcdWxPOAabcd">> = iolist_to_binary(re:replace("alphabetabcd","(?>.*)(?<=(abcd|wxyz))","\\1WxPOA\\1",[])),
    <<"abcdWxPOAabcdabcdWxPOAabcd">> = iolist_to_binary(re:replace("alphabetabcd","(?>.*)(?<=(abcd|wxyz))","\\1WxPOA\\1",[global])),
    <<"DJwxyzLeA">> = iolist_to_binary(re:replace("endingwxyz","(?>.*)(?<=(abcd|wxyz))","DJ\\1LeA",[])),
    <<"DJwxyzLeADJwxyzLeA">> = iolist_to_binary(re:replace("endingwxyz","(?>.*)(?<=(abcd|wxyz))","DJ\\1LeA",[global])),
    <<"a rather long string that doesn't end with one of them">> = iolist_to_binary(re:replace("a rather long string that doesn't end with one of them","(?>.*)(?<=(abcd|wxyz))","qinMo",[])),
    <<"a rather long string that doesn't end with one of them">> = iolist_to_binary(re:replace("a rather long string that doesn't end with one of them","(?>.*)(?<=(abcd|wxyz))","qinMo",[global])),
    <<"word cat dog elephant mussel cow horse canary baboon snake shark otherwordXdword cat dog elephant mussel cow horse canary baboon snake shark otherwordaKTrIIqhpiWP">> = iolist_to_binary(re:replace("word cat dog elephant mussel cow horse canary baboon snake shark otherword","word (?>(?:(?!otherword)[a-zA-Z0-9]+ ){0,30})otherword","&\\1Xd&aKTrIIqhpiWP",[])),
    <<"word cat dog elephant mussel cow horse canary baboon snake shark otherwordXdword cat dog elephant mussel cow horse canary baboon snake shark otherwordaKTrIIqhpiWP">> = iolist_to_binary(re:replace("word cat dog elephant mussel cow horse canary baboon snake shark otherword","word (?>(?:(?!otherword)[a-zA-Z0-9]+ ){0,30})otherword","&\\1Xd&aKTrIIqhpiWP",[global])),
    <<"word cat dog elephant mussel cow horse canary baboon snake shark">> = iolist_to_binary(re:replace("word cat dog elephant mussel cow horse canary baboon snake shark","word (?>(?:(?!otherword)[a-zA-Z0-9]+ ){0,30})otherword","Ciaei&bFyjW",[])),
    <<"word cat dog elephant mussel cow horse canary baboon snake shark">> = iolist_to_binary(re:replace("word cat dog elephant mussel cow horse canary baboon snake shark","word (?>(?:(?!otherword)[a-zA-Z0-9]+ ){0,30})otherword","Ciaei&bFyjW",[global])),
    <<"word cat dog elephant mussel cow horse canary baboon snake shark the quick brown fox and the lazy dog and several other words getting close to thirty by now I hope">> = iolist_to_binary(re:replace("word cat dog elephant mussel cow horse canary baboon snake shark the quick brown fox and the lazy dog and several other words getting close to thirty by now I hope","word (?>[a-zA-Z0-9]+ ){0,30}otherword","\\1&Ch&IWXxoeCE",[])),
    <<"word cat dog elephant mussel cow horse canary baboon snake shark the quick brown fox and the lazy dog and several other words getting close to thirty by now I hope">> = iolist_to_binary(re:replace("word cat dog elephant mussel cow horse canary baboon snake shark the quick brown fox and the lazy dog and several other words getting close to thirty by now I hope","word (?>[a-zA-Z0-9]+ ){0,30}otherword","\\1&Ch&IWXxoeCE",[global])),
    <<"999foofoot">> = iolist_to_binary(re:replace("999foo","(?<=\\d{3}(?!999))foo","&&t",[])),
    <<"999foofoot">> = iolist_to_binary(re:replace("999foo","(?<=\\d{3}(?!999))foo","&&t",[global])),
    <<"123999Pfoow">> = iolist_to_binary(re:replace("123999foo","(?<=\\d{3}(?!999))foo","P&w",[])),
    <<"123999Pfoow">> = iolist_to_binary(re:replace("123999foo","(?<=\\d{3}(?!999))foo","P&w",[global])),
    <<"123abcfoo">> = iolist_to_binary(re:replace("123abcfoo","(?<=\\d{3}(?!999))foo","&jEcxWNe",[])),
    <<"123abcfoo">> = iolist_to_binary(re:replace("123abcfoo","(?<=\\d{3}(?!999))foo","&jEcxWNe",[global])),
    <<"999fooQByhvIPMdVCvMAk">> = iolist_to_binary(re:replace("999foo","(?<=(?!...999)\\d{3})foo","&QByhvIPMdVCvMAk",[])),
    <<"999fooQByhvIPMdVCvMAk">> = iolist_to_binary(re:replace("999foo","(?<=(?!...999)\\d{3})foo","&QByhvIPMdVCvMAk",[global])),
    <<"123999LKyhXCAKOfoofKpfoo">> = iolist_to_binary(re:replace("123999foo","(?<=(?!...999)\\d{3})foo","LKyhXCAKO&fKp&",[])),
    <<"123999LKyhXCAKOfoofKpfoo">> = iolist_to_binary(re:replace("123999foo","(?<=(?!...999)\\d{3})foo","LKyhXCAKO&fKp&",[global])),
    <<"123abcfoo">> = iolist_to_binary(re:replace("123abcfoo","(?<=(?!...999)\\d{3})foo","PktYBS",[])),
    <<"123abcfoo">> = iolist_to_binary(re:replace("123abcfoo","(?<=(?!...999)\\d{3})foo","PktYBS",[global])),
    <<"123abcfooLfoofooAB">> = iolist_to_binary(re:replace("123abcfoo","(?<=\\d{3}(?!999)...)foo","&L&&AB",[])),
    <<"123abcfooLfoofooAB">> = iolist_to_binary(re:replace("123abcfoo","(?<=\\d{3}(?!999)...)foo","&L&&AB",[global])),
    <<"123456fooNExLuXAoRv">> = iolist_to_binary(re:replace("123456foo","(?<=\\d{3}(?!999)...)foo","&NExLuXAoRv",[])),
    <<"123456fooNExLuXAoRv">> = iolist_to_binary(re:replace("123456foo","(?<=\\d{3}(?!999)...)foo","&NExLuXAoRv",[global])),
    <<"123999foo">> = iolist_to_binary(re:replace("123999foo","(?<=\\d{3}(?!999)...)foo","TNhbF",[])),
    <<"123999foo">> = iolist_to_binary(re:replace("123999foo","(?<=\\d{3}(?!999)...)foo","TNhbF",[global])),
    ok.
run31() ->
    <<"123abcNcfooGIjjbuiMOSVl">> = iolist_to_binary(re:replace("123abcfoo","(?<=\\d{3}...)(?<!999)foo","Nc\\1&GIjjbuiMOSVl",[])),
    <<"123abcNcfooGIjjbuiMOSVl">> = iolist_to_binary(re:replace("123abcfoo","(?<=\\d{3}...)(?<!999)foo","Nc\\1&GIjjbuiMOSVl",[global])),
    <<"123456OO">> = iolist_to_binary(re:replace("123456foo","(?<=\\d{3}...)(?<!999)foo","OO",[])),
    <<"123456OO">> = iolist_to_binary(re:replace("123456foo","(?<=\\d{3}...)(?<!999)foo","OO",[global])),
    <<"123999foo">> = iolist_to_binary(re:replace("123999foo","(?<=\\d{3}...)(?<!999)foo","OVOqSRYFwv",[])),
    <<"123999foo">> = iolist_to_binary(re:replace("123999foo","(?<=\\d{3}...)(?<!999)foo","OVOqSRYFwv",[global])),
    <<"fIHcA<a href=abcd<a href=abcdsdSLy xyz">> = iolist_to_binary(re:replace("<a href=abcd xyz","<a[\\s]+href[\\s]*=[\\s]*          # find <a href=
 ([\\\"\\'])?                       # find single or double quote
 (?(1) (.*?)\\1 | ([^\\s]+))       # if quote found, match up to next matching
                                 # quote, otherwise match up to next space","fIH\\1c\\1A\\1&&sdSLy",[caseless,dotall,extended])),
    <<"fIHcA<a href=abcd<a href=abcdsdSLy xyz">> = iolist_to_binary(re:replace("<a href=abcd xyz","<a[\\s]+href[\\s]*=[\\s]*          # find <a href=
 ([\\\"\\'])?                       # find single or double quote
 (?(1) (.*?)\\1 | ([^\\s]+))       # if quote found, match up to next matching
                                 # quote, otherwise match up to next space","fIH\\1c\\1A\\1&&sdSLy",[caseless,dotall,extended,global])),
    <<"ncyI cats">> = iolist_to_binary(re:replace("<a href=\"abcd xyz pqr\" cats","<a[\\s]+href[\\s]*=[\\s]*          # find <a href=
 ([\\\"\\'])?                       # find single or double quote
 (?(1) (.*?)\\1 | ([^\\s]+))       # if quote found, match up to next matching
                                 # quote, otherwise match up to next space","ncyI",[caseless,dotall,extended])),
    <<"ncyI cats">> = iolist_to_binary(re:replace("<a href=\"abcd xyz pqr\" cats","<a[\\s]+href[\\s]*=[\\s]*          # find <a href=
 ([\\\"\\'])?                       # find single or double quote
 (?(1) (.*?)\\1 | ([^\\s]+))       # if quote found, match up to next matching
                                 # quote, otherwise match up to next space","ncyI",[caseless,dotall,extended,global])),
    <<"suOoPj<a href='abcd xyz pqr''M cats">> = iolist_to_binary(re:replace("<a href='abcd xyz pqr' cats","<a[\\s]+href[\\s]*=[\\s]*          # find <a href=
 ([\\\"\\'])?                       # find single or double quote
 (?(1) (.*?)\\1 | ([^\\s]+))       # if quote found, match up to next matching
                                 # quote, otherwise match up to next space","suOoPj&\\1M",[caseless,dotall,extended])),
    <<"suOoPj<a href='abcd xyz pqr''M cats">> = iolist_to_binary(re:replace("<a href='abcd xyz pqr' cats","<a[\\s]+href[\\s]*=[\\s]*          # find <a href=
 ([\\\"\\'])?                       # find single or double quote
 (?(1) (.*?)\\1 | ([^\\s]+))       # if quote found, match up to next matching
                                 # quote, otherwise match up to next space","suOoPj&\\1M",[caseless,dotall,extended,global])),
    <<"<a href=abcdriAFA<a href=abcd<a href=abcdvRIl xyz">> = iolist_to_binary(re:replace("<a href=abcd xyz","<a\\s+href\\s*=\\s*                # find <a href=
 ([\"'])?                         # find single or double quote
 (?(1) (.*?)\\1 | (\\S+))          # if quote found, match up to next matching
                                 # quote, otherwise match up to next space","&riAFA&&vR\\1Il",[caseless,dotall,extended])),
    <<"<a href=abcdriAFA<a href=abcd<a href=abcdvRIl xyz">> = iolist_to_binary(re:replace("<a href=abcd xyz","<a\\s+href\\s*=\\s*                # find <a href=
 ([\"'])?                         # find single or double quote
 (?(1) (.*?)\\1 | (\\S+))          # if quote found, match up to next matching
                                 # quote, otherwise match up to next space","&riAFA&&vR\\1Il",[caseless,dotall,extended,global])),
    <<"oBIIx<a href=\"abcd xyz pqr\"HJ<a href=\"abcd xyz pqr\"H\"rNT cats">> = iolist_to_binary(re:replace("<a href=\"abcd xyz pqr\" cats","<a\\s+href\\s*=\\s*                # find <a href=
 ([\"'])?                         # find single or double quote
 (?(1) (.*?)\\1 | (\\S+))          # if quote found, match up to next matching
                                 # quote, otherwise match up to next space","oBIIx&HJ&H\\1rNT",[caseless,dotall,extended])),
    <<"oBIIx<a href=\"abcd xyz pqr\"HJ<a href=\"abcd xyz pqr\"H\"rNT cats">> = iolist_to_binary(re:replace("<a href=\"abcd xyz pqr\" cats","<a\\s+href\\s*=\\s*                # find <a href=
 ([\"'])?                         # find single or double quote
 (?(1) (.*?)\\1 | (\\S+))          # if quote found, match up to next matching
                                 # quote, otherwise match up to next space","oBIIx&HJ&H\\1rNT",[caseless,dotall,extended,global])),
    <<"wWbIuHcu cats">> = iolist_to_binary(re:replace("<a href       =       'abcd xyz pqr' cats","<a\\s+href\\s*=\\s*                # find <a href=
 ([\"'])?                         # find single or double quote
 (?(1) (.*?)\\1 | (\\S+))          # if quote found, match up to next matching
                                 # quote, otherwise match up to next space","wWbIuHcu",[caseless,dotall,extended])),
    <<"wWbIuHcu cats">> = iolist_to_binary(re:replace("<a href       =       'abcd xyz pqr' cats","<a\\s+href\\s*=\\s*                # find <a href=
 ([\"'])?                         # find single or double quote
 (?(1) (.*?)\\1 | (\\S+))          # if quote found, match up to next matching
                                 # quote, otherwise match up to next space","wWbIuHcu",[caseless,dotall,extended,global])),
    <<"<a href=abcdN<a href=abcd<a href=abcd<a href=abcd xyz">> = iolist_to_binary(re:replace("<a href=abcd xyz","<a\\s+href(?>\\s*)=(?>\\s*)        # find <a href=
 ([\"'])?                         # find single or double quote
 (?(1) (.*?)\\1 | (\\S+))          # if quote found, match up to next matching
                                 # quote, otherwise match up to next space","&N&&&",[caseless,dotall,extended])),
    <<"<a href=abcdN<a href=abcd<a href=abcd<a href=abcd xyz">> = iolist_to_binary(re:replace("<a href=abcd xyz","<a\\s+href(?>\\s*)=(?>\\s*)        # find <a href=
 ([\"'])?                         # find single or double quote
 (?(1) (.*?)\\1 | (\\S+))          # if quote found, match up to next matching
                                 # quote, otherwise match up to next space","&N&&&",[caseless,dotall,extended,global])),
    <<"d\"m cats">> = iolist_to_binary(re:replace("<a href=\"abcd xyz pqr\" cats","<a\\s+href(?>\\s*)=(?>\\s*)        # find <a href=
 ([\"'])?                         # find single or double quote
 (?(1) (.*?)\\1 | (\\S+))          # if quote found, match up to next matching
                                 # quote, otherwise match up to next space","d\\1m",[caseless,dotall,extended])),
    <<"d\"m cats">> = iolist_to_binary(re:replace("<a href=\"abcd xyz pqr\" cats","<a\\s+href(?>\\s*)=(?>\\s*)        # find <a href=
 ([\"'])?                         # find single or double quote
 (?(1) (.*?)\\1 | (\\S+))          # if quote found, match up to next matching
                                 # quote, otherwise match up to next space","d\\1m",[caseless,dotall,extended,global])),
    <<"Yw cats">> = iolist_to_binary(re:replace("<a href       =       'abcd xyz pqr' cats","<a\\s+href(?>\\s*)=(?>\\s*)        # find <a href=
 ([\"'])?                         # find single or double quote
 (?(1) (.*?)\\1 | (\\S+))          # if quote found, match up to next matching
                                 # quote, otherwise match up to next space","Yw",[caseless,dotall,extended])),
    <<"Yw cats">> = iolist_to_binary(re:replace("<a href       =       'abcd xyz pqr' cats","<a\\s+href(?>\\s*)=(?>\\s*)        # find <a href=
 ([\"'])?                         # find single or double quote
 (?(1) (.*?)\\1 | (\\S+))          # if quote found, match up to next matching
                                 # quote, otherwise match up to next space","Yw",[caseless,dotall,extended,global])),
    <<"mwetAmXoBCDEFG">> = iolist_to_binary(re:replace("ZABCDEFG","(Z()|A)*","mwet\\1mXo",[])),
    <<"mwetAmXomwetmXoBmwetmXoCmwetmXoDmwetmXoEmwetmXoFmwetmXoGmwetmXo">> = iolist_to_binary(re:replace("ZABCDEFG","(Z()|A)*","mwet\\1mXo",[global])),
    <<"AgAYADwEIxdcATAAjdieBCDEFG">> = iolist_to_binary(re:replace("ZABCDEFG","(Z(())|A)*","\\1g\\1Y\\1DwEIxdcAT\\1\\1jdie",[])),
    <<"AgAYADwEIxdcATAAjdiegYDwEIxdcATjdieBgYDwEIxdcATjdieCgYDwEIxdcATjdieDgYDwEIxdcATjdieEgYDwEIxdcATjdieFgYDwEIxdcATjdieGgYDwEIxdcATjdie">> = iolist_to_binary(re:replace("ZABCDEFG","(Z(())|A)*","\\1g\\1Y\\1DwEIxdcAT\\1\\1jdie",[global])),
    <<"oOsBCDEFG">> = iolist_to_binary(re:replace("ZABCDEFG","((?>Z)+|A)*","oOs",[])),
    <<"oOsoOsBoOsCoOsDoOsEoOsFoOsGoOs">> = iolist_to_binary(re:replace("ZABCDEFG","((?>Z)+|A)*","oOs",[global])),
    <<"XhEdssqxiHJbBKZABCDEFG">> = iolist_to_binary(re:replace("ZABCDEFG","((?>)+|A)*","Xh&Ed\\1\\1ssq\\1xiHJ\\1bB\\1K",[])),
    <<"XhEdssqxiHJbBKZXhEdssqxiHJbBKXhAEdssqxiHJbBKXhEdssqxiHJbBKBXhEdssqxiHJbBKCXhEdssqxiHJbBKDXhEdssqxiHJbBKEXhEdssqxiHJbBKFXhEdssqxiHJbBKGXhEdssqxiHJbBK">> = iolist_to_binary(re:replace("ZABCDEFG","((?>)+|A)*","Xh&Ed\\1\\1ssq\\1xiHJ\\1bB\\1K",[global])),
    <<"XkxsSHRksqVJfbbab">> = iolist_to_binary(re:replace("abbab","a*","XkxsSHRk\\1sqVJf",[])),
    <<"XkxsSHRksqVJfXkxsSHRksqVJfbXkxsSHRksqVJfbXkxsSHRksqVJfXkxsSHRksqVJfbXkxsSHRksqVJf">> = iolist_to_binary(re:replace("abbab","a*","XkxsSHRk\\1sqVJf",[global])),
    <<">TOrWu 	
oDtjqjUj<">> = iolist_to_binary(re:replace("> 	
<","[[:space:]]+","TOrWu\\1&o\\1D\\1tjqjUj\\1\\1\\1",[])),
    <<">TOrWu 	
oDtjqjUj<">> = iolist_to_binary(re:replace("> 	
<","[[:space:]]+","TOrWu\\1&o\\1D\\1tjqjUj\\1\\1\\1",[global])),
    <<">itod
<">> = iolist_to_binary(re:replace("> 	
<","[[:blank:]]+","itod",[])),
    <<">itod
<">> = iolist_to_binary(re:replace("> 	
<","[[:blank:]]+","itod",[global])),
    <<">Wj 	
MNVesk 	
F 	
MkNj<">> = iolist_to_binary(re:replace("> 	
<","[\\s]+","Wj&MNVesk&F&MkNj",[])),
    <<">Wj 	
MNVesk 	
F 	
MkNj<">> = iolist_to_binary(re:replace("> 	
<","[\\s]+","Wj&MNVesk&F&MkNj",[global])),
    <<">K<">> = iolist_to_binary(re:replace("> 	
<","\\s+","K\\1",[])),
    <<">K<">> = iolist_to_binary(re:replace("> 	
<","\\s+","K\\1",[global])),
    <<"KabmpSqMJmrScTHEH">> = iolist_to_binary(re:replace("ab","ab","K&mpSqMJmrScTHEH\\1",[extended])),
    <<"KabmpSqMJmrScTHEH">> = iolist_to_binary(re:replace("ab","ab","K&mpSqMJmrScTHEH\\1",[extended,global])),
    <<"a
jONwRrcySxbFOb">> = iolist_to_binary(re:replace("a
xb","(?!\\A)x","jONwRrcyS&bFO",[multiline])),
    <<"a
jONwRrcySxbFOb">> = iolist_to_binary(re:replace("a
xb","(?!\\A)x","jONwRrcyS&bFO",[multiline,global])),
    <<"a
xb">> = iolist_to_binary(re:replace("a
xb","(?!^)x","DIfuf&vF\\1&o&yYq",[multiline])),
    <<"a
xb">> = iolist_to_binary(re:replace("a
xb","(?!^)x","DIfuf&vF\\1&o&yYq",[multiline,global])),
    <<"ntgcmKqp">> = iolist_to_binary(re:replace("abcabcabc","abc\\Qabc\\Eabc","\\1\\1ntgcmKqp",[])),
    <<"ntgcmKqp">> = iolist_to_binary(re:replace("abcabcabc","abc\\Qabc\\Eabc","\\1\\1ntgcmKqp",[global])),
    <<"jI">> = iolist_to_binary(re:replace("abc(*+|abc","abc\\Q(*+|\\Eabc","jI",[])),
    <<"jI">> = iolist_to_binary(re:replace("abc(*+|abc","abc\\Q(*+|\\Eabc","jI",[global])),
    <<"bVgmsFMa">> = iolist_to_binary(re:replace("abc abcabc","   abc\\Q abc\\Eabc","bVgmsFMa",[extended])),
    <<"bVgmsFMa">> = iolist_to_binary(re:replace("abc abcabc","   abc\\Q abc\\Eabc","bVgmsFMa",[extended,global])),
    <<"abcabcabc">> = iolist_to_binary(re:replace("abcabcabc","   abc\\Q abc\\Eabc","cEcAl\\1eb\\1&OI&\\1mOu",[extended])),
    <<"abcabcabc">> = iolist_to_binary(re:replace("abcabcabc","   abc\\Q abc\\Eabc","cEcAl\\1eb\\1&OI&\\1mOu",[extended,global])),
    <<"h">> = iolist_to_binary(re:replace("abc#not comment
    literal","abc#comment
    \\Q#not comment
    literal\\E","h\\1",[extended])),
    <<"h">> = iolist_to_binary(re:replace("abc#not comment
    literal","abc#comment
    \\Q#not comment
    literal\\E","h\\1",[extended,global])),
    ok.
run32() ->
    <<"ip">> = iolist_to_binary(re:replace("abc#not comment
    literal","abc#comment
    \\Q#not comment
    literal","ip",[extended])),
    <<"ip">> = iolist_to_binary(re:replace("abc#not comment
    literal","abc#comment
    \\Q#not comment
    literal","ip",[extended,global])),
    <<"pL">> = iolist_to_binary(re:replace("abc#not comment
    literal","abc#comment
    \\Q#not comment
    literal\\E #more comment
    ","\\1pL",[extended])),
    <<"pL">> = iolist_to_binary(re:replace("abc#not comment
    literal","abc#comment
    \\Q#not comment
    literal\\E #more comment
    ","\\1pL",[extended,global])),
    <<"qLabc#not comment
    literalOvIXGabc#not comment
    literalabc#not comment
    literalrReabc#not comment
    literalxo">> = iolist_to_binary(re:replace("abc#not comment
    literal","abc#comment
    \\Q#not comment
    literal\\E #more comment","qL&OvIX\\1G&&rRe&x\\1o\\1",[extended])),
    <<"qLabc#not comment
    literalOvIXGabc#not comment
    literalabc#not comment
    literalrReabc#not comment
    literalxo">> = iolist_to_binary(re:replace("abc#not comment
    literal","abc#comment
    \\Q#not comment
    literal\\E #more comment","qL&OvIX\\1G&&rRe&x\\1o\\1",[extended,global])),
    <<"RsYIqopkaabc\\$xyzwdwdgKabc\\$xyzT">> = iolist_to_binary(re:replace("abc\\$xyz","\\Qabc\\$xyz\\E","RsYIqopka&\\1wdwdgK&T",[])),
    <<"RsYIqopkaabc\\$xyzwdwdgKabc\\$xyzT">> = iolist_to_binary(re:replace("abc\\$xyz","\\Qabc\\$xyz\\E","RsYIqopka&\\1wdwdgK&T",[global])),
    <<"lLfabc$xyzabc$xyzYHTqsmO">> = iolist_to_binary(re:replace("abc$xyz","\\Qabc\\E\\$\\Qxyz\\E","lLf&&YHTqsmO",[])),
    <<"lLfabc$xyzabc$xyzYHTqsmO">> = iolist_to_binary(re:replace("abc$xyz","\\Qabc\\E\\$\\Qxyz\\E","lLf&&YHTqsmO",[global])),
    <<"JCuXbQvabcXV">> = iolist_to_binary(re:replace("abc","\\Gabc","JCuXbQv&XV",[])),
    <<"JCuXbQvabcXV">> = iolist_to_binary(re:replace("abc","\\Gabc","JCuXbQv&XV",[global])),
    <<"xyzabc">> = iolist_to_binary(re:replace("xyzabc","\\Gabc","n\\1jl\\1tTu",[])),
    <<"xyzabc">> = iolist_to_binary(re:replace("xyzabc","\\Gabc","n\\1jl\\1tTu",[global])),
    <<"oRHrhfYgmYEabc2xyzabc3">> = iolist_to_binary(re:replace("abc1abc2xyzabc3","\\Gabc.","oRHrhfYgmYE",[])),
    <<"oRHrhfYgmYEoRHrhfYgmYExyzabc3">> = iolist_to_binary(re:replace("abc1abc2xyzabc3","\\Gabc.","oRHrhfYgmYE",[global])),
    <<"Cabc2xyzabc3">> = iolist_to_binary(re:replace("abc1abc2xyzabc3","abc.","C",[])),
    <<"CCxyzC">> = iolist_to_binary(re:replace("abc1abc2xyzabc3","abc.","C",[global])),
    <<"XMbmyjKDJYY">> = iolist_to_binary(re:replace("XabcdY","a(?x: b c )d","MbmyjKDJY",[])),
    <<"XMbmyjKDJYY">> = iolist_to_binary(re:replace("XabcdY","a(?x: b c )d","MbmyjKDJY",[global])),
    <<"Xa b c d Y">> = iolist_to_binary(re:replace("Xa b c d Y","a(?x: b c )d","K\\1RB&YDPT&Ietf\\1Kafk",[])),
    <<"Xa b c d Y">> = iolist_to_binary(re:replace("Xa b c d Y","a(?x: b c )d","K\\1RB&YDPT&Ietf\\1Kafk",[global])),
    <<"XFAeMLQgRgVVabchabcdY">> = iolist_to_binary(re:replace("XabcY","((?x)x y z | a b c)","FAeMLQgRgVV\\1h\\1d",[])),
    <<"XFAeMLQgRgVVabchabcdY">> = iolist_to_binary(re:replace("XabcY","((?x)x y z | a b c)","FAeMLQgRgVV\\1h\\1d",[global])),
    <<"AVB">> = iolist_to_binary(re:replace("AxyzB","((?x)x y z | a b c)","V",[])),
    <<"AVB">> = iolist_to_binary(re:replace("AxyzB","((?x)x y z | a b c)","V",[global])),
    <<"XvOEiltgjcY">> = iolist_to_binary(re:replace("XabCY","(?i)AB(?-i)C","vOEiltgjc",[])),
    <<"XvOEiltgjcY">> = iolist_to_binary(re:replace("XabCY","(?i)AB(?-i)C","vOEiltgjc",[global])),
    <<"XabcY">> = iolist_to_binary(re:replace("XabcY","(?i)AB(?-i)C","hCMP",[])),
    <<"XabcY">> = iolist_to_binary(re:replace("XabcY","(?i)AB(?-i)C","hCMP",[global])),
    <<"WVjqJoaFabCEabCihXyabCIK">> = iolist_to_binary(re:replace("abCE","((?i)AB(?-i)C|D)E","WVjqJoaF&\\1ihXy\\1IK",[])),
    <<"WVjqJoaFabCEabCihXyabCIK">> = iolist_to_binary(re:replace("abCE","((?i)AB(?-i)C|D)E","WVjqJoaF&\\1ihXy\\1IK",[global])),
    <<"hEDuHDEDDEI">> = iolist_to_binary(re:replace("DE","((?i)AB(?-i)C|D)E","hE\\1uH&\\1&I",[])),
    <<"hEDuHDEDDEI">> = iolist_to_binary(re:replace("DE","((?i)AB(?-i)C|D)E","hE\\1uH&\\1&I",[global])),
    <<"abcE">> = iolist_to_binary(re:replace("abcE","((?i)AB(?-i)C|D)E","PyNYkfx&aFAYi\\1k",[])),
    <<"abcE">> = iolist_to_binary(re:replace("abcE","((?i)AB(?-i)C|D)E","PyNYkfx&aFAYi\\1k",[global])),
    <<"abCe">> = iolist_to_binary(re:replace("abCe","((?i)AB(?-i)C|D)E","l&&G",[])),
    <<"abCe">> = iolist_to_binary(re:replace("abCe","((?i)AB(?-i)C|D)E","l&&G",[global])),
    <<"dE">> = iolist_to_binary(re:replace("dE","((?i)AB(?-i)C|D)E","eS\\1dn",[])),
    <<"dE">> = iolist_to_binary(re:replace("dE","((?i)AB(?-i)C|D)E","eS\\1dn",[global])),
    <<"De">> = iolist_to_binary(re:replace("De","((?i)AB(?-i)C|D)E","MhsbM&x\\1ydTksl",[])),
    <<"De">> = iolist_to_binary(re:replace("De","((?i)AB(?-i)C|D)E","MhsbM&x\\1ydTksl",[global])),
    <<"abcsrennTKabcqOykabc123abcLVOv">> = iolist_to_binary(re:replace("abc123abc","(.*)\\d+\\1","\\1srennTK\\1qOyk&LVOv",[])),
    <<"abcsrennTKabcqOykabc123abcLVOv">> = iolist_to_binary(re:replace("abc123abc","(.*)\\d+\\1","\\1srennTK\\1qOyk&LVOv",[global])),
    <<"aJJVTKIstbchgwfb">> = iolist_to_binary(re:replace("abc123bc","(.*)\\d+\\1","JJVTKIst\\1hgwfb",[])),
    <<"aJJVTKIstbchgwfb">> = iolist_to_binary(re:replace("abc123bc","(.*)\\d+\\1","JJVTKIst\\1hgwfb",[global])),
    <<"CyLabc123abcaabc123abcaFabc123abcUQLabc123abcYD">> = iolist_to_binary(re:replace("abc123abc","(.*)\\d+\\1","CyL&a&aF&UQL&YD",[dotall])),
    <<"CyLabc123abcaabc123abcaFabc123abcUQLabc123abcYD">> = iolist_to_binary(re:replace("abc123abc","(.*)\\d+\\1","CyL&a&aF&UQL&YD",[dotall,global])),
    <<"amWmXxiABWTMobc123bcbcbHXbc123bcm">> = iolist_to_binary(re:replace("abc123bc","(.*)\\d+\\1","mWmXxiABWTMo&\\1bHX&m",[dotall])),
    <<"amWmXxiABWTMobc123bcbcbHXbc123bcm">> = iolist_to_binary(re:replace("abc123bc","(.*)\\d+\\1","mWmXxiABWTMo&\\1bHX&m",[dotall,global])),
    <<"KxfwWNxNBabc123abcuWywN">> = iolist_to_binary(re:replace("abc123abc","((.*))\\d+\\1","KxfwWNxNB&uWywN",[])),
    <<"KxfwWNxNBabc123abcuWywN">> = iolist_to_binary(re:replace("abc123abc","((.*))\\d+\\1","KxfwWNxNB&uWywN",[global])),
    <<"aFBbc123bcEbQh">> = iolist_to_binary(re:replace("abc123bc","((.*))\\d+\\1","FB&EbQh",[])),
    <<"aFBbc123bcEbQh">> = iolist_to_binary(re:replace("abc123bc","((.*))\\d+\\1","FB&EbQh",[global])),
    <<"GeHOW">> = iolist_to_binary(re:replace("a123::a123","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","GeHOW",[caseless,extended])),
    <<"GeHOW">> = iolist_to_binary(re:replace("a123::a123","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","GeHOW",[caseless,extended,global])),
    <<"ta123:b342::abcdwNwJda123:b342::abcdumtra123:b342::abcdPa123:b342::abcdv">> = iolist_to_binary(re:replace("a123:b342::abcd","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","t&\\1\\1wNwJd&umtr&\\1P&v",[caseless,extended])),
    <<"ta123:b342::abcdwNwJda123:b342::abcdumtra123:b342::abcdPa123:b342::abcdv">> = iolist_to_binary(re:replace("a123:b342::abcd","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","t&\\1\\1wNwJd&umtr&\\1P&v",[caseless,extended,global])),
    <<"xLBhfa123:b342::324e:abcdh">> = iolist_to_binary(re:replace("a123:b342::324e:abcd","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","xLBhf&h",[caseless,extended])),
    <<"xLBhfa123:b342::324e:abcdh">> = iolist_to_binary(re:replace("a123:b342::324e:abcd","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","xLBhf&h",[caseless,extended,global])),
    <<"a123:ddde:b342::324e:abcdeNra123:ddde:b342::324e:abcd">> = iolist_to_binary(re:replace("a123:ddde:b342::324e:abcd","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","&eN\\1\\1r&",[caseless,extended])),
    <<"a123:ddde:b342::324e:abcdeNra123:ddde:b342::324e:abcd">> = iolist_to_binary(re:replace("a123:ddde:b342::324e:abcd","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","&eN\\1\\1r&",[caseless,extended,global])),
    <<"xDgxGuTySBL">> = iolist_to_binary(re:replace("a123:ddde:b342::324e:dcba:abcd","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","xDgxGuTySB\\1L",[caseless,extended])),
    <<"xDgxGuTySBL">> = iolist_to_binary(re:replace("a123:ddde:b342::324e:dcba:abcd","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","xDgxGuTySB\\1L",[caseless,extended,global])),
    <<"S">> = iolist_to_binary(re:replace("a123:ddde:9999:b342::324e:dcba:abcd","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","S",[caseless,extended])),
    <<"S">> = iolist_to_binary(re:replace("a123:ddde:9999:b342::324e:dcba:abcd","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","S",[caseless,extended,global])),
    <<"1:2:3:4:5:6:7:8">> = iolist_to_binary(re:replace("1:2:3:4:5:6:7:8","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","o&QPdA\\1",[caseless,extended])),
    <<"1:2:3:4:5:6:7:8">> = iolist_to_binary(re:replace("1:2:3:4:5:6:7:8","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","o&QPdA\\1",[caseless,extended,global])),
    <<"a123:bce:ddde:9999:b342::324e:dcba:abcd">> = iolist_to_binary(re:replace("a123:bce:ddde:9999:b342::324e:dcba:abcd","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","xDxHH",[caseless,extended])),
    <<"a123:bce:ddde:9999:b342::324e:dcba:abcd">> = iolist_to_binary(re:replace("a123:bce:ddde:9999:b342::324e:dcba:abcd","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","xDxHH",[caseless,extended,global])),
    <<"a123::9999:b342::324e:dcba:abcd">> = iolist_to_binary(re:replace("a123::9999:b342::324e:dcba:abcd","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","iEooN&WrIl&nlqjB&\\1b",[caseless,extended])),
    <<"a123::9999:b342::324e:dcba:abcd">> = iolist_to_binary(re:replace("a123::9999:b342::324e:dcba:abcd","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","iEooN&WrIl&nlqjB&\\1b",[caseless,extended,global])),
    <<"abcde:2:3:4:5:6:7:8">> = iolist_to_binary(re:replace("abcde:2:3:4:5:6:7:8","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","dph",[caseless,extended])),
    <<"abcde:2:3:4:5:6:7:8">> = iolist_to_binary(re:replace("abcde:2:3:4:5:6:7:8","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","dph",[caseless,extended,global])),
    <<"::1">> = iolist_to_binary(re:replace("::1","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","&C&iHua",[caseless,extended])),
    <<"::1">> = iolist_to_binary(re:replace("::1","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","&C&iHua",[caseless,extended,global])),
    <<"abcd:fee0:123::">> = iolist_to_binary(re:replace("abcd:fee0:123::","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","UkKlO\\1LQggow&lFkU",[caseless,extended])),
    <<"abcd:fee0:123::">> = iolist_to_binary(re:replace("abcd:fee0:123::","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","UkKlO\\1LQggow&lFkU",[caseless,extended,global])),
    <<":1">> = iolist_to_binary(re:replace(":1","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","qVEB\\1Buo",[caseless,extended])),
    <<":1">> = iolist_to_binary(re:replace(":1","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","qVEB\\1Buo",[caseless,extended,global])),
    <<"1:">> = iolist_to_binary(re:replace("1:","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","&PINm\\1tQW&u",[caseless,extended])),
    <<"1:">> = iolist_to_binary(re:replace("1:","^(?!:)                       # colon disallowed at start
  (?:                         # start of item
    (?: [0-9a-f]{1,4} |       # 1-4 hex digits or
    (?(1)0 | () ) )           # if null previously matched, fail; else null
    :                         # followed by colon
  ){1,7}                      # end item; 1-7 of them required               
  [0-9a-f]{1,4} $             # final hex number at end of string
  (?(1)|.)                    # check that there was an empty component
  ","&PINm\\1tQW&u",[caseless,extended,global])),
    <<"JNnXQWogpGr">> = iolist_to_binary(re:replace("z","[z\\Qa-d]\\E]","JN\\1nXQWo\\1gpGr",[])),
    <<"JNnXQWogpGr">> = iolist_to_binary(re:replace("z","[z\\Qa-d]\\E]","JN\\1nXQWo\\1gpGr",[global])),
    <<"gLxFuiCCrajPsTmT">> = iolist_to_binary(re:replace("a","[z\\Qa-d]\\E]","gLxFuiCCrajP\\1sTmT",[])),
    <<"gLxFuiCCrajPsTmT">> = iolist_to_binary(re:replace("a","[z\\Qa-d]\\E]","gLxFuiCCrajP\\1sTmT",[global])),
    <<"iyqE">> = iolist_to_binary(re:replace("-","[z\\Qa-d]\\E]","iyqE",[])),
    <<"iyqE">> = iolist_to_binary(re:replace("-","[z\\Qa-d]\\E]","iyqE",[global])),
    <<"fGWRddyWukeN">> = iolist_to_binary(re:replace("d","[z\\Qa-d]\\E]","\\1\\1fGWR\\1&\\1&yWukeN",[])),
    <<"fGWRddyWukeN">> = iolist_to_binary(re:replace("d","[z\\Qa-d]\\E]","\\1\\1fGWR\\1&\\1&yWukeN",[global])),
    <<"radhO]oMmkTy]vp">> = iolist_to_binary(re:replace("]","[z\\Qa-d]\\E]","radhO&oMmkTy&vp",[])),
    <<"radhO]oMmkTy]vp">> = iolist_to_binary(re:replace("]","[z\\Qa-d]\\E]","radhO&oMmkTy&vp",[global])),
    <<"b">> = iolist_to_binary(re:replace("b","[z\\Qa-d]\\E]","i&r&X",[])),
    <<"b">> = iolist_to_binary(re:replace("b","[z\\Qa-d]\\E]","i&r&X",[global])),
    <<"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","(a+)*b","uv&&&cGDFD",[])),
    <<"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","(a+)*b","uv&&&cGDFD",[global])),
    ok.
run33() ->
    <<"XAZtDLKpXBqBWXNbjBU">> = iolist_to_binary(re:replace("XAZXB","(?<=Z)X.","t\\1DLK\\1p&\\1qB\\1WXNbjBU",[])),
    <<"XAZtDLKpXBqBWXNbjBU">> = iolist_to_binary(re:replace("XAZXB","(?<=Z)X.","t\\1DLK\\1p&\\1qB\\1WXNbjBU",[global])),
    <<"hJUkab cd defgQmMMdaab cd defgmm">> = iolist_to_binary(re:replace("ab cd defg","ab cd (?x) de fg","hJUk&Qm\\1MMda&mm",[])),
    <<"hJUkab cd defgQmMMdaab cd defgmm">> = iolist_to_binary(re:replace("ab cd defg","ab cd (?x) de fg","hJUk&Qm\\1MMda&mm",[global])),
    <<"d">> = iolist_to_binary(re:replace("ab cddefg","ab cd(?x) de fg","d",[])),
    <<"d">> = iolist_to_binary(re:replace("ab cddefg","ab cd(?x) de fg","d",[global])),
    <<"abcddefg">> = iolist_to_binary(re:replace("abcddefg","ab cd(?x) de fg","u",[])),
    <<"abcddefg">> = iolist_to_binary(re:replace("abcddefg","ab cd(?x) de fg","u",[global])),
    <<"foopBX">> = iolist_to_binary(re:replace("foobarX","(?<![^f]oo)(bar)","pB",[])),
    <<"foopBX">> = iolist_to_binary(re:replace("foobarX","(?<![^f]oo)(bar)","pB",[global])),
    <<"boobarX">> = iolist_to_binary(re:replace("boobarX","(?<![^f]oo)(bar)","&Ie",[])),
    <<"boobarX">> = iolist_to_binary(re:replace("boobarX","(?<![^f]oo)(bar)","&Ie",[global])),
    <<"offsq">> = iolist_to_binary(re:replace("offX","(?<![^f])X","sq\\1",[])),
    <<"offsq">> = iolist_to_binary(re:replace("offX","(?<![^f])X","sq\\1",[global])),
    <<"onyX">> = iolist_to_binary(re:replace("onyX","(?<![^f])X","ov",[])),
    <<"onyX">> = iolist_to_binary(re:replace("onyX","(?<![^f])X","ov",[global])),
    <<"onyuMvMIoSdSSJ">> = iolist_to_binary(re:replace("onyX","(?<=[^f])X","uMvMIoSdSSJ",[])),
    <<"onyuMvMIoSdSSJ">> = iolist_to_binary(re:replace("onyX","(?<=[^f])X","uMvMIoSdSSJ",[global])),
    <<"offX">> = iolist_to_binary(re:replace("offX","(?<=[^f])X","CWpw",[])),
    <<"offX">> = iolist_to_binary(re:replace("offX","(?<=[^f])X","CWpw",[global])),
    <<"VJfDMGQCssqa
b
c">> = iolist_to_binary(re:replace("a
b
c","^","VJ&fD&MGQC&ssq",[multiline])),
    <<"VJfDMGQCssqa
VJfDMGQCssqb
VJfDMGQCssqc">> = iolist_to_binary(re:replace("a
b
c","^","VJ&fD&MGQC&ssq",[multiline,global])),
    <<"LNqSm">> = iolist_to_binary(re:replace("","^","LNqS&m",[multiline])),
    <<"LNqSm">> = iolist_to_binary(re:replace("","^","LNqS&m",[multiline,global])),
    <<"A
C
OkYauyNGxeWuWMWrC">> = iolist_to_binary(re:replace("A
C
C","(?<=C\\n)^","OkYauyNGxeWuW\\1\\1&MWr",[multiline])),
    <<"A
C
OkYauyNGxeWuWMWrC">> = iolist_to_binary(re:replace("A
C
C","(?<=C\\n)^","OkYauyNGxeWuW\\1\\1&MWr",[multiline,global])),
    <<"scDkXnM">> = iolist_to_binary(re:replace("bXaX","(?:(?(1)a|b)(X))+","scDk\\1nM",[])),
    <<"scDkXnM">> = iolist_to_binary(re:replace("bXaX","(?:(?(1)a|b)(X))+","scDk\\1nM",[global])),
    <<"YYcA">> = iolist_to_binary(re:replace("bXXaYYaY","(?:(?(1)\\1a|b)(X|Y))+","\\1YcA",[])),
    <<"YYcA">> = iolist_to_binary(re:replace("bXXaYYaY","(?:(?(1)\\1a|b)(X|Y))+","\\1YcA",[global])),
    <<"xNbXpUXFFvOIjYaXXaX">> = iolist_to_binary(re:replace("bXYaXXaX","(?:(?(1)\\1a|b)(X|Y))+","xN&pU\\1FFvOIj",[])),
    <<"xNbXpUXFFvOIjYaXXaX">> = iolist_to_binary(re:replace("bXYaXXaX","(?:(?(1)\\1a|b)(X|Y))+","xN&pU\\1FFvOIj",[global])),
    <<"XubXPbWvbXWbXbXlBtsbXXaYYaY">> = iolist_to_binary(re:replace("bXXaYYaY","()()()()()()()()()(?:(?(10)\\10a|b)(X|Y))+","Xu&PbWv&W&&lBts&",[])),
    <<"XubXPbWvbXWbXbXlBtsbXXaYYaY">> = iolist_to_binary(re:replace("bXXaYYaY","()()()()()()()()()(?:(?(10)\\10a|b)(X|Y))+","Xu&PbWv&W&&lBts&",[global])),
    <<"fyCFuvHUpuIwItIx">> = iolist_to_binary(re:replace("abc]","[[,abc,]+]","\\1fyCFuvHU\\1\\1puIwItIx\\1",[])),
    <<"fyCFuvHUpuIwItIx">> = iolist_to_binary(re:replace("abc]","[[,abc,]+]","\\1fyCFuvHU\\1\\1puIwItIx\\1",[global])),
    <<"AyRa,b]EPvK">> = iolist_to_binary(re:replace("a,b]","[[,abc,]+]","AyR&EPvK",[])),
    <<"AyRa,b]EPvK">> = iolist_to_binary(re:replace("a,b]","[[,abc,]+]","AyR&EPvK",[global])),
    <<"SbDcblGvpFYoX[a,b,c]J[a,b,c]Gu">> = iolist_to_binary(re:replace("[a,b,c]","[[,abc,]+]","SbDcblGvpFYoX&J&Gu",[])),
    <<"SbDcblGvpFYoX[a,b,c]J[a,b,c]Gu">> = iolist_to_binary(re:replace("[a,b,c]","[[,abc,]+]","SbDcblGvpFYoX&J&Gu",[global])),
    <<"A mB">> = iolist_to_binary(re:replace("A B","(?-x: )","&m",[extended])),
    <<"A mB">> = iolist_to_binary(re:replace("A B","(?-x: )","&m",[extended,global])),
    <<"AkB">> = iolist_to_binary(re:replace("A # B","(?x)(?-x: \\s*#\\s*)","k\\1",[])),
    <<"AkB">> = iolist_to_binary(re:replace("A # B","(?x)(?-x: \\s*#\\s*)","k\\1",[global])),
    <<"#">> = iolist_to_binary(re:replace("#","(?x)(?-x: \\s*#\\s*)","BufqWrp\\1\\1UijV",[])),
    <<"#">> = iolist_to_binary(re:replace("#","(?x)(?-x: \\s*#\\s*)","BufqWrp\\1\\1UijV",[global])),
    <<"A s#s B">> = iolist_to_binary(re:replace("A s#s B","(?x)(?-x: \\s*#\\s*)","pIOc\\1eAW\\1",[])),
    <<"A s#s B">> = iolist_to_binary(re:replace("A s#s B","(?x)(?-x: \\s*#\\s*)","pIOc\\1eAW\\1",[global])),
    <<"Ap">> = iolist_to_binary(re:replace("A #include","(?x-is)(?:(?-ixs) \\s*#\\s*) include","p",[])),
    <<"Ap">> = iolist_to_binary(re:replace("A #include","(?x-is)(?:(?-ixs) \\s*#\\s*) include","p",[global])),
    <<"A#include">> = iolist_to_binary(re:replace("A#include","(?x-is)(?:(?-ixs) \\s*#\\s*) include","y&&&AOp\\1",[])),
    <<"A#include">> = iolist_to_binary(re:replace("A#include","(?x-is)(?:(?-ixs) \\s*#\\s*) include","y&&&AOp\\1",[global])),
    <<"A #Include">> = iolist_to_binary(re:replace("A #Include","(?x-is)(?:(?-ixs) \\s*#\\s*) include","\\1VJMcD\\1vw&NweMFm",[])),
    <<"A #Include">> = iolist_to_binary(re:replace("A #Include","(?x-is)(?:(?-ixs) \\s*#\\s*) include","\\1VJMcD\\1vw&NweMFm",[global])),
    <<"nmpAKxmhPVHDE">> = iolist_to_binary(re:replace("aaabbbb","a*b*\\w","nmpAKxmhP\\1VH\\1DE\\1",[])),
    <<"nmpAKxmhPVHDE">> = iolist_to_binary(re:replace("aaabbbb","a*b*\\w","nmpAKxmhP\\1VH\\1DE\\1",[global])),
    <<"sVrnWeaaaaaBWqoEe">> = iolist_to_binary(re:replace("aaaa","a*b*\\w","sVrnWea&BWqoE\\1e\\1",[])),
    <<"sVrnWeaaaaaBWqoEe">> = iolist_to_binary(re:replace("aaaa","a*b*\\w","sVrnWea&BWqoE\\1e\\1",[global])),
    <<"yKlwaKvFuDaYa">> = iolist_to_binary(re:replace("a","a*b*\\w","yKlwaKvFuDaY&",[])),
    <<"yKlwaKvFuDaYa">> = iolist_to_binary(re:replace("a","a*b*\\w","yKlwaKvFuDaY&",[global])),
    <<"aaaabbxlobb">> = iolist_to_binary(re:replace("aaabbbb","a*b?\\w","a&xlo",[])),
    <<"aaaabbxloabbxlo">> = iolist_to_binary(re:replace("aaabbbb","a*b?\\w","a&xlo",[global])),
    <<"HAfUFNxI">> = iolist_to_binary(re:replace("aaaa","a*b?\\w","HA\\1fUFNxI",[])),
    <<"HAfUFNxI">> = iolist_to_binary(re:replace("aaaa","a*b?\\w","HA\\1fUFNxI",[global])),
    <<"UTGiYaXaqADaSaxgaG">> = iolist_to_binary(re:replace("a","a*b?\\w","UTGiY&\\1X&qAD\\1&S&xgaG",[])),
    <<"UTGiYaXaqADaSaxgaG">> = iolist_to_binary(re:replace("a","a*b?\\w","UTGiY&\\1X&qAD\\1&S&xgaG",[global])),
    <<"TjOYiTQLgjuOn">> = iolist_to_binary(re:replace("aaabbbb","a*b{0,4}\\w","Tj\\1OYiTQLgjuOn",[])),
    <<"TjOYiTQLgjuOn">> = iolist_to_binary(re:replace("aaabbbb","a*b{0,4}\\w","Tj\\1OYiTQLgjuOn",[global])),
    <<"aaaaYaaaahI">> = iolist_to_binary(re:replace("aaaa","a*b{0,4}\\w","&Y&hI",[])),
    <<"aaaaYaaaahI">> = iolist_to_binary(re:replace("aaaa","a*b{0,4}\\w","&Y&hI",[global])),
    <<"JdMoadBqra">> = iolist_to_binary(re:replace("a","a*b{0,4}\\w","JdMo\\1&dBqr&\\1",[])),
    <<"JdMoadBqra">> = iolist_to_binary(re:replace("a","a*b{0,4}\\w","JdMo\\1&dBqr&\\1",[global])),
    <<"RyaTFQFN">> = iolist_to_binary(re:replace("aaabbbb","a*b{0,}\\w","R\\1yaTFQFN",[])),
    <<"RyaTFQFN">> = iolist_to_binary(re:replace("aaabbbb","a*b{0,}\\w","R\\1yaTFQFN",[global])),
    <<"w">> = iolist_to_binary(re:replace("aaaa","a*b{0,}\\w","w",[])),
    <<"w">> = iolist_to_binary(re:replace("aaaa","a*b{0,}\\w","w",[global])),
    <<"TAs">> = iolist_to_binary(re:replace("a","a*b{0,}\\w","TAs",[])),
    <<"TAs">> = iolist_to_binary(re:replace("a","a*b{0,}\\w","TAs",[global])),
    <<"gObuYjf0aY0a">> = iolist_to_binary(re:replace("0a","a*\\d*\\w","gObuYj\\1f\\1&Y\\1&\\1",[])),
    <<"gObuYjf0aY0a">> = iolist_to_binary(re:replace("0a","a*\\d*\\w","gObuYj\\1f\\1&Y\\1&\\1",[global])),
    <<"WqUamivVmXaLd">> = iolist_to_binary(re:replace("a","a*\\d*\\w","W\\1qUamiv\\1V\\1mX&Ld",[])),
    <<"WqUamivVmXaLd">> = iolist_to_binary(re:replace("a","a*\\d*\\w","W\\1qUamiv\\1V\\1mX&Ld",[global])),
    ok.
run34() ->
    <<"IaanabsHvXRBC">> = iolist_to_binary(re:replace("a","a*b *\\w","I&&n\\1&bsHvXRBC",[extended])),
    <<"IaanabsHvXRBC">> = iolist_to_binary(re:replace("a","a*b *\\w","I&&n\\1&bsHvXRBC",[extended,global])),
    <<"X">> = iolist_to_binary(re:replace("a","a*b#comment
  *\\w","X",[extended])),
    <<"X">> = iolist_to_binary(re:replace("a","a*b#comment
  *\\w","X",[extended,global])),
    <<"xqAeaLWQJTxG">> = iolist_to_binary(re:replace("a","a* b *\\w","xqA\\1e&\\1LW\\1\\1QJT\\1\\1xG",[extended])),
    <<"xqAeaLWQJTxG">> = iolist_to_binary(re:replace("a","a* b *\\w","xqA\\1e&\\1LW\\1\\1QJT\\1\\1xG",[extended,global])),
    <<"Pabc=xyz\\oXTDiScdQabc=xyz\\E
pqr">> = iolist_to_binary(re:replace("abc=xyz\\
pqr","^\\w+=.*(\\\\\\n.*)*","P&\\1o\\1XTDiScdQ&E",[])),
    <<"Pabc=xyz\\oXTDiScdQabc=xyz\\E
pqr">> = iolist_to_binary(re:replace("abc=xyz\\
pqr","^\\w+=.*(\\\\\\n.*)*","P&\\1o\\1XTDiScdQ&E",[global])),
    <<"ltabcd:OkVmTnmteabcdMMY">> = iolist_to_binary(re:replace("abcd:","(?=(\\w+))\\1:","lt&OkVmTnmte\\1MMY",[])),
    <<"ltabcd:OkVmTnmteabcdMMY">> = iolist_to_binary(re:replace("abcd:","(?=(\\w+))\\1:","lt&OkVmTnmte\\1MMY",[global])),
    <<"hdDdHBCKXpUraMooabcd:abcdabcd:W">> = iolist_to_binary(re:replace("abcd:","^(?=(\\w+))\\1:","hdDdHBCKXpUraMoo&\\1&W",[])),
    <<"hdDdHBCKXpUraMooabcd:abcdabcd:W">> = iolist_to_binary(re:replace("abcd:","^(?=(\\w+))\\1:","hdDdHBCKXpUraMoo&\\1&W",[global])),
    <<"WabcCE">> = iolist_to_binary(re:replace("abc","^\\Eabc","W&CE",[])),
    <<"WabcCE">> = iolist_to_binary(re:replace("abc","^\\Eabc","W&CE",[global])),
    <<"HSaxAXhjahoJanfg">> = iolist_to_binary(re:replace("a","^[\\Eabc]","HS&xAXhj\\1&h\\1oJanfg",[])),
    <<"HSaxAXhjahoJanfg">> = iolist_to_binary(re:replace("a","^[\\Eabc]","HS&xAXhj\\1&h\\1oJanfg",[global])),
    <<"E">> = iolist_to_binary(re:replace("E","^[\\Eabc]","gn\\1f&K\\1g",[])),
    <<"E">> = iolist_to_binary(re:replace("E","^[\\Eabc]","gn\\1f&K\\1g",[global])),
    <<"dIgTpbIbHEixby">> = iolist_to_binary(re:replace("b","^[a-\\Ec]","dI\\1gTpbI&HEix&y",[])),
    <<"dIgTpbIbHEixby">> = iolist_to_binary(re:replace("b","^[a-\\Ec]","dI\\1gTpbI&HEix&y",[global])),
    <<"-">> = iolist_to_binary(re:replace("-","^[a-\\Ec]","&xKoXTWDN\\1\\1P\\1",[])),
    <<"-">> = iolist_to_binary(re:replace("-","^[a-\\Ec]","&xKoXTWDN\\1\\1P\\1",[global])),
    <<"E">> = iolist_to_binary(re:replace("E","^[a-\\Ec]","\\1",[])),
    <<"E">> = iolist_to_binary(re:replace("E","^[a-\\Ec]","\\1",[global])),
    <<"AULOvSbqcIObKbWMIp">> = iolist_to_binary(re:replace("b","^[a\\E\\E-\\Ec]","AULOvS&q\\1cI\\1O&K&WMIp",[])),
    <<"AULOvSbqcIObKbWMIp">> = iolist_to_binary(re:replace("b","^[a\\E\\E-\\Ec]","AULOvS&q\\1cI\\1O&K&WMIp",[global])),
    <<"-">> = iolist_to_binary(re:replace("-","^[a\\E\\E-\\Ec]","tkaYMfUUp&HTyQAreKh",[])),
    <<"-">> = iolist_to_binary(re:replace("-","^[a\\E\\E-\\Ec]","tkaYMfUUp&HTyQAreKh",[global])),
    <<"E">> = iolist_to_binary(re:replace("E","^[a\\E\\E-\\Ec]","EH\\1GtlKGy\\1EA\\1\\1hAK",[])),
    <<"E">> = iolist_to_binary(re:replace("E","^[a\\E\\E-\\Ec]","EH\\1GtlKGy\\1EA\\1\\1hAK",[global])),
    <<"GwfYObW">> = iolist_to_binary(re:replace("b","^[\\E\\Qa\\E-\\Qz\\E]+","GwfY\\1O&W",[])),
    <<"GwfYObW">> = iolist_to_binary(re:replace("b","^[\\E\\Qa\\E-\\Qz\\E]+","GwfY\\1O&W",[global])),
    <<"-">> = iolist_to_binary(re:replace("-","^[\\E\\Qa\\E-\\Qz\\E]+","mItu\\1oJX&CQC&UvIK",[])),
    <<"-">> = iolist_to_binary(re:replace("-","^[\\E\\Qa\\E-\\Qz\\E]+","mItu\\1oJX&CQC&UvIK",[global])),
    <<"IaLyKsEnQnMtfj">> = iolist_to_binary(re:replace("a","^[a\\Q]bc\\E]","IaLyKsEnQnMtfj\\1",[])),
    <<"IaLyKsEnQnMtfj">> = iolist_to_binary(re:replace("a","^[a\\Q]bc\\E]","IaLyKsEnQnMtfj\\1",[global])),
    <<"eslVs">> = iolist_to_binary(re:replace("]","^[a\\Q]bc\\E]","eslV\\1s",[])),
    <<"eslVs">> = iolist_to_binary(re:replace("]","^[a\\Q]bc\\E]","eslV\\1s",[global])),
    <<"MKcmAwNCnGcLYc">> = iolist_to_binary(re:replace("c","^[a\\Q]bc\\E]","M\\1K&mAwNCnG&LY\\1&",[])),
    <<"MKcmAwNCnGcLYc">> = iolist_to_binary(re:replace("c","^[a\\Q]bc\\E]","M\\1K&mAwNCnG&LY\\1&",[global])),
    <<"YxEpUt">> = iolist_to_binary(re:replace("a","^[a-\\Q\\E]","YxEpUt",[])),
    <<"YxEpUt">> = iolist_to_binary(re:replace("a","^[a-\\Q\\E]","YxEpUt",[global])),
    <<"nocMyHoQWrYuE">> = iolist_to_binary(re:replace("-","^[a-\\Q\\E]","nocMyHoQ\\1WrY\\1uE",[])),
    <<"nocMyHoQWrYuE">> = iolist_to_binary(re:replace("-","^[a-\\Q\\E]","nocMyHoQ\\1WrY\\1uE",[global])),
    <<"WYbAyvR">> = iolist_to_binary(re:replace("aaaa","^(a()*)*","WYbAyvR",[])),
    <<"WYbAyvR">> = iolist_to_binary(re:replace("aaaa","^(a()*)*","WYbAyvR",[global])),
    <<"hnvNIpoJVjsUM">> = iolist_to_binary(re:replace("aaaa","^(?:a(?:(?:))*)*","hnvNIpoJVjsU\\1M",[])),
    <<"hnvNIpoJVjsUM">> = iolist_to_binary(re:replace("aaaa","^(?:a(?:(?:))*)*","hnvNIpoJVjsU\\1M",[global])),
    <<"hxMJiijTWX">> = iolist_to_binary(re:replace("aaaa","^(a()+)+","hxMJiijTWX",[])),
    <<"hxMJiijTWX">> = iolist_to_binary(re:replace("aaaa","^(a()+)+","hxMJiijTWX",[global])),
    <<"YbRuX">> = iolist_to_binary(re:replace("aaaa","^(?:a(?:(?:))+)+","YbRuX",[])),
    <<"YbRuX">> = iolist_to_binary(re:replace("aaaa","^(?:a(?:(?:))+)+","YbRuX",[global])),
    <<"SxvuExaabbDjaaSlaY">> = iolist_to_binary(re:replace("abbD","(a){0,3}(?(1)b|(c|))*D","SxvuEx\\1&j\\1\\1Sl\\1Y",[])),
    <<"SxvuExaabbDjaaSlaY">> = iolist_to_binary(re:replace("abbD","(a){0,3}(?(1)b|(c|))*D","SxvuEx\\1&j\\1\\1Sl\\1Y",[global])),
    <<"f">> = iolist_to_binary(re:replace("ccccD","(a){0,3}(?(1)b|(c|))*D","f",[])),
    <<"f">> = iolist_to_binary(re:replace("ccccD","(a){0,3}(?(1)b|(c|))*D","f",[global])),
    <<"ITsyBDAaf">> = iolist_to_binary(re:replace("D","(a){0,3}(?(1)b|(c|))*D","ITsyB&\\1Aaf",[])),
    <<"ITsyBDAaf">> = iolist_to_binary(re:replace("D","(a){0,3}(?(1)b|(c|))*D","ITsyB&\\1Aaf",[global])),
    <<"VwsTKcuXijrhaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4tk">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4","(a|)*\\d","VwsTK\\1cu\\1Xijrh&tk",[])),
    <<"VwsTKcuXijrhaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4tk">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4","(a|)*\\d","VwsTK\\1cu\\1Xijrh&tk",[global])),
    <<"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","(a|)*\\d","nnlUg&\\1naspQDy",[])),
    <<"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","(a|)*\\d","nnlUg&\\1naspQDy",[global])),
    <<"Dgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4dwIGWfGUaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4G">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4","(?>a|)*\\d","Dg&\\1dwIGW\\1fGU&G",[])),
    <<"Dgaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4dwIGWfGUaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4G">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4","(?>a|)*\\d","Dg&\\1dwIGW\\1fGU&G",[global])),
    <<"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","(?>a|)*\\d","pRExPwXG\\1OMYxM&DJu",[])),
    <<"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","(?>a|)*\\d","pRExPwXG\\1OMYxM&DJu",[global])),
    ok.
run35() ->
    <<"onWSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4OuXOYURE">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4","(?:a|)*\\d","onWS&OuXOY\\1URE",[])),
    <<"onWSaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4OuXOYURE">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa4","(?:a|)*\\d","onWS&OuXOY\\1URE",[global])),
    <<"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","(?:a|)*\\d","D\\1",[])),
    <<"aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","(?:a|)*\\d","D\\1",[global])),
    <<"abcCUqX">> = iolist_to_binary(re:replace("abc","\\Z","CU&qX&&",[])),
    <<"abcCUqX">> = iolist_to_binary(re:replace("abc","\\Z","CU&qX&&",[global])),
    <<"AWEksHnb">> = iolist_to_binary(re:replace("abc","^(?s)(?>.*)(?<!\\n)","AWEksHnb",[])),
    <<"AWEksHnb">> = iolist_to_binary(re:replace("abc","^(?s)(?>.*)(?<!\\n)","AWEksHnb",[global])),
    <<"pDdWJa">> = iolist_to_binary(re:replace("abc","^(?s)(?>.*)(?<!\\n)","pDdW\\1Ja",[])),
    <<"pDdWJa">> = iolist_to_binary(re:replace("abc","^(?s)(?>.*)(?<!\\n)","pDdW\\1Ja",[global])),
    <<"sXGuXgMabc">> = iolist_to_binary(re:replace("abc","^(?![^\\n]*\\n\\z)","sX\\1GuXg\\1M",[])),
    <<"sXGuXgMabc">> = iolist_to_binary(re:replace("abc","^(?![^\\n]*\\n\\z)","sX\\1GuXg\\1M",[global])),
    <<"XerOabc">> = iolist_to_binary(re:replace("abc","^(?![^\\n]*\\n\\z)","XerO",[])),
    <<"XerOabc">> = iolist_to_binary(re:replace("abc","^(?![^\\n]*\\n\\z)","XerO",[global])),
    <<"abccoypUmVFTuQ">> = iolist_to_binary(re:replace("abc","\\z(?<!\\n)","c&oypUmVFTuQ\\1",[])),
    <<"abccoypUmVFTuQ">> = iolist_to_binary(re:replace("abc","\\z(?<!\\n)","c&oypUmVFTuQ\\1",[global])),
    <<"abclfUtOXi">> = iolist_to_binary(re:replace("abc","\\z(?<!\\n)","lfUtOX&i",[])),
    <<"abclfUtOXi">> = iolist_to_binary(re:replace("abc","\\z(?<!\\n)","lfUtOX&i",[global])),
    <<"dabcdSWUEwlwabcdEK">> = iolist_to_binary(re:replace("abcd","(.*(.)?)*","d&SWUEw\\1lw&EK",[])),
    <<"dabcdSWUEwlwabcdEKdSWUEwlwEK">> = iolist_to_binary(re:replace("abcd","(.*(.)?)*","d&SWUEw\\1lw&EK",[global])),
    <<"Snabcd">> = iolist_to_binary(re:replace("abcd","( (A | (?(1)0|) )*   )","Sn\\1",[extended])),
    <<"SnaSnbSncSndSn">> = iolist_to_binary(re:replace("abcd","( (A | (?(1)0|) )*   )","Sn\\1",[extended,global])),
    <<"pfLJabcd">> = iolist_to_binary(re:replace("abcd","( ( (?(1)0|) )*   )","&pfLJ",[extended])),
    <<"pfLJapfLJbpfLJcpfLJdpfLJ">> = iolist_to_binary(re:replace("abcd","( ( (?(1)0|) )*   )","&pfLJ",[extended,global])),
    <<"TgSSaabcd">> = iolist_to_binary(re:replace("abcd","(  (?(1)0|)*   )","TgSSa",[extended])),
    <<"TgSSaaTgSSabTgSSacTgSSadTgSSa">> = iolist_to_binary(re:replace("abcd","(  (?(1)0|)*   )","TgSSa",[extended,global])),
    <<"Qa]krolcqqNP">> = iolist_to_binary(re:replace("a]","[[:abcd:xyz]]","Q&krolcqqNP",[])),
    <<"Qa]krolcqqNP">> = iolist_to_binary(re:replace("a]","[[:abcd:xyz]]","Q&krolcqqNP",[global])),
    <<"VIJWRSk">> = iolist_to_binary(re:replace(":]","[[:abcd:xyz]]","VIJWR\\1Sk",[])),
    <<"VIJWRSk">> = iolist_to_binary(re:replace(":]","[[:abcd:xyz]]","VIJWR\\1Sk",[global])),
    <<"agWuF">> = iolist_to_binary(re:replace("a","[abc[:x\\]pqr]","\\1&gWuF",[])),
    <<"agWuF">> = iolist_to_binary(re:replace("a","[abc[:x\\]pqr]","\\1&gWuF",[global])),
    <<"H[ltPpiho">> = iolist_to_binary(re:replace("[","[abc[:x\\]pqr]","H&ltPpih\\1o",[])),
    <<"H[ltPpiho">> = iolist_to_binary(re:replace("[","[abc[:x\\]pqr]","H&ltPpih\\1o",[global])),
    <<"EJTgr:MRkhYV">> = iolist_to_binary(re:replace(":","[abc[:x\\]pqr]","EJ\\1Tgr&MRk\\1h\\1YV",[])),
    <<"EJTgr:MRkhYV">> = iolist_to_binary(re:replace(":","[abc[:x\\]pqr]","EJ\\1Tgr&MRk\\1h\\1YV",[global])),
    <<"AJGCQ]uuuLVT">> = iolist_to_binary(re:replace("]","[abc[:x\\]pqr]","AJGCQ&uuuLVT",[])),
    <<"AJGCQ]uuuLVT">> = iolist_to_binary(re:replace("]","[abc[:x\\]pqr]","AJGCQ&uuuLVT",[global])),
    <<"ncMPhkKYpume">> = iolist_to_binary(re:replace("p","[abc[:x\\]pqr]","ncMPhkKY&ume",[])),
    <<"ncMPhkKYpume">> = iolist_to_binary(re:replace("p","[abc[:x\\]pqr]","ncMPhkKY&ume",[global])),
    <<"fooabcfoo">> = iolist_to_binary(re:replace("fooabcfoo",".*[op][xyz]","Ko&h",[])),
    <<"fooabcfoo">> = iolist_to_binary(re:replace("fooabcfoo",".*[op][xyz]","Ko&h",[global])),
    <<"eqaOjvQcmadc">> = iolist_to_binary(re:replace("adc","(?(?=.*b)b|^)","\\1eqaO\\1jvQc\\1m",[])),
    <<"eqaOjvQcmadc">> = iolist_to_binary(re:replace("adc","(?(?=.*b)b|^)","\\1eqaO\\1jvQc\\1m",[global])),
    <<"aReUYpTHfhCxdlxiqc">> = iolist_to_binary(re:replace("abc","(?(?=.*b)b|^)","Re\\1UYpTHfhCxdlxiq",[])),
    <<"aReUYpTHfhCxdlxiqc">> = iolist_to_binary(re:replace("abc","(?(?=.*b)b|^)","Re\\1UYpTHfhCxdlxiq",[global])),
    <<"wwadc">> = iolist_to_binary(re:replace("adc","(?(?=^.*b)b|^)","ww",[])),
    <<"wwadc">> = iolist_to_binary(re:replace("adc","(?(?=^.*b)b|^)","ww",[global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(?(?=^.*b)b|^)","yvT\\1Hkc\\1&&",[])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(?(?=^.*b)b|^)","yvT\\1Hkc\\1&&",[global])),
    <<"yatIrmpadc">> = iolist_to_binary(re:replace("adc","(?(?=.*b)b|^)*","yatIrmp",[])),
    <<"yatIrmpayatIrmpdyatIrmpcyatIrmp">> = iolist_to_binary(re:replace("adc","(?(?=.*b)b|^)*","yatIrmp",[global])),
    <<"QnIaJrpSWvhckCEabc">> = iolist_to_binary(re:replace("abc","(?(?=.*b)b|^)*","QnIaJrp\\1SWvhckCE",[])),
    <<"QnIaJrpSWvhckCEaQnIaJrpSWvhckCEQnIaJrpSWvhckCEcQnIaJrpSWvhckCE">> = iolist_to_binary(re:replace("abc","(?(?=.*b)b|^)*","QnIaJrp\\1SWvhckCE",[global])),
    <<"racpypxWadc">> = iolist_to_binary(re:replace("adc","(?(?=.*b)b|^)+","racp\\1ypxW",[])),
    <<"racpypxWadc">> = iolist_to_binary(re:replace("adc","(?(?=.*b)b|^)+","racp\\1ypxW",[global])),
    <<"aHMcbbbbSLctfbFhIYCc">> = iolist_to_binary(re:replace("abc","(?(?=.*b)b|^)+","HMc&&&&SLctf&FhIYC",[])),
    <<"aHMcbbbbSLctfbFhIYCc">> = iolist_to_binary(re:replace("abc","(?(?=.*b)b|^)+","HMc&&&&SLctf&FhIYC",[global])),
    <<"atDCqbc">> = iolist_to_binary(re:replace("abc","(?(?=b).*b|^d)","t\\1DCq&",[])),
    <<"atDCqbc">> = iolist_to_binary(re:replace("abc","(?(?=b).*b|^d)","t\\1DCq&",[global])),
    <<"hMEc">> = iolist_to_binary(re:replace("abc","(?(?=.*b).*b|^d)","hME",[])),
    <<"hMEc">> = iolist_to_binary(re:replace("abc","(?(?=.*b).*b|^d)","hME",[global])),
    <<"UyaUe%ab%PfYQtNU">> = iolist_to_binary(re:replace("%ab%","^%((?(?=[a])[^%])|b)*%$","UyaU\\1e&PfYQtNU",[])),
    <<"UyaUe%ab%PfYQtNU">> = iolist_to_binary(re:replace("%ab%","^%((?(?=[a])[^%])|b)*%$","UyaU\\1e&PfYQtNU",[global])),
    <<"XcaCEMX">> = iolist_to_binary(re:replace("XabX","(?i)a(?-i)b|c","caCEM",[])),
    <<"XcaCEMX">> = iolist_to_binary(re:replace("XabX","(?i)a(?-i)b|c","caCEM",[global])),
    <<"XfSpVHIAbjX">> = iolist_to_binary(re:replace("XAbX","(?i)a(?-i)b|c","fSpVHI&j",[])),
    <<"XfSpVHIAbjX">> = iolist_to_binary(re:replace("XAbX","(?i)a(?-i)b|c","fSpVHI&j",[global])),
    <<"CeLqPtC">> = iolist_to_binary(re:replace("CcC","(?i)a(?-i)b|c","eLqPt",[])),
    <<"CeLqPtC">> = iolist_to_binary(re:replace("CcC","(?i)a(?-i)b|c","eLqPt",[global])),
    <<"XABX">> = iolist_to_binary(re:replace("XABX","(?i)a(?-i)b|c","&ORV",[])),
    <<"XABX">> = iolist_to_binary(re:replace("XABX","(?i)a(?-i)b|c","&ORV",[global])),
    ok.
run36() ->
    <<"gIWbF
NFWj">> = iolist_to_binary(re:replace("
","[\\x00-\\xff\\s]+","gIWbF&NFWj",[])),
    <<"gIWbF
NFWj">> = iolist_to_binary(re:replace("
","[\\x00-\\xff\\s]+","gIWbF&NFWj",[global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(abc)\\1","l\\1Ac",[caseless])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(abc)\\1","l\\1Ac",[caseless,global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(abc)\\1","wMK\\1N\\1IKKxMErnc",[])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(abc)\\1","wMK\\1N\\1IKKxMErnc",[global])),
    <<"OB12NftFV12abc">> = iolist_to_binary(re:replace("12abc","[^a]*","OB&NftFV&\\1",[caseless])),
    <<"OB12NftFV12OBNftFVaOBbcNftFVbcOBNftFV">> = iolist_to_binary(re:replace("12abc","[^a]*","OB&NftFV&\\1",[caseless,global])),
    <<"12LxBb12EuHPuBdqnUABC">> = iolist_to_binary(re:replace("12ABC","[^a]*","&LxBb&\\1EuHPuB\\1\\1dqn\\1U",[caseless])),
    <<"12LxBb12EuHPuBdqnULxBbEuHPuBdqnUABCLxBbBCEuHPuBdqnULxBbEuHPuBdqnU">> = iolist_to_binary(re:replace("12ABC","[^a]*","&LxBb&\\1EuHPuB\\1\\1dqn\\1U",[caseless,global])),
    <<"KCmHSdOabc">> = iolist_to_binary(re:replace("12abc","[^a]*+","KCm\\1\\1\\1H\\1Sd\\1O",[caseless])),
    <<"KCmHSdOKCmHSdOaKCmHSdOKCmHSdO">> = iolist_to_binary(re:replace("12abc","[^a]*+","KCm\\1\\1\\1H\\1Sd\\1O",[caseless,global])),
    <<"hnRxfhjlJxAABC">> = iolist_to_binary(re:replace("12ABC","[^a]*+","hnRxfhjlJxA",[caseless])),
    <<"hnRxfhjlJxAhnRxfhjlJxAAhnRxfhjlJxAhnRxfhjlJxA">> = iolist_to_binary(re:replace("12ABC","[^a]*+","hnRxfhjlJxA",[caseless,global])),
    <<"12abc">> = iolist_to_binary(re:replace("12abc","[^a]*?X","Md",[caseless])),
    <<"12abc">> = iolist_to_binary(re:replace("12abc","[^a]*?X","Md",[caseless,global])),
    <<"12ABC">> = iolist_to_binary(re:replace("12ABC","[^a]*?X","TYyXigPSfkp&vsJ\\1B",[caseless])),
    <<"12ABC">> = iolist_to_binary(re:replace("12ABC","[^a]*?X","TYyXigPSfkp&vsJ\\1B",[caseless,global])),
    <<"12abc">> = iolist_to_binary(re:replace("12abc","[^a]+?X","wM",[caseless])),
    <<"12abc">> = iolist_to_binary(re:replace("12abc","[^a]+?X","wM",[caseless,global])),
    <<"12ABC">> = iolist_to_binary(re:replace("12ABC","[^a]+?X","bb&Kg\\1EEX",[caseless])),
    <<"12ABC">> = iolist_to_binary(re:replace("12ABC","[^a]+?X","bb&Kg\\1EEX",[caseless,global])),
    <<"12adNotFSCaAXXLDIXTbcX">> = iolist_to_binary(re:replace("12aXbcX","[^a]?X","dNo\\1t\\1FSCa\\1A&XLDI&T",[caseless])),
    <<"12adNotFSCaAXXLDIXTbdNotFSCaAcXXLDIcXT">> = iolist_to_binary(re:replace("12aXbcX","[^a]?X","dNo\\1t\\1FSCa\\1A&XLDI&T",[caseless,global])),
    <<"12ALpUXBCX">> = iolist_to_binary(re:replace("12AXBCX","[^a]?X","\\1LpU&",[caseless])),
    <<"12ALpUXBLpUCX">> = iolist_to_binary(re:replace("12AXBCX","[^a]?X","\\1LpU&",[caseless,global])),
    <<"BcMqaXCXsBwaD">> = iolist_to_binary(re:replace("BCX","[^a]?X","cMq\\1\\1aX&sBw\\1aD",[caseless])),
    <<"BcMqaXCXsBwaD">> = iolist_to_binary(re:replace("BCX","[^a]?X","cMq\\1\\1aX&sBw\\1aD",[caseless,global])),
    <<"12aXkXDGHXFpdvXlyHXbcX">> = iolist_to_binary(re:replace("12aXbcX","[^a]??X","&k&DGHXFpdvXlyH&",[caseless])),
    <<"12aXkXDGHXFpdvXlyHXbcXkcXDGHXFpdvXlyHcX">> = iolist_to_binary(re:replace("12aXbcX","[^a]??X","&k&DGHXFpdvXlyH&",[caseless,global])),
    <<"12AYudMQIhVhnAHEwYsBCX">> = iolist_to_binary(re:replace("12AXBCX","[^a]??X","YudMQIhVhnA\\1HE\\1wYs",[caseless])),
    <<"12AYudMQIhVhnAHEwYsBYudMQIhVhnAHEwYs">> = iolist_to_binary(re:replace("12AXBCX","[^a]??X","YudMQIhVhnA\\1HE\\1wYs",[caseless,global])),
    <<"BITGPfi">> = iolist_to_binary(re:replace("BCX","[^a]??X","ITGPfi",[caseless])),
    <<"BITGPfi">> = iolist_to_binary(re:replace("BCX","[^a]??X","ITGPfi",[caseless,global])),
    <<"12aXbLnPbdQcX">> = iolist_to_binary(re:replace("12aXbcX","[^a]?+X","\\1L\\1nP\\1\\1bdQ&",[caseless])),
    <<"12aXbLnPbdQcX">> = iolist_to_binary(re:replace("12aXbcX","[^a]?+X","\\1L\\1nP\\1\\1bdQ&",[caseless,global])),
    <<"12AXBiDECXbvLKwXgDAsFKBjx">> = iolist_to_binary(re:replace("12AXBCX","[^a]?+X","iDE&bvLKwXgDAsFK\\1Bjx",[caseless])),
    <<"12AXBiDECXbvLKwXgDAsFKBjx">> = iolist_to_binary(re:replace("12AXBCX","[^a]?+X","iDE&bvLKwXgDAsFK\\1Bjx",[caseless,global])),
    <<"BHniCX">> = iolist_to_binary(re:replace("BCX","[^a]?+X","Hni&",[caseless])),
    <<"BHniCX">> = iolist_to_binary(re:replace("BCX","[^a]?+X","Hni&",[caseless,global])),
    <<"aAqgef">> = iolist_to_binary(re:replace("abcdef","[^a]{2,3}","Aqg",[caseless])),
    <<"aAqgAqg">> = iolist_to_binary(re:replace("abcdef","[^a]{2,3}","Aqg",[caseless,global])),
    <<"ABCDpBCDBCDEdRIBCDwCXkBCDjvFPnEF">> = iolist_to_binary(re:replace("ABCDEF","[^a]{2,3}","&p&&\\1EdRI&wCXk&jvFPn",[caseless])),
    <<"ABCDpBCDBCDEdRIBCDwCXkBCDjvFPnEFpEFEFEdRIEFwCXkEFjvFPn">> = iolist_to_binary(re:replace("ABCDEF","[^a]{2,3}","&p&&\\1EdRI&wCXk&jvFPn",[caseless,global])),
    <<"auUfObcYbcbckFbcyXDhdgEUdef">> = iolist_to_binary(re:replace("abcdef","[^a]{2,3}?","uUfO&Y&&kF&yXDhdgEU",[caseless])),
    <<"auUfObcYbcbckFbcyXDhdgEUuUfOdeYdedekFdeyXDhdgEUf">> = iolist_to_binary(re:replace("abcdef","[^a]{2,3}?","uUfO&Y&&kF&yXDhdgEU",[caseless,global])),
    <<"ALJxBCSrSQBCLLVBCcDEF">> = iolist_to_binary(re:replace("ABCDEF","[^a]{2,3}?","L\\1Jx&SrSQ&LLV&c",[caseless])),
    <<"ALJxBCSrSQBCLLVBCcLJxDESrSQDELLVDEcF">> = iolist_to_binary(re:replace("ABCDEF","[^a]{2,3}?","L\\1Jx&SrSQ&LLV&c",[caseless,global])),
    <<"ahjBvDrJpGbcdbcdef">> = iolist_to_binary(re:replace("abcdef","[^a]{2,3}+","hjBv\\1DrJpG&&",[caseless])),
    <<"ahjBvDrJpGbcdbcdhjBvDrJpGefef">> = iolist_to_binary(re:replace("abcdef","[^a]{2,3}+","hjBv\\1DrJpG&&",[caseless,global])),
    <<"AMHFuJMpPfEF">> = iolist_to_binary(re:replace("ABCDEF","[^a]{2,3}+","MHFuJ\\1MpPf",[caseless])),
    <<"AMHFuJMpPfMHFuJMpPf">> = iolist_to_binary(re:replace("ABCDEF","[^a]{2,3}+","MHFuJ\\1MpPf",[caseless,global])),
    <<"ZMUUBZcvVsiXTO">> = iolist_to_binary(re:replace("Z","((a|)+)+Z","\\1&MUUB\\1&cvVsiXTO",[])),
    <<"ZMUUBZcvVsiXTO">> = iolist_to_binary(re:replace("Z","((a|)+)+Z","\\1&MUUB\\1&cvVsiXTO",[global])),
    <<"ACPKQHic">> = iolist_to_binary(re:replace("ac","(a)b|(a)c","ACPKQHic",[])),
    <<"ACPKQHic">> = iolist_to_binary(re:replace("ac","(a)b|(a)c","ACPKQHic",[global])),
    <<"egYBIaciLq">> = iolist_to_binary(re:replace("ac","(?>(a))b|(a)c","\\1\\1e\\1gYBI&iLq",[])),
    <<"egYBIaciLq">> = iolist_to_binary(re:replace("ac","(?>(a))b|(a)c","\\1\\1e\\1gYBI&iLq",[global])),
    <<"AbfsJWLacptMOXYup">> = iolist_to_binary(re:replace("ac","(?=(a))ab|(a)c","AbfsJWL\\1&ptMOXYup",[])),
    <<"AbfsJWLacptMOXYup">> = iolist_to_binary(re:replace("ac","(?=(a))ab|(a)c","AbfsJWL\\1&ptMOXYup",[global])),
    <<"GICvXacn">> = iolist_to_binary(re:replace("ac","((?>(a))b|(a)c)","GICvX&n",[])),
    <<"GICvXacn">> = iolist_to_binary(re:replace("ac","((?>(a))b|(a)c)","GICvX&n",[global])),
    <<"BJkac">> = iolist_to_binary(re:replace("ac","((?>(a))b|(a)c)++","BJk\\1",[])),
    <<"BJkac">> = iolist_to_binary(re:replace("ac","((?>(a))b|(a)c)++","BJk\\1",[global])),
    <<"macBadWyqAUwNacacC">> = iolist_to_binary(re:replace("ac","(?:(?>(a))b|(a)c)++","m\\1&BadWyqAUwN&&C",[])),
    <<"macBadWyqAUwNacacC">> = iolist_to_binary(re:replace("ac","(?:(?>(a))b|(a)c)++","m\\1&BadWyqAUwN&&C",[global])),
    ok.
run37() ->
    <<"Ywruhyac">> = iolist_to_binary(re:replace("ac","(?=(?>(a))b|(a)c)(..)","Ywr\\1uh\\1y&",[])),
    <<"Ywruhyac">> = iolist_to_binary(re:replace("ac","(?=(?>(a))b|(a)c)(..)","Ywr\\1uh\\1y&",[global])),
    <<"FWoMpwmacacAacpnsNM">> = iolist_to_binary(re:replace("ac","(?>(?>(a))b|(a)c)","FW\\1oMpwm&&A&pnsNM",[])),
    <<"FWoMpwmacacAacpnsNM">> = iolist_to_binary(re:replace("ac","(?>(?>(a))b|(a)c)","FW\\1oMpwm&&A&pnsNM",[global])),
    <<"j">> = iolist_to_binary(re:replace("aaaabaaabaabab","((?>(a+)b)+(aabab))","j",[])),
    <<"j">> = iolist_to_binary(re:replace("aaaabaaabaabab","((?>(a+)b)+(aabab))","j",[global])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","(?>a+|ab)+?c","ChAMNBQIJQHq",[])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","(?>a+|ab)+?c","ChAMNBQIJQHq",[global])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","(?>a+|ab)+c","Q&KpQ",[])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","(?>a+|ab)+c","Q&KpQ",[global])),
    <<"iDjaabcXpqUmXasnjCaabc">> = iolist_to_binary(re:replace("aabc","(?:a+|ab)+c","\\1i\\1Dj&XpqUmXasnj\\1C\\1&",[])),
    <<"iDjaabcXpqUmXasnjCaabc">> = iolist_to_binary(re:replace("aabc","(?:a+|ab)+c","\\1i\\1Dj&XpqUmXasnj\\1C\\1&",[global])),
    <<"iajoBuaebM">> = iolist_to_binary(re:replace("a","(?(?=(a))a)","i\\1joBu\\1ebM",[])),
    <<"iajoBuaebMijoBuebM">> = iolist_to_binary(re:replace("a","(?(?=(a))a)","i\\1joBu\\1ebM",[global])),
    <<"pJKablaabaNSiseJOytL">> = iolist_to_binary(re:replace("ab","(?(?=(a))a)(b)","pJK&la&\\1NSiseJOytL",[])),
    <<"pJKablaabaNSiseJOytL">> = iolist_to_binary(re:replace("ab","(?(?=(a))a)(b)","pJK&la&\\1NSiseJOytL",[global])),
    <<"aaaabc">> = iolist_to_binary(re:replace("aaaabc","^(?:a|ab)++c","ohvL",[])),
    <<"aaaabc">> = iolist_to_binary(re:replace("aaaabc","^(?:a|ab)++c","ohvL",[global])),
    <<"aaaabc">> = iolist_to_binary(re:replace("aaaabc","^(?>a|ab)++c","HJiF&Chbj",[])),
    <<"aaaabc">> = iolist_to_binary(re:replace("aaaabc","^(?>a|ab)++c","HJiF&Chbj",[global])),
    <<"xaaaabcrWcHPaaaabcKQaaaabc">> = iolist_to_binary(re:replace("aaaabc","^(?:a|ab)+c","\\1x&rWcH\\1P&KQ&",[])),
    <<"xaaaabcrWcHPaaaabcKQaaaabc">> = iolist_to_binary(re:replace("aaaabc","^(?:a|ab)+c","\\1x&rWcH\\1P&KQ&",[global])),
    <<"yTwKPUxyzNhlmWO">> = iolist_to_binary(re:replace("xyz","(?=abc){0}xyz","yTwKPU\\1&NhlmWO",[])),
    <<"yTwKPUxyzNhlmWO">> = iolist_to_binary(re:replace("xyz","(?=abc){0}xyz","yTwKPU\\1&NhlmWO",[global])),
    <<"xyz">> = iolist_to_binary(re:replace("xyz","(?=abc){1}xyz","psI",[])),
    <<"xyz">> = iolist_to_binary(re:replace("xyz","(?=abc){1}xyz","psI",[global])),
    <<"OacFXagb">> = iolist_to_binary(re:replace("ab","(?=(a))?.","O&cFX\\1g",[])),
    <<"OacFXagObcFXg">> = iolist_to_binary(re:replace("ab","(?=(a))?.","O&cFX\\1g",[global])),
    <<"aobc">> = iolist_to_binary(re:replace("bc","(?=(a))?.","\\1ao&",[])),
    <<"aobaoc">> = iolist_to_binary(re:replace("bc","(?=(a))?.","\\1ao&",[global])),
    <<"ibb">> = iolist_to_binary(re:replace("ab","(?=(a))??.","ib",[])),
    <<"ibib">> = iolist_to_binary(re:replace("ab","(?=(a))??.","ib",[global])),
    <<"wYYUWrmoc">> = iolist_to_binary(re:replace("bc","(?=(a))??.","wYYUWrmo",[])),
    <<"wYYUWrmowYYUWrmo">> = iolist_to_binary(re:replace("bc","(?=(a))??.","wYYUWrmo",[global])),
    <<"oabdCXrabdjJvHyaNHQ">> = iolist_to_binary(re:replace("abd","^(?=(?1))?[az]([abc])d","o&CXr&jJvHyaNHQ",[])),
    <<"oabdCXrabdjJvHyaNHQ">> = iolist_to_binary(re:replace("abd","^(?=(?1))?[az]([abc])d","o&CXr&jJvHyaNHQ",[global])),
    <<"ouJoxx">> = iolist_to_binary(re:replace("zcdxx","^(?=(?1))?[az]([abc])d","ouJo",[])),
    <<"ouJoxx">> = iolist_to_binary(re:replace("zcdxx","^(?=(?1))?[az]([abc])d","ouJo",[global])),
    <<"OcHOINyYSaaaaapUbBfxaaaaaGM">> = iolist_to_binary(re:replace("aaaaa","^(?!a){0}\\w+","OcHO\\1INyYS&pUbBfx&GM",[])),
    <<"OcHOINyYSaaaaapUbBfxaaaaaGM">> = iolist_to_binary(re:replace("aaaaa","^(?!a){0}\\w+","OcHO\\1INyYS&pUbBfx&GM",[global])),
    <<"abcBYe">> = iolist_to_binary(re:replace("abcxyz","(?<=(abc))?xyz","BYe",[])),
    <<"abcBYe">> = iolist_to_binary(re:replace("abcxyz","(?<=(abc))?xyz","BYe",[global])),
    <<"pqrxyzrBCAA">> = iolist_to_binary(re:replace("pqrxyz","(?<=(abc))?xyz","&rB\\1CAA",[])),
    <<"pqrxyzrBCAA">> = iolist_to_binary(re:replace("pqrxyz","(?<=(abc))?xyz","&rB\\1CAA",[global])),
    <<"aggg<<<aaa>>>LpvMhr">> = iolist_to_binary(re:replace("ggg<<<aaa>>>","^[\\g<a>]+","a&LpvMhr",[])),
    <<"aggg<<<aaa>>>LpvMhr">> = iolist_to_binary(re:replace("ggg<<<aaa>>>","^[\\g<a>]+","a&LpvMhr",[global])),
    <<"\\ga">> = iolist_to_binary(re:replace("\\ga","^[\\g<a>]+","dS",[])),
    <<"\\ga">> = iolist_to_binary(re:replace("\\ga","^[\\g<a>]+","dS",[global])),
    <<"cCflygggagagaxyz">> = iolist_to_binary(re:replace("gggagagaxyz","^[\\ga]+","cCfly&",[])),
    <<"cCflygggagagaxyz">> = iolist_to_binary(re:replace("gggagagaxyz","^[\\ga]+","cCfly&",[global])),
    ok.
run38() ->
    <<"Qaaaa444:::LBDXaZ">> = iolist_to_binary(re:replace("aaaa444:::Z","^[:a[:digit:]]+","Q&\\1LBD\\1X\\1a",[])),
    <<"Qaaaa444:::LBDXaZ">> = iolist_to_binary(re:replace("aaaa444:::Z","^[:a[:digit:]]+","Q&\\1LBD\\1X\\1a",[global])),
    <<"nTeSdyaaaa444:::bbbHldppaaaa444:::bbbDxZ">> = iolist_to_binary(re:replace("aaaa444:::bbbZ","^[:a[:digit:]:b]+","nTeSdy&Hldpp&Dx",[])),
    <<"nTeSdyaaaa444:::bbbHldppaaaa444:::bbbDxZ">> = iolist_to_binary(re:replace("aaaa444:::bbbZ","^[:a[:digit:]:b]+","nTeSdy&Hldpp&Dx",[global])),
    <<"pG:xxx::xxx:awKG">> = iolist_to_binary(re:replace(":xxx:","[:a]xxx[b:]","pG\\1\\1\\1&&awKG",[])),
    <<"pG:xxx::xxx:awKG">> = iolist_to_binary(re:replace(":xxx:","[:a]xxx[b:]","pG\\1\\1\\1&&awKG",[global])),
    <<"xaaMMJMXbGqwwAbEnLc">> = iolist_to_binary(re:replace("xaabc","(?<=a{2})b","MMJMX&GqwwA&EnL",[caseless])),
    <<"xaaMMJMXbGqwwAbEnLc">> = iolist_to_binary(re:replace("xaabc","(?<=a{2})b","MMJMX&GqwwA&EnL",[caseless,global])),
    <<"xabc">> = iolist_to_binary(re:replace("xabc","(?<=a{2})b","qrVVk&wTosM",[caseless])),
    <<"xabc">> = iolist_to_binary(re:replace("xabc","(?<=a{2})b","qrVVk&wTosM",[caseless,global])),
    <<"xayYbPPCodRbKVMc">> = iolist_to_binary(re:replace("xabc","(?<!a{2})b","yY&\\1PP\\1CodR&K\\1VM",[caseless])),
    <<"xayYbPPCodRbKVMc">> = iolist_to_binary(re:replace("xabc","(?<!a{2})b","yY&\\1PP\\1CodR&K\\1VM",[caseless,global])),
    <<"xaabc">> = iolist_to_binary(re:replace("xaabc","(?<!a{2})b","LwcvndSdaPKHex",[caseless])),
    <<"xaabc">> = iolist_to_binary(re:replace("xaabc","(?<!a{2})b","LwcvndSdaPKHex",[caseless,global])),
    <<"xa RfGpcjkWGiWxPCIAx">> = iolist_to_binary(re:replace("xa c","(?<=a\\h)c","R\\1fGp&\\1jkWGiWxPCIAx",[])),
    <<"xa RfGpcjkWGiWxPCIAx">> = iolist_to_binary(re:replace("xa c","(?<=a\\h)c","R\\1fGp&\\1jkWGiWxPCIAx",[global])),
    <<"axxFBOvYuiruXBbaagc">> = iolist_to_binary(re:replace("axxbc","(?<=[^a]{2})b","FBOvYuir\\1uXB&aag",[])),
    <<"axxFBOvYuiruXBbaagc">> = iolist_to_binary(re:replace("axxbc","(?<=[^a]{2})b","FBOvYuir\\1uXB&aag",[global])),
    <<"aAAkrObnobAqWbLbkpysYc">> = iolist_to_binary(re:replace("aAAbc","(?<=[^a]{2})b","krO&no&\\1Aq\\1W&L&kpysY",[])),
    <<"aAAkrObnobAqWbLbkpysYc">> = iolist_to_binary(re:replace("aAAbc","(?<=[^a]{2})b","krO&no&\\1Aq\\1W&L&kpysY",[global])),
    <<"xaabc">> = iolist_to_binary(re:replace("xaabc","(?<=[^a]{2})b","Dk\\1vAQ&J\\1w",[])),
    <<"xaabc">> = iolist_to_binary(re:replace("xaabc","(?<=[^a]{2})b","Dk\\1vAQ&J\\1w",[global])),
    <<"axxpeonyvOkMFYpbpc">> = iolist_to_binary(re:replace("axxbc","(?<=[^a]{2})b","peo\\1n\\1yvOkMFY\\1\\1p&p",[caseless])),
    <<"axxpeonyvOkMFYpbpc">> = iolist_to_binary(re:replace("axxbc","(?<=[^a]{2})b","peo\\1n\\1yvOkMFY\\1\\1p&p",[caseless,global])),
    <<"aAAbc">> = iolist_to_binary(re:replace("aAAbc","(?<=[^a]{2})b","qiY&iLNeXJ",[caseless])),
    <<"aAAbc">> = iolist_to_binary(re:replace("aAAbc","(?<=[^a]{2})b","qiY&iLNeXJ",[caseless,global])),
    <<"xaabc">> = iolist_to_binary(re:replace("xaabc","(?<=[^a]{2})b","O\\1E\\1yvbw\\1G&eF",[caseless])),
    <<"xaabc">> = iolist_to_binary(re:replace("xaabc","(?<=[^a]{2})b","O\\1E\\1yvbw\\1G&eF",[caseless,global])),
    <<"abdLaiU">> = iolist_to_binary(re:replace("abc","(?<=a\\H)c","dLaiU",[])),
    <<"abdLaiU">> = iolist_to_binary(re:replace("abc","(?<=a\\H)c","dLaiU",[global])),
    <<"abwLFUSYFgcaIHgcV">> = iolist_to_binary(re:replace("abc","(?<=a\\V)c","wLFUSYFg&aIH\\1g&V",[])),
    <<"abwLFUSYFgcaIHgcV">> = iolist_to_binary(re:replace("abc","(?<=a\\V)c","wLFUSYFg&aIH\\1g&V",[global])),
    <<"a
giXrPJTSnMXC">> = iolist_to_binary(re:replace("a
c","(?<=a\\v)c","giXrPJTSn\\1MX\\1C",[])),
    <<"a
giXrPJTSnMXC">> = iolist_to_binary(re:replace("a
c","(?<=a\\v)c","giXrPJTSn\\1MX\\1C",[global])),
    <<"XvQcccddYRcccddYX">> = iolist_to_binary(re:replace("XcccddYX","(?(?=c)c|d)++Y","vQ&R&",[])),
    <<"XvQcccddYRcccddYX">> = iolist_to_binary(re:replace("XcccddYX","(?(?=c)c|d)++Y","vQ&R&",[global])),
    <<"XwNBCTcccddYkcccddYvkfjSX">> = iolist_to_binary(re:replace("XcccddYX","(?(?=c)c|d)*+Y","wNB\\1C\\1T&k&vkfjS",[])),
    <<"XwNBCTcccddYkcccddYvkfjSX">> = iolist_to_binary(re:replace("XcccddYX","(?(?=c)c|d)*+Y","wNB\\1C\\1T&k&vkfjS",[global])),
    <<"akxVaaaiHFaaaaaaaSgDPdaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaa","^(a{2,3}){2,}+a","akxV\\1iHF&SgDPd&",[])),
    <<"akxVaaaiHFaaaaaaaSgDPdaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaa","^(a{2,3}){2,}+a","akxV\\1iHF&SgDPd&",[global])),
    <<"aaaaaa">> = iolist_to_binary(re:replace("aaaaaa","^(a{2,3}){2,}+a","QtJG\\1",[])),
    <<"aaaaaa">> = iolist_to_binary(re:replace("aaaaaa","^(a{2,3}){2,}+a","QtJG\\1",[global])),
    <<"aaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaa","^(a{2,3}){2,}+a","thC&Kt&X",[])),
    <<"aaaaaaaaa">> = iolist_to_binary(re:replace("aaaaaaaaa","^(a{2,3}){2,}+a","thC&Kt&X",[global])),
    <<"aaaaaa">> = iolist_to_binary(re:replace("aaaaaa","^(a{2,3})++a","OWpbwPv&&DXmmr",[])),
    <<"aaaaaa">> = iolist_to_binary(re:replace("aaaaaa","^(a{2,3})++a","OWpbwPv&&DXmmr",[global])),
    <<"aaaaaa">> = iolist_to_binary(re:replace("aaaaaa","^(a{2,3})*+a","vR\\1\\1\\1f&&tS&JWPTPl",[])),
    <<"aaaaaa">> = iolist_to_binary(re:replace("aaaaaa","^(a{2,3})*+a","vR\\1\\1\\1f&&tS&JWPTPl",[global])),
    <<"X X">> = iolist_to_binary(re:replace("X X","\\H\\h\\V\\v","j\\1Ex&Dgrsjrf\\1GMEA\\1j",[])),
    <<"X X">> = iolist_to_binary(re:replace("X X","\\H\\h\\V\\v","j\\1Ex&Dgrsjrf\\1GMEA\\1j",[global])),
    <<"BvVX	XAqf">> = iolist_to_binary(re:replace("X	X","\\H\\h\\V\\v","BvV&Aqf",[])),
    <<"BvVX	XAqf">> = iolist_to_binary(re:replace("X	X","\\H\\h\\V\\v","BvV&Aqf",[global])),
    <<"  X">> = iolist_to_binary(re:replace("  X","\\H\\h\\V\\v","hQsG\\1E",[])),
    <<"  X">> = iolist_to_binary(re:replace("  X","\\H\\h\\V\\v","hQsG\\1E",[global])),
    <<"WAu">> = iolist_to_binary(re:replace("	  X
","\\H*\\h+\\V?\\v{3,4}","W\\1Au",[])),
    <<"WAu">> = iolist_to_binary(re:replace("	  X
","\\H*\\h+\\V?\\v{3,4}","W\\1Au",[global])),
    <<"KdrNqNfS	  
	  
qidyBChn">> = iolist_to_binary(re:replace("	  
","\\H*\\h+\\V?\\v{3,4}","KdrNqNfS\\1&&qidyBChn",[])),
    <<"KdrNqNfS	  
	  
qidyBChn">> = iolist_to_binary(re:replace("	  
","\\H*\\h+\\V?\\v{3,4}","KdrNqNfS\\1&&qidyBChn",[global])),
    <<"FWM">> = iolist_to_binary(re:replace("	  
","\\H*\\h+\\V?\\v{3,4}","FW\\1M",[])),
    <<"FWM">> = iolist_to_binary(re:replace("	  
","\\H*\\h+\\V?\\v{3,4}","FW\\1M",[global])),
    <<"	  
">> = iolist_to_binary(re:replace("	  
","\\H*\\h+\\V?\\v{3,4}","FxjIeXxjL&",[])),
    <<"	  
">> = iolist_to_binary(re:replace("	  
","\\H*\\h+\\V?\\v{3,4}","FxjIeXxjL&",[global])),
    <<"XY  AGIABCDoABCDowvvABCDEwE">> = iolist_to_binary(re:replace("XY  ABCDE","\\H{3,4}","\\1AGI&o&owvv&Ew",[])),
    <<"XY  AGIABCDoABCDowvvABCDEwE">> = iolist_to_binary(re:replace("XY  ABCDE","\\H{3,4}","\\1AGI&o&owvv&Ew",[global])),
    <<"XY  IQPQRnBRrncew ST">> = iolist_to_binary(re:replace("XY  PQR ST","\\H{3,4}","IQ\\1&nBRrn\\1cew",[])),
    <<"XY  IQPQRnBRrncew ST">> = iolist_to_binary(re:replace("XY  PQR ST","\\H{3,4}","IQ\\1&nBRrn\\1cew",[global])),
    <<"XY  ALB    PllBQRS">> = iolist_to_binary(re:replace("XY  AB    PQRS",".\\h{3,4}.","L&ll\\1B",[])),
    <<"XY  ALB    PllBQRS">> = iolist_to_binary(re:replace("XY  AB    PQRS",".\\h{3,4}.","L&ll\\1B",[global])),
    ok.
run39() ->
    <<">WKySlnCXNNNYZolaD">> = iolist_to_binary(re:replace(">XNNNYZ","\\h*X\\h?\\H+Y\\H?Z","WKySlnC&olaD",[])),
    <<">WKySlnCXNNNYZolaD">> = iolist_to_binary(re:replace(">XNNNYZ","\\h*X\\h?\\H+Y\\H?Z","WKySlnC&olaD",[global])),
    <<">TkcVE  X NYQZADlLsXYvoD">> = iolist_to_binary(re:replace(">  X NYQZ","\\h*X\\h?\\H+Y\\H?Z","TkcVE&ADlL\\1sXYvoD",[])),
    <<">TkcVE  X NYQZADlLsXYvoD">> = iolist_to_binary(re:replace(">  X NYQZ","\\h*X\\h?\\H+Y\\H?Z","TkcVE&ADlL\\1sXYvoD",[global])),
    <<">XYZ">> = iolist_to_binary(re:replace(">XYZ","\\h*X\\h?\\H+Y\\H?Z","dW",[])),
    <<">XYZ">> = iolist_to_binary(re:replace(">XYZ","\\h*X\\h?\\H+Y\\H?Z","dW",[global])),
    <<">  X NY Z">> = iolist_to_binary(re:replace(">  X NY Z","\\h*X\\h?\\H+Y\\H?Z","BtvqF&CdIAJlTXyQ",[])),
    <<">  X NY Z">> = iolist_to_binary(re:replace(">  X NY Z","\\h*X\\h?\\H+Y\\H?Z","BtvqF&CdIAJlTXyQ",[global])),
    <<">eAmFIitYytvsqF">> = iolist_to_binary(re:replace(">XY
Z
ANN","\\v*X\\v?Y\\v+Z\\V*\\x0a\\V+\\x0b\\V{2,3}\\x0c","eAmFIi\\1tYytvsq\\1F",[])),
    <<">eAmFIitYytvsqF">> = iolist_to_binary(re:replace(">XY
Z
ANN","\\v*X\\v?Y\\v+Z\\V*\\x0a\\V+\\x0b\\V{2,3}\\x0c","eAmFIi\\1tYytvsq\\1F",[global])),
    <<">oA
X
Y
ZZZ
AAANNNmuF
X
Y
ZZZ
AAANNNKG">> = iolist_to_binary(re:replace(">
X
Y
ZZZ
AAANNN","\\v*X\\v?Y\\v+Z\\V*\\x0a\\V+\\x0b\\V{2,3}\\x0c","oA&muF&KG\\1",[])),
    <<">oA
X
Y
ZZZ
AAANNNmuF
X
Y
ZZZ
AAANNNKG">> = iolist_to_binary(re:replace(">
X
Y
ZZZ
AAANNN","\\v*X\\v?Y\\v+Z\\V*\\x0a\\V+\\x0b\\V{2,3}\\x0c","oA&muF&KG\\1",[global])),
    <<"foofoofoofooidYPfGETo">> = iolist_to_binary(re:replace("foobar","(foo)\\Kbar","\\1\\1\\1idYPfGETo",[])),
    <<"foofoofoofooidYPfGETo">> = iolist_to_binary(re:replace("foobar","(foo)\\Kbar","\\1\\1\\1idYPfGETo",[global])),
    <<"foobNQDHCQbarbarLqxKPLt">> = iolist_to_binary(re:replace("foobar","(foo)(\\Kbar|baz)","bNQDHCQ&&LqxKPLt",[])),
    <<"foobNQDHCQbarbarLqxKPLt">> = iolist_to_binary(re:replace("foobar","(foo)(\\Kbar|baz)","bNQDHCQ&&LqxKPLt",[global])),
    <<"kfooPHqOwBhofoobazWcAxPfoofqs">> = iolist_to_binary(re:replace("foobaz","(foo)(\\Kbar|baz)","k\\1PHqOwBho&WcAxP\\1fqs",[])),
    <<"kfooPHqOwBhofoobazWcAxPfoofqs">> = iolist_to_binary(re:replace("foobaz","(foo)(\\Kbar|baz)","k\\1PHqOwBho&WcAxP\\1fqs",[global])),
    <<"foopuhITHFfoobarGmjJlsK">> = iolist_to_binary(re:replace("foobarbaz","(foo\\Kbar)baz","puhITHF\\1GmjJlsK",[])),
    <<"foopuhITHFfoobarGmjJlsK">> = iolist_to_binary(re:replace("foobarbaz","(foo\\Kbar)baz","puhITHF\\1GmjJlsK",[global])),
    <<"abUHaababababbbabZnNabcmXXXX">> = iolist_to_binary(re:replace("ababababbbabZXXXX","^(a(b))\\1\\g1\\g{1}\\g-1\\g{-1}\\g{-2}Z","\\1UHa&nN\\1cm",[])),
    <<"abUHaababababbbabZnNabcmXXXX">> = iolist_to_binary(re:replace("ababababbbabZXXXX","^(a(b))\\1\\g1\\g{1}\\g-1\\g{-1}\\g{-2}Z","\\1UHa&nN\\1cm",[global])),
    <<"tom-tom">> = iolist_to_binary(re:replace("tom-tom","(?<A>tom|bon)-\\g{A}","&",[])),
    <<"tom-tom">> = iolist_to_binary(re:replace("tom-tom","(?<A>tom|bon)-\\g{A}","&",[global])),
    <<"bonMubonyADtGr">> = iolist_to_binary(re:replace("bon-bon","(?<A>tom|bon)-\\g{A}","\\1Mu\\1yADtGr",[])),
    <<"bonMubonyADtGr">> = iolist_to_binary(re:replace("bon-bon","(?<A>tom|bon)-\\g{A}","\\1Mu\\1yADtGr",[global])),
    <<"bacxxx">> = iolist_to_binary(re:replace("bacxxx","(^(a|b\\g{-1}))","xE&\\1\\1\\1oKH",[])),
    <<"bacxxx">> = iolist_to_binary(re:replace("bacxxx","(^(a|b\\g{-1}))","xE&\\1\\1\\1oKH",[global])),
    <<"YabcabcabcabcLabcgEkUWabcabc">> = iolist_to_binary(re:replace("abcabc","(?|(abc)|(xyz))\\1","Y&&L\\1gEkUW&",[])),
    <<"YabcabcabcabcLabcgEkUWabcabc">> = iolist_to_binary(re:replace("abcabc","(?|(abc)|(xyz))\\1","Y&&L\\1gEkUW&",[global])),
    <<"WPlOxyzxyzxyzxyzXQQJOCxyzxyzxyzSLuxyzxyzIxyz">> = iolist_to_binary(re:replace("xyzxyz","(?|(abc)|(xyz))\\1","WPlO&&XQQJOC&\\1SLu&I\\1",[])),
    <<"WPlOxyzxyzxyzxyzXQQJOCxyzxyzxyzSLuxyzxyzIxyz">> = iolist_to_binary(re:replace("xyzxyz","(?|(abc)|(xyz))\\1","WPlO&&XQQJOC&\\1SLu&I\\1",[global])),
    <<"abcxyz">> = iolist_to_binary(re:replace("abcxyz","(?|(abc)|(xyz))\\1","&&",[])),
    <<"abcxyz">> = iolist_to_binary(re:replace("abcxyz","(?|(abc)|(xyz))\\1","&&",[global])),
    <<"xyzabc">> = iolist_to_binary(re:replace("xyzabc","(?|(abc)|(xyz))\\1","Gaq&oXBMVBE&tSYRHR",[])),
    <<"xyzabc">> = iolist_to_binary(re:replace("xyzabc","(?|(abc)|(xyz))\\1","Gaq&oXBMVBE&tSYRHR",[global])),
    <<"Djtabcabc">> = iolist_to_binary(re:replace("abcabc","(?|(abc)|(xyz))(?1)","Djt&",[])),
    <<"Djtabcabc">> = iolist_to_binary(re:replace("abcabc","(?|(abc)|(xyz))(?1)","Djt&",[global])),
    <<"GvvcQxyzxyzxyzabclBxPYfkxyzabc">> = iolist_to_binary(re:replace("xyzabc","(?|(abc)|(xyz))(?1)","GvvcQ\\1\\1&lBxPYfk&",[])),
    <<"GvvcQxyzxyzxyzabclBxPYfkxyzabc">> = iolist_to_binary(re:replace("xyzabc","(?|(abc)|(xyz))(?1)","GvvcQ\\1\\1&lBxPYfk&",[global])),
    <<"xyzxyz">> = iolist_to_binary(re:replace("xyzxyz","(?|(abc)|(xyz))(?1)","\\1CrHVKxYs",[])),
    <<"xyzxyz">> = iolist_to_binary(re:replace("xyzxyz","(?|(abc)|(xyz))(?1)","\\1CrHVKxYs",[global])),
    <<"tQATKgVWXYabcdYcvM">> = iolist_to_binary(re:replace("XYabcdY","^X(?5)(a)(?|(b)|(q))(c)(d)(Y)","tQATKgVW&cvM",[])),
    <<"tQATKgVWXYabcdYcvM">> = iolist_to_binary(re:replace("XYabcdY","^X(?5)(a)(?|(b)|(q))(c)(d)(Y)","tQATKgVW&cvM",[global])),
    <<"XYabcdYmnoJCDXYabcdYrVXYabcdYiH">> = iolist_to_binary(re:replace("XYabcdY","^X(?7)(a)(?|(b|(r)(s))|(q))(c)(d)(Y)","&mnoJCD&rV&iH",[])),
    <<"XYabcdYmnoJCDXYabcdYrVXYabcdYiH">> = iolist_to_binary(re:replace("XYabcdY","^X(?7)(a)(?|(b|(r)(s))|(q))(c)(d)(Y)","&mnoJCD&rV&iH",[global])),
    <<"syXYabcdYBDYtaeaMaPanXYabcdYXYabcdYC">> = iolist_to_binary(re:replace("XYabcdY","^X(?7)(a)(?|(b|(?|(r)|(t))(s))|(q))(c)(d)(Y)","sy&BDYt\\1eaM\\1P\\1n&&C",[])),
    <<"syXYabcdYBDYtaeaMaPanXYabcdYXYabcdYC">> = iolist_to_binary(re:replace("XYabcdY","^X(?7)(a)(?|(b|(?|(r)|(t))(s))|(q))(c)(d)(Y)","sy&BDYt\\1eaM\\1P\\1n&&C",[global])),
    <<"Ka:aaufAhHxbaRa:aaEGpjWaxyz">> = iolist_to_binary(re:replace("a:aaxyz","(?'abc'\\w+):\\k<abc>{2}","K&ufAhHxb\\1R&EGpjW\\1",[])),
    <<"Ka:aaufAhHxbaRa:aaEGpjWaxyz">> = iolist_to_binary(re:replace("a:aaxyz","(?'abc'\\w+):\\k<abc>{2}","K&ufAhHxb\\1R&EGpjW\\1",[global])),
    <<"ab:ababsOgbTHab:ababCab:ababuonxyz">> = iolist_to_binary(re:replace("ab:ababxyz","(?'abc'\\w+):\\k<abc>{2}","&sOgbTH&C&uon",[])),
    <<"ab:ababsOgbTHab:ababCab:ababuonxyz">> = iolist_to_binary(re:replace("ab:ababxyz","(?'abc'\\w+):\\k<abc>{2}","&sOgbTH&C&uon",[global])),
    <<"a:axyz">> = iolist_to_binary(re:replace("a:axyz","(?'abc'\\w+):\\k<abc>{2}","Jn\\1eo&&BX\\1\\1",[])),
    <<"a:axyz">> = iolist_to_binary(re:replace("a:axyz","(?'abc'\\w+):\\k<abc>{2}","Jn\\1eo&&BX\\1\\1",[global])),
    <<"ab:abxyz">> = iolist_to_binary(re:replace("ab:abxyz","(?'abc'\\w+):\\k<abc>{2}","MGXaAc",[])),
    <<"ab:abxyz">> = iolist_to_binary(re:replace("ab:abxyz","(?'abc'\\w+):\\k<abc>{2}","MGXaAc",[global])),
    <<"QLdwahNFOxyz">> = iolist_to_binary(re:replace("a:aaxyz","(?'abc'\\w+):\\g{abc}{2}","QLdw\\1hNFO",[])),
    <<"QLdwahNFOxyz">> = iolist_to_binary(re:replace("a:aaxyz","(?'abc'\\w+):\\g{abc}{2}","QLdw\\1hNFO",[global])),
    <<"mrAsBveab:ababUabkabsEab:ababxyz">> = iolist_to_binary(re:replace("ab:ababxyz","(?'abc'\\w+):\\g{abc}{2}","mrAsBve&U\\1k\\1sE&",[])),
    <<"mrAsBveab:ababUabkabsEab:ababxyz">> = iolist_to_binary(re:replace("ab:ababxyz","(?'abc'\\w+):\\g{abc}{2}","mrAsBve&U\\1k\\1sE&",[global])),
    <<"a:axyz">> = iolist_to_binary(re:replace("a:axyz","(?'abc'\\w+):\\g{abc}{2}","iI\\1oucpHiJtV",[])),
    <<"a:axyz">> = iolist_to_binary(re:replace("a:axyz","(?'abc'\\w+):\\g{abc}{2}","iI\\1oucpHiJtV",[global])),
    <<"ab:abxyz">> = iolist_to_binary(re:replace("ab:abxyz","(?'abc'\\w+):\\g{abc}{2}","fRWj\\1&Pe\\1\\1tBdVW\\1qy",[])),
    <<"ab:abxyz">> = iolist_to_binary(re:replace("ab:abxyz","(?'abc'\\w+):\\g{abc}{2}","fRWj\\1&Pe\\1\\1tBdVW\\1qy",[global])),
    <<"thjvygKapabdpYsauBr">> = iolist_to_binary(re:replace("abd","^(?<ab>a)? (?(<ab>)b|c) (?('ab')d|e)","thjvygK\\1p&pYs\\1uBr",[extended])),
    <<"thjvygKapabdpYsauBr">> = iolist_to_binary(re:replace("abd","^(?<ab>a)? (?(<ab>)b|c) (?('ab')d|e)","thjvygK\\1p&pYs\\1uBr",[extended,global])),
    <<"tbFvqIQgRTAxEph">> = iolist_to_binary(re:replace("ce","^(?<ab>a)? (?(<ab>)b|c) (?('ab')d|e)","tbFvq\\1IQg\\1RTAxEph",[extended])),
    <<"tbFvqIQgRTAxEph">> = iolist_to_binary(re:replace("ce","^(?<ab>a)? (?(<ab>)b|c) (?('ab')d|e)","tbFvq\\1IQg\\1RTAxEph",[extended,global])),
    <<"VaXTpQNaXaXZS">> = iolist_to_binary(re:replace("aXaXZ","^(a.)\\g-1Z","V\\1TpQN&S",[])),
    <<"VaXTpQNaXaXZS">> = iolist_to_binary(re:replace("aXaXZ","^(a.)\\g-1Z","V\\1TpQN&S",[global])),
    <<"wlsBaXO">> = iolist_to_binary(re:replace("aXaXZ","^(a.)\\g{-1}Z","wlsB\\1O",[])),
    <<"wlsBaXO">> = iolist_to_binary(re:replace("aXaXZ","^(a.)\\g{-1}Z","wlsB\\1O",[global])),
    <<"YoqtePMHamKUoabcd">> = iolist_to_binary(re:replace("abcd","^(?(DEFINE) (?<A> a) (?<B> b) )  (?&A) (?&B) ","Yo\\1qtePMHamKUo&",[extended])),
    <<"YoqtePMHamKUoabcd">> = iolist_to_binary(re:replace("abcd","^(?(DEFINE) (?<A> a) (?<B> b) )  (?&A) (?&B) ","Yo\\1qtePMHamKUo&",[extended,global])),
    <<"aabceaabcaabcXaabcvW">> = iolist_to_binary(re:replace("aabc","(?<all>(?:(?:a(?&all))|(b))(c?))","\\1e&&X&vW",[])),
    <<"aabceaabcaabcXaabcvW">> = iolist_to_binary(re:replace("aabc","(?<all>(?:(?:a(?&all))|(b))(c?))","\\1e&&X&vW",[global])),
    ok.
run40() ->
    <<"bKrRGsoSckoSG">> = iolist_to_binary(re:replace("abc","(a(b)|(c))(?1)","bKrRGsoSckoSG",[])),
    <<"bKrRGsoSckoSG">> = iolist_to_binary(re:replace("abc","(a(b)|(c))(?1)","bKrRGsoSckoSG",[global])),
    <<"cxc">> = iolist_to_binary(re:replace("cab","(a(b)|(c))(?1)","\\1xc",[])),
    <<"cxc">> = iolist_to_binary(re:replace("cab","(a(b)|(c))(?1)","\\1xc",[global])),
    <<"DiabccgFR">> = iolist_to_binary(re:replace("abc","(?1)(a(b)|(c))","Di&\\1gFR",[])),
    <<"DiabccgFR">> = iolist_to_binary(re:replace("abc","(?1)(a(b)|(c))","Di&\\1gFR",[global])),
    <<"abxScabEabSTgXbabkTtoC">> = iolist_to_binary(re:replace("cab","(?1)(a(b)|(c))","\\1xS&E\\1STgXb\\1kTtoC",[])),
    <<"abxScabEabSTgXbabkTtoC">> = iolist_to_binary(re:replace("cab","(?1)(a(b)|(c))","\\1xS&E\\1STgXb\\1kTtoC",[global])),
    <<"NFFmetcalfe 33AMmetcalfe 33kpmetcalfemD">> = iolist_to_binary(re:replace("metcalfe 33","(?<NAME>(?&NAME_PAT))\\s+(?<ADDR>(?&ADDRESS_PAT))
  (?(DEFINE)
  (?<NAME_PAT>[a-z]+)
  (?<ADDRESS_PAT>\\d+)
  )","NFF&AM&kp\\1mD",[extended])),
    <<"NFFmetcalfe 33AMmetcalfe 33kpmetcalfemD">> = iolist_to_binary(re:replace("metcalfe 33","(?<NAME>(?&NAME_PAT))\\s+(?<ADDR>(?&ADDRESS_PAT))
  (?(DEFINE)
  (?<NAME_PAT>[a-z]+)
  (?<ADDRESS_PAT>\\d+)
  )","NFF&AM&kp\\1mD",[extended,global])),
    <<"KC1.2.3.4DnJouY">> = iolist_to_binary(re:replace("1.2.3.4","(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))\\b(?&byte)(\\.(?&byte)){3}","\\1KC&DnJouY",[])),
    <<"KC1.2.3.4DnJouY">> = iolist_to_binary(re:replace("1.2.3.4","(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))\\b(?&byte)(\\.(?&byte)){3}","\\1KC&DnJouY",[global])),
    <<"ItNl">> = iolist_to_binary(re:replace("131.111.10.206","(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))\\b(?&byte)(\\.(?&byte)){3}","ItNl",[])),
    <<"ItNl">> = iolist_to_binary(re:replace("131.111.10.206","(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))\\b(?&byte)(\\.(?&byte)){3}","ItNl",[global])),
    <<"SpCeqD">> = iolist_to_binary(re:replace("10.0.0.0","(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))\\b(?&byte)(\\.(?&byte)){3}","SpCeqD",[])),
    <<"SpCeqD">> = iolist_to_binary(re:replace("10.0.0.0","(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))\\b(?&byte)(\\.(?&byte)){3}","SpCeqD",[global])),
    <<"10.6">> = iolist_to_binary(re:replace("10.6","(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))\\b(?&byte)(\\.(?&byte)){3}","Vwu\\1eYyN\\1Fc",[])),
    <<"10.6">> = iolist_to_binary(re:replace("10.6","(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))\\b(?&byte)(\\.(?&byte)){3}","Vwu\\1eYyN\\1Fc",[global])),
    <<"455.3.4.5">> = iolist_to_binary(re:replace("455.3.4.5","(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))\\b(?&byte)(\\.(?&byte)){3}","Kjg&A&JXahP\\1yE",[])),
    <<"455.3.4.5">> = iolist_to_binary(re:replace("455.3.4.5","(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))\\b(?&byte)(\\.(?&byte)){3}","Kjg&A&JXahP\\1yE",[global])),
    <<"ngvFLRPw">> = iolist_to_binary(re:replace("1.2.3.4","\\b(?&byte)(\\.(?&byte)){3}(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))","ngvFLRPw",[])),
    <<"ngvFLRPw">> = iolist_to_binary(re:replace("1.2.3.4","\\b(?&byte)(\\.(?&byte)){3}(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))","ngvFLRPw",[global])),
    <<"Dn.206ucm.206.206fFKuYp">> = iolist_to_binary(re:replace("131.111.10.206","\\b(?&byte)(\\.(?&byte)){3}(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))","Dn\\1ucm\\1\\1fFKuYp",[])),
    <<"Dn.206ucm.206.206fFKuYp">> = iolist_to_binary(re:replace("131.111.10.206","\\b(?&byte)(\\.(?&byte)){3}(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))","Dn\\1ucm\\1\\1fFKuYp",[global])),
    <<"10.0.0.0Y">> = iolist_to_binary(re:replace("10.0.0.0","\\b(?&byte)(\\.(?&byte)){3}(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))","&Y",[])),
    <<"10.0.0.0Y">> = iolist_to_binary(re:replace("10.0.0.0","\\b(?&byte)(\\.(?&byte)){3}(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))","&Y",[global])),
    <<"10.6">> = iolist_to_binary(re:replace("10.6","\\b(?&byte)(\\.(?&byte)){3}(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))","x&nCBUCkG&PAt\\1ML",[])),
    <<"10.6">> = iolist_to_binary(re:replace("10.6","\\b(?&byte)(\\.(?&byte)){3}(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))","x&nCBUCkG&PAt\\1ML",[global])),
    <<"455.3.4.5">> = iolist_to_binary(re:replace("455.3.4.5","\\b(?&byte)(\\.(?&byte)){3}(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))","ii",[])),
    <<"455.3.4.5">> = iolist_to_binary(re:replace("455.3.4.5","\\b(?&byte)(\\.(?&byte)){3}(?(DEFINE)(?<byte>2[0-4]\\d|25[0-5]|1\\d\\d|[1-9]?\\d))","ii",[global])),
    <<"Vnow is the time for all good men to come to the aid of the partyGxIwMeaq">> = iolist_to_binary(re:replace("now is the time for all good men to come to the aid of the party","^(\\w++|\\s++)*$","V&GxIwMeaq",[])),
    <<"Vnow is the time for all good men to come to the aid of the partyGxIwMeaq">> = iolist_to_binary(re:replace("now is the time for all good men to come to the aid of the party","^(\\w++|\\s++)*$","V&GxIwMeaq",[global])),
    <<"this is not a line with only words and spaces!">> = iolist_to_binary(re:replace("this is not a line with only words and spaces!","^(\\w++|\\s++)*$","Aa&pTX&PHaekH",[])),
    <<"this is not a line with only words and spaces!">> = iolist_to_binary(re:replace("this is not a line with only words and spaces!","^(\\w++|\\s++)*$","Aa&pTX&PHaekH",[global])),
    <<"12345avmPNciE">> = iolist_to_binary(re:replace("12345a","(\\d++)(\\w)","&vmPNciE",[])),
    <<"12345avmPNciE">> = iolist_to_binary(re:replace("12345a","(\\d++)(\\w)","&vmPNciE",[global])),
    <<"12345+">> = iolist_to_binary(re:replace("12345+","(\\d++)(\\w)","o&p&qO\\1GfIeV",[])),
    <<"12345+">> = iolist_to_binary(re:replace("12345+","(\\d++)(\\w)","o&p&qO\\1GfIeV",[global])),
    <<"LTrSmxIPOKMqwVAA">> = iolist_to_binary(re:replace("aaab","a++b","LTrSmxIP\\1OKMqwVAA",[])),
    <<"LTrSmxIPOKMqwVAA">> = iolist_to_binary(re:replace("aaab","a++b","LTrSmxIP\\1OKMqwVAA",[global])),
    <<"aKjaaabwaaabwmYaaabIpaaabW">> = iolist_to_binary(re:replace("aaab","(a++b)","aKj\\1w\\1wmY\\1Ip\\1W",[])),
    <<"aKjaaabwaaabwmYaaabIpaaabW">> = iolist_to_binary(re:replace("aaab","(a++b)","aKj\\1w\\1wmY\\1Ip\\1W",[global])),
    <<"l">> = iolist_to_binary(re:replace("aaab","(a++)b","l",[])),
    <<"l">> = iolist_to_binary(re:replace("aaab","(a++)b","l",[global])),
    <<"((bQabc(ade)ufh()()xmbxIabc(ade)ufh()()x">> = iolist_to_binary(re:replace("((abc(ade)ufh()()x","([^()]++|\\([^()]*\\))+","bQ&mb\\1I&",[])),
    <<"((bQabc(ade)ufh()()xmbxIabc(ade)ufh()()x">> = iolist_to_binary(re:replace("((abc(ade)ufh()()x","([^()]++|\\([^()]*\\))+","bQ&mb\\1I&",[global])),
    <<"(abc)qof(abc)K(abc)">> = iolist_to_binary(re:replace("(abc)","\\(([^()]++|\\([^()]+\\))+\\)","&qof&K&",[])),
    <<"(abc)qof(abc)K(abc)">> = iolist_to_binary(re:replace("(abc)","\\(([^()]++|\\([^()]+\\))+\\)","&qof&K&",[global])),
    <<"LbxyzOi(abc(def)xyz)xyzxyz(abc(def)xyz)FEAxyzLmxyzT(abc(def)xyz)t">> = iolist_to_binary(re:replace("(abc(def)xyz)","\\(([^()]++|\\([^()]+\\))+\\)","Lb\\1Oi&\\1\\1&FEA\\1Lm\\1T&t",[])),
    <<"LbxyzOi(abc(def)xyz)xyzxyz(abc(def)xyz)FEAxyzLmxyzT(abc(def)xyz)t">> = iolist_to_binary(re:replace("(abc(def)xyz)","\\(([^()]++|\\([^()]+\\))+\\)","Lb\\1Oi&\\1\\1&FEA\\1Lm\\1T&t",[global])),
    <<"((()aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("((()aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","\\(([^()]++|\\([^()]+\\))+\\)","PtF&e\\1KFwR&E",[])),
    <<"((()aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa">> = iolist_to_binary(re:replace("((()aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa","\\(([^()]++|\\([^()]+\\))+\\)","PtF&e\\1KFwR&E",[global])),
    <<"NabcVuwqcDabccPXOabcqgabcY">> = iolist_to_binary(re:replace("abc","^([^()]|\\((?1)*\\))*$","N&Vuwq\\1D&\\1PXO&qg&Y",[])),
    <<"NabcVuwqcDabccPXOabcqgabcY">> = iolist_to_binary(re:replace("abc","^([^()]|\\((?1)*\\))*$","N&Vuwq\\1D&\\1PXO&qg&Y",[global])),
    <<"gfw">> = iolist_to_binary(re:replace("a(b)c","^([^()]|\\((?1)*\\))*$","gfw",[])),
    <<"gfw">> = iolist_to_binary(re:replace("a(b)c","^([^()]|\\((?1)*\\))*$","gfw",[global])),
    <<"m">> = iolist_to_binary(re:replace("a(b(c))d","^([^()]|\\((?1)*\\))*$","m",[])),
    <<"m">> = iolist_to_binary(re:replace("a(b(c))d","^([^()]|\\((?1)*\\))*$","m",[global])),
    <<"a(b(c)d">> = iolist_to_binary(re:replace("a(b(c)d","^([^()]|\\((?1)*\\))*$","pr\\1hSV&a\\1Tq\\1uk\\1lGQn",[])),
    <<"a(b(c)d">> = iolist_to_binary(re:replace("a(b(c)d","^([^()]|\\((?1)*\\))*$","pr\\1hSV&a\\1Tq\\1uk\\1lGQn",[global])),
    <<"PLu3jRBxH>abc>123<xyz<j">> = iolist_to_binary(re:replace(">abc>123<xyz<","^>abc>([^()]|\\((?1)*\\))*<xyz<$","PLu\\1jRBxH&j",[])),
    <<"PLu3jRBxH>abc>123<xyz<j">> = iolist_to_binary(re:replace(">abc>123<xyz<","^>abc>([^()]|\\((?1)*\\))*<xyz<$","PLu\\1jRBxH&j",[global])),
    <<"3RonyFdbw>abc>1(2)3<xyz<3UT">> = iolist_to_binary(re:replace(">abc>1(2)3<xyz<","^>abc>([^()]|\\((?1)*\\))*<xyz<$","\\1RonyFdbw&\\1UT",[])),
    <<"3RonyFdbw>abc>1(2)3<xyz<3UT">> = iolist_to_binary(re:replace(">abc>1(2)3<xyz<","^>abc>([^()]|\\((?1)*\\))*<xyz<$","\\1RonyFdbw&\\1UT",[global])),
    <<"L(1(2)3)tmF(1(2)3)eEu>abc>(1(2)3)<xyz<>abc>(1(2)3)<xyz<hDoqNG">> = iolist_to_binary(re:replace(">abc>(1(2)3)<xyz<","^>abc>([^()]|\\((?1)*\\))*<xyz<$","L\\1tmF\\1eEu&&hDoqNG",[])),
    <<"L(1(2)3)tmF(1(2)3)eEu>abc>(1(2)3)<xyz<>abc>(1(2)3)<xyz<hDoqNG">> = iolist_to_binary(re:replace(">abc>(1(2)3)<xyz<","^>abc>([^()]|\\((?1)*\\))*<xyz<$","L\\1tmF\\1eEu&&hDoqNG",[global])),
    <<"ks1221">> = iolist_to_binary(re:replace("1221","^(?:((.)(?1)\\2|)|((.)(?3)\\4|.))$","ks\\1",[caseless])),
    <<"ks1221">> = iolist_to_binary(re:replace("1221","^(?:((.)(?1)\\2|)|((.)(?3)\\4|.))$","ks\\1",[caseless,global])),
    <<"DNi">> = iolist_to_binary(re:replace("Satanoscillatemymetallicsonatas","^(?:((.)(?1)\\2|)|((.)(?3)\\4|.))$","DNi",[caseless])),
    <<"DNi">> = iolist_to_binary(re:replace("Satanoscillatemymetallicsonatas","^(?:((.)(?1)\\2|)|((.)(?3)\\4|.))$","DNi",[caseless,global])),
    <<"UoqHQfFfbONSGdk">> = iolist_to_binary(re:replace("AmanaplanacanalPanama","^(?:((.)(?1)\\2|)|((.)(?3)\\4|.))$","\\1UoqHQfFf\\1bONSGd\\1k",[caseless])),
    <<"UoqHQfFfbONSGdk">> = iolist_to_binary(re:replace("AmanaplanacanalPanama","^(?:((.)(?1)\\2|)|((.)(?3)\\4|.))$","\\1UoqHQfFf\\1bONSGd\\1k",[caseless,global])),
    <<"eMWvAblewasIereIsawElbaQMxjJLAblewasIereIsawElbav">> = iolist_to_binary(re:replace("AblewasIereIsawElba","^(?:((.)(?1)\\2|)|((.)(?3)\\4|.))$","eMWv&QMxjJL&v",[caseless])),
    <<"eMWvAblewasIereIsawElbaQMxjJLAblewasIereIsawElbav">> = iolist_to_binary(re:replace("AblewasIereIsawElba","^(?:((.)(?1)\\2|)|((.)(?3)\\4|.))$","eMWv&QMxjJL&v",[caseless,global])),
    <<"Thequickbrownfox">> = iolist_to_binary(re:replace("Thequickbrownfox","^(?:((.)(?1)\\2|)|((.)(?3)\\4|.))$","sD\\1tJKX&bI\\1V\\1QesK",[caseless])),
    <<"Thequickbrownfox">> = iolist_to_binary(re:replace("Thequickbrownfox","^(?:((.)(?1)\\2|)|((.)(?3)\\4|.))$","sD\\1tJKX&bI\\1V\\1QesK",[caseless,global])),
    <<"phuiWK">> = iolist_to_binary(re:replace("12","^(\\d+|\\((?1)([+*-])(?1)\\)|-(?1))$","phuiWK",[])),
    <<"phuiWK">> = iolist_to_binary(re:replace("12","^(\\d+|\\((?1)([+*-])(?1)\\)|-(?1))$","phuiWK",[global])),
    <<"e(((2+2)*-3)-7)Epa(((2+2)*-3)-7)KAPD(((2+2)*-3)-7)(((2+2)*-3)-7)M(((2+2)*-3)-7)">> = iolist_to_binary(re:replace("(((2+2)*-3)-7)","^(\\d+|\\((?1)([+*-])(?1)\\)|-(?1))$","e&Epa\\1KAPD\\1&M&",[])),
    <<"e(((2+2)*-3)-7)Epa(((2+2)*-3)-7)KAPD(((2+2)*-3)-7)(((2+2)*-3)-7)M(((2+2)*-3)-7)">> = iolist_to_binary(re:replace("(((2+2)*-3)-7)","^(\\d+|\\((?1)([+*-])(?1)\\)|-(?1))$","e&Epa\\1KAPD\\1&M&",[global])),
    <<"VKX-12wWoyOhQtK-12tm-12">> = iolist_to_binary(re:replace("-12","^(\\d+|\\((?1)([+*-])(?1)\\)|-(?1))$","VKX\\1wWoyOhQtK\\1tm\\1",[])),
    <<"VKX-12wWoyOhQtK-12tm-12">> = iolist_to_binary(re:replace("-12","^(\\d+|\\((?1)([+*-])(?1)\\)|-(?1))$","VKX\\1wWoyOhQtK\\1tm\\1",[global])),
    <<"((2+2)*-3)-7)">> = iolist_to_binary(re:replace("((2+2)*-3)-7)","^(\\d+|\\((?1)([+*-])(?1)\\)|-(?1))$","tPRweiQ",[])),
    <<"((2+2)*-3)-7)">> = iolist_to_binary(re:replace("((2+2)*-3)-7)","^(\\d+|\\((?1)([+*-])(?1)\\)|-(?1))$","tPRweiQ",[global])),
    <<"n">> = iolist_to_binary(re:replace("xyz","^(x(y|(?1){2})z)","n",[])),
    <<"n">> = iolist_to_binary(re:replace("xyz","^(x(y|(?1){2})z)","n",[global])),
    <<"bI">> = iolist_to_binary(re:replace("xxyzxyzz","^(x(y|(?1){2})z)","bI",[])),
    <<"bI">> = iolist_to_binary(re:replace("xxyzxyzz","^(x(y|(?1){2})z)","bI",[global])),
    <<"xxyzz">> = iolist_to_binary(re:replace("xxyzz","^(x(y|(?1){2})z)","G&D\\1e",[])),
    <<"xxyzz">> = iolist_to_binary(re:replace("xxyzz","^(x(y|(?1){2})z)","G&D\\1e",[global])),
    <<"xxyzxyzxyzz">> = iolist_to_binary(re:replace("xxyzxyzxyzz","^(x(y|(?1){2})z)","OV",[])),
    <<"xxyzxyzxyzz">> = iolist_to_binary(re:replace("xxyzxyzxyzz","^(x(y|(?1){2})z)","OV",[global])),
    <<"Xhjf<>K<>ReHa<>NM<>Sf">> = iolist_to_binary(re:replace("<>","((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))","Xhjf\\1K&ReHa&NM\\1Sf",[extended])),
    <<"Xhjf<>K<>ReHa<>NM<>Sf">> = iolist_to_binary(re:replace("<>","((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))","Xhjf\\1K&ReHa&NM\\1Sf",[extended,global])),
    <<"SbOGt<abcd>K">> = iolist_to_binary(re:replace("<abcd>","((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))","SbOGt&K",[extended])),
    <<"SbOGt<abcd>K">> = iolist_to_binary(re:replace("<abcd>","((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))","SbOGt&K",[extended,global])),
    <<"<abc <123> hij>x<abc <123> hij>Jrtco">> = iolist_to_binary(re:replace("<abc <123> hij>","((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))","\\1x\\1Jrtco",[extended])),
    <<"<abc <123> hij>x<abc <123> hij>Jrtco">> = iolist_to_binary(re:replace("<abc <123> hij>","((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))","\\1x\\1Jrtco",[extended,global])),
    <<"<abc Y<def><def>Fq<def><def>Lb<def><def>T<def><def><def><def><def>T hij>">> = iolist_to_binary(re:replace("<abc <def> hij>","((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))","Y\\1\\1Fq&&Lb&&T&\\1&\\1\\1T",[extended])),
    <<"<abc Y<def><def>Fq<def><def>Lb<def><def>T<def><def><def><def><def>T hij>">> = iolist_to_binary(re:replace("<abc <def> hij>","((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))","Y\\1\\1Fq&&Lb&&T&\\1&\\1\\1T",[extended,global])),
    <<"ucWrNuavax">> = iolist_to_binary(re:replace("<abc<>def>","((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))","ucWrNuavax",[extended])),
    <<"ucWrNuavax">> = iolist_to_binary(re:replace("<abc<>def>","((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))","ucWrNuavax",[extended,global])),
    <<"<abci<>cf<>CEE<><>itOwcw<>BF">> = iolist_to_binary(re:replace("<abc<>","((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))","i\\1cf\\1CEE&\\1itOwcw&BF",[extended])),
    <<"<abci<>cf<>CEE<><>itOwcw<>BF">> = iolist_to_binary(re:replace("<abc<>","((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))","i\\1cf\\1CEE&\\1itOwcw&BF",[extended,global])),
    <<"<abc">> = iolist_to_binary(re:replace("<abc","((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))","Wv\\1hbrstiFWO",[extended])),
    <<"<abc">> = iolist_to_binary(re:replace("<abc","((< (?: (?(R) \\d++  | [^<>]*+) | (?2)) * >))","Wv\\1hbrstiFWO",[extended,global])),
    <<"aaaaaa">> = iolist_to_binary(re:replace("aaaaaa","^a+(*FAIL)","UhNS&\\1\\1",[])),
    <<"aaaaaa">> = iolist_to_binary(re:replace("aaaaaa","^a+(*FAIL)","UhNS&\\1\\1",[global])),
    <<"aaabccc">> = iolist_to_binary(re:replace("aaabccc","a+b?c+(*FAIL)","\\1FEgUNUkGWxyqops&\\1",[])),
    <<"aaabccc">> = iolist_to_binary(re:replace("aaabccc","a+b?c+(*FAIL)","\\1FEgUNUkGWxyqops&\\1",[global])),
    ok.
run41() ->
    <<"aaabccc">> = iolist_to_binary(re:replace("aaabccc","a+b?(*PRUNE)c+(*FAIL)","O\\1",[])),
    <<"aaabccc">> = iolist_to_binary(re:replace("aaabccc","a+b?(*PRUNE)c+(*FAIL)","O\\1",[global])),
    <<"aaabccc">> = iolist_to_binary(re:replace("aaabccc","a+b?(*COMMIT)c+(*FAIL)","xSV&oQWsKe&MpG&Q",[])),
    <<"aaabccc">> = iolist_to_binary(re:replace("aaabccc","a+b?(*COMMIT)c+(*FAIL)","xSV&oQWsKe&MpG&Q",[global])),
    <<"aaabcccaaabccc">> = iolist_to_binary(re:replace("aaabcccaaabccc","a+b?(*SKIP)c+(*FAIL)","hA&qy\\1nO",[])),
    <<"aaabcccaaabccc">> = iolist_to_binary(re:replace("aaabcccaaabccc","a+b?(*SKIP)c+(*FAIL)","hA&qy\\1nO",[global])),
    <<"bboJlolQwgwa">> = iolist_to_binary(re:replace("aaaxxxxxx","^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","bbo\\1JlolQ\\1\\1wgwa",[])),
    <<"bboJlolQwgwa">> = iolist_to_binary(re:replace("aaaxxxxxx","^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","bbo\\1JlolQ\\1\\1wgwa",[global])),
    <<"SrDgaaa++++++">> = iolist_to_binary(re:replace("aaa++++++","^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","SrDg&",[])),
    <<"SrDgaaa++++++">> = iolist_to_binary(re:replace("aaa++++++","^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","SrDg&",[global])),
    <<"abbbxxxxxiFPR">> = iolist_to_binary(re:replace("bbbxxxxx","^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","\\1a&iFPR\\1",[])),
    <<"abbbxxxxxiFPR">> = iolist_to_binary(re:replace("bbbxxxxx","^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","\\1a&iFPR\\1",[global])),
    <<"ubbbQWHjmFmJgqpv+++++">> = iolist_to_binary(re:replace("bbb+++++","^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","u&QWHjmFmJgq\\1pv",[])),
    <<"ubbbQWHjmFmJgqpv+++++">> = iolist_to_binary(re:replace("bbb+++++","^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","u&QWHjmFmJgq\\1pv",[global])),
    <<"tgtbuAeydNDbQksB">> = iolist_to_binary(re:replace("cccxxxx","^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","tg\\1tbuAe\\1ydNDbQksB\\1",[])),
    <<"tgtbuAeydNDbQksB">> = iolist_to_binary(re:replace("cccxxxx","^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","tg\\1tbuAe\\1ydNDbQksB\\1",[global])),
    <<"geoFaKtBOld++++">> = iolist_to_binary(re:replace("ccc++++","^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","geoFa\\1K\\1\\1tBOld",[])),
    <<"geoFaKtBOld++++">> = iolist_to_binary(re:replace("ccc++++","^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","geoFa\\1K\\1\\1tBOld",[global])),
    <<"dddFIQJiJKddddd">> = iolist_to_binary(re:replace("dddddddd","^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","&F\\1IQJiJK",[])),
    <<"dddFIQJiJKddddd">> = iolist_to_binary(re:replace("dddddddd","^(?:aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","&F\\1IQJiJK",[global])),
    <<"WWYQaaaxxxxxxCfoaaaxxxxxxaaaxxxxxx">> = iolist_to_binary(re:replace("aaaxxxxxx","^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","WWYQ&Cfo&\\1",[])),
    <<"WWYQaaaxxxxxxCfoaaaxxxxxxaaaxxxxxx">> = iolist_to_binary(re:replace("aaaxxxxxx","^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","WWYQ&Cfo&\\1",[global])),
    <<"qaaaDnjOTLaaaaaaOgaaatwATf++++++">> = iolist_to_binary(re:replace("aaa++++++","^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","q\\1DnjOTL\\1&Og\\1twATf",[])),
    <<"qaaaDnjOTLaaaaaaOgaaatwATf++++++">> = iolist_to_binary(re:replace("aaa++++++","^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","q\\1DnjOTL\\1&Og\\1twATf",[global])),
    <<"bbbxxxxxbbbxxxxx">> = iolist_to_binary(re:replace("bbbxxxxx","^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","&\\1",[])),
    <<"bbbxxxxxbbbxxxxx">> = iolist_to_binary(re:replace("bbbxxxxx","^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","&\\1",[global])),
    <<"bbbmcQybbbbbbbbblXKI+++++">> = iolist_to_binary(re:replace("bbb+++++","^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","\\1mcQy\\1\\1\\1lXKI",[])),
    <<"bbbmcQybbbbbbbbblXKI+++++">> = iolist_to_binary(re:replace("bbb+++++","^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","\\1mcQy\\1\\1\\1lXKI",[global])),
    <<"yLoVOOvXcccxxxxMsmpqoJcccxxxxL">> = iolist_to_binary(re:replace("cccxxxx","^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","yLoVOOvX&MsmpqoJ\\1L",[])),
    <<"yLoVOOvXcccxxxxMsmpqoJcccxxxxL">> = iolist_to_binary(re:replace("cccxxxx","^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","yLoVOOvX&MsmpqoJ\\1L",[global])),
    <<"ccccccX++++">> = iolist_to_binary(re:replace("ccc++++","^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","\\1\\1X",[])),
    <<"ccccccX++++">> = iolist_to_binary(re:replace("ccc++++","^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","\\1\\1X",[global])),
    <<"UdddxAdddPsdeOWUaeddddddYnaddddd">> = iolist_to_binary(re:replace("dddddddd","^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","U&xA\\1PsdeOWUae&&Yna",[])),
    <<"UdddxAdddPsdeOWUaeddddddYnaddddd">> = iolist_to_binary(re:replace("dddddddd","^(aaa(*THEN)\\w{6}|bbb(*THEN)\\w{5}|ccc(*THEN)\\w{4}|\\w{3})","U&xA\\1PsdeOWUae&&Yna",[global])),
    <<"aaabccc">> = iolist_to_binary(re:replace("aaabccc","a+b?(*THEN)c+(*FAIL)","QIBuirGXrn",[])),
    <<"aaabccc">> = iolist_to_binary(re:replace("aaabccc","a+b?(*THEN)c+(*FAIL)","QIBuirGXrn",[global])),
    <<"ABwABDHBgVdwqBlABi">> = iolist_to_binary(re:replace("AB","(A (A|B(*ACCEPT)|C) D)(E)","\\1w&DHBgVdwqBl&i",[extended])),
    <<"ABwABDHBgVdwqBlABi">> = iolist_to_binary(re:replace("AB","(A (A|B(*ACCEPT)|C) D)(E)","\\1w&DHBgVdwqBl&i",[extended,global])),
    <<"bMxABcDhNdGOtJIJBuCaABX">> = iolist_to_binary(re:replace("ABX","(A (A|B(*ACCEPT)|C) D)(E)","bMx\\1cDhNdGOtJIJBuCa&",[extended])),
    <<"bMxABcDhNdGOtJIJBuCaABX">> = iolist_to_binary(re:replace("ABX","(A (A|B(*ACCEPT)|C) D)(E)","bMx\\1cDhNdGOtJIJBuCa&",[extended,global])),
    <<"nnHoUAADEAADCMWtr">> = iolist_to_binary(re:replace("AADE","(A (A|B(*ACCEPT)|C) D)(E)","nnHoU&\\1CMWtr",[extended])),
    <<"nnHoUAADEAADCMWtr">> = iolist_to_binary(re:replace("AADE","(A (A|B(*ACCEPT)|C) D)(E)","nnHoU&\\1CMWtr",[extended,global])),
    <<"PXACDACDRohlV">> = iolist_to_binary(re:replace("ACDE","(A (A|B(*ACCEPT)|C) D)(E)","PX\\1\\1RohlV",[extended])),
    <<"PXACDACDRohlV">> = iolist_to_binary(re:replace("ACDE","(A (A|B(*ACCEPT)|C) D)(E)","PX\\1\\1RohlV",[extended,global])),
    <<"AD">> = iolist_to_binary(re:replace("AD","(A (A|B(*ACCEPT)|C) D)(E)","&&qn",[extended])),
    <<"AD">> = iolist_to_binary(re:replace("AD","(A (A|B(*ACCEPT)|C) D)(E)","&&qn",[extended,global])),
    <<"rFmutN1221bLVE1221r1221Id">> = iolist_to_binary(re:replace("1221","^\\W*+(?:((.)\\W*+(?1)\\W*+\\2|)|((.)\\W*+(?3)\\W*+\\4|\\W*+.\\W*+))\\W*+$","rFmutN\\1bLVE\\1r&Id",[caseless])),
    <<"rFmutN1221bLVE1221r1221Id">> = iolist_to_binary(re:replace("1221","^\\W*+(?:((.)\\W*+(?1)\\W*+\\2|)|((.)\\W*+(?3)\\W*+\\4|\\W*+.\\W*+))\\W*+$","rFmutN\\1bLVE\\1r&Id",[caseless,global])),
    <<"uGFSatan, oscillate my metallic sonatas!mOYW">> = iolist_to_binary(re:replace("Satan, oscillate my metallic sonatas!","^\\W*+(?:((.)\\W*+(?1)\\W*+\\2|)|((.)\\W*+(?3)\\W*+\\4|\\W*+.\\W*+))\\W*+$","uGF&mOYW",[caseless])),
    <<"uGFSatan, oscillate my metallic sonatas!mOYW">> = iolist_to_binary(re:replace("Satan, oscillate my metallic sonatas!","^\\W*+(?:((.)\\W*+(?1)\\W*+\\2|)|((.)\\W*+(?3)\\W*+\\4|\\W*+.\\W*+))\\W*+$","uGF&mOYW",[caseless,global])),
    <<"LwwyNOhXnA man, a plan, a canal: Panama!P">> = iolist_to_binary(re:replace("A man, a plan, a canal: Panama!","^\\W*+(?:((.)\\W*+(?1)\\W*+\\2|)|((.)\\W*+(?3)\\W*+\\4|\\W*+.\\W*+))\\W*+$","L\\1wwyNOhXn&P",[caseless])),
    <<"LwwyNOhXnA man, a plan, a canal: Panama!P">> = iolist_to_binary(re:replace("A man, a plan, a canal: Panama!","^\\W*+(?:((.)\\W*+(?1)\\W*+\\2|)|((.)\\W*+(?3)\\W*+\\4|\\W*+.\\W*+))\\W*+$","L\\1wwyNOhXn&P",[caseless,global])),
    <<"asLUhduQyB">> = iolist_to_binary(re:replace("Able was I ere I saw Elba.","^\\W*+(?:((.)\\W*+(?1)\\W*+\\2|)|((.)\\W*+(?3)\\W*+\\4|\\W*+.\\W*+))\\W*+$","asLUhdu\\1Q\\1yB",[caseless])),
    <<"asLUhduQyB">> = iolist_to_binary(re:replace("Able was I ere I saw Elba.","^\\W*+(?:((.)\\W*+(?1)\\W*+\\2|)|((.)\\W*+(?3)\\W*+\\4|\\W*+.\\W*+))\\W*+$","asLUhdu\\1Q\\1yB",[caseless,global])),
    <<"The quick brown fox">> = iolist_to_binary(re:replace("The quick brown fox","^\\W*+(?:((.)\\W*+(?1)\\W*+\\2|)|((.)\\W*+(?3)\\W*+\\4|\\W*+.\\W*+))\\W*+$","fiC\\1&h&\\1TxFpRPHS",[caseless])),
    <<"The quick brown fox">> = iolist_to_binary(re:replace("The quick brown fox","^\\W*+(?:((.)\\W*+(?1)\\W*+\\2|)|((.)\\W*+(?3)\\W*+\\4|\\W*+.\\W*+))\\W*+$","fiC\\1&h&\\1TxFpRPHS",[caseless,global])),
    <<"aRMNILOaxXakxRwpa">> = iolist_to_binary(re:replace("a","^((.)(?1)\\2|.)$","\\1RMNILO&xX\\1kxRwp\\1",[])),
    <<"aRMNILOaxXakxRwpa">> = iolist_to_binary(re:replace("a","^((.)(?1)\\2|.)$","\\1RMNILO&xX\\1kxRwp\\1",[global])),
    <<"vAGipJabaW">> = iolist_to_binary(re:replace("aba","^((.)(?1)\\2|.)$","vAGipJ&W",[])),
    <<"vAGipJabaW">> = iolist_to_binary(re:replace("aba","^((.)(?1)\\2|.)$","vAGipJ&W",[global])),
    <<"eaabaaknraabaahbVaabaaOaabaaaabaaUlbPhaabaa">> = iolist_to_binary(re:replace("aabaa","^((.)(?1)\\2|.)$","e&knr\\1hbV\\1O\\1\\1UlbPh&",[])),
    <<"eaabaaknraabaahbVaabaaOaabaaaabaaUlbPhaabaa">> = iolist_to_binary(re:replace("aabaa","^((.)(?1)\\2|.)$","e&knr\\1hbV\\1O\\1\\1UlbPh&",[global])),
    <<"oYabcdcba">> = iolist_to_binary(re:replace("abcdcba","^((.)(?1)\\2|.)$","oY\\1",[])),
    <<"oYabcdcba">> = iolist_to_binary(re:replace("abcdcba","^((.)(?1)\\2|.)$","oY\\1",[global])),
    <<"nMN">> = iolist_to_binary(re:replace("pqaabaaqp","^((.)(?1)\\2|.)$","nMN",[])),
    <<"nMN">> = iolist_to_binary(re:replace("pqaabaaqp","^((.)(?1)\\2|.)$","nMN",[global])),
    <<"ablewasiereisawelbauhYablewasiereisawelbaqCJYVNVkjablewasiereisawelbaTafan">> = iolist_to_binary(re:replace("ablewasiereisawelba","^((.)(?1)\\2|.)$","&uhY\\1qCJYVNVkj\\1Tafan",[])),
    <<"ablewasiereisawelbauhYablewasiereisawelbaqCJYVNVkjablewasiereisawelbaTafan">> = iolist_to_binary(re:replace("ablewasiereisawelba","^((.)(?1)\\2|.)$","&uhY\\1qCJYVNVkj\\1Tafan",[global])),
    <<"rhubarb">> = iolist_to_binary(re:replace("rhubarb","^((.)(?1)\\2|.)$","WLa\\1",[])),
    <<"rhubarb">> = iolist_to_binary(re:replace("rhubarb","^((.)(?1)\\2|.)$","WLa\\1",[global])),
    <<"the quick brown fox">> = iolist_to_binary(re:replace("the quick brown fox","^((.)(?1)\\2|.)$","kAbCkN\\1XOTPWkPh",[])),
    <<"the quick brown fox">> = iolist_to_binary(re:replace("the quick brown fox","^((.)(?1)\\2|.)$","kAbCkN\\1XOTPWkPh",[global])),
    <<"baLHRWavSiGapKPez">> = iolist_to_binary(re:replace("baz","(a)(?<=b(?1))","&LHRW\\1vSiG&pKPe",[])),
    <<"baLHRWavSiGapKPez">> = iolist_to_binary(re:replace("baz","(a)(?<=b(?1))","&LHRW\\1vSiG&pKPe",[global])),
    <<"caz">> = iolist_to_binary(re:replace("caz","(a)(?<=b(?1))","FPw&\\1SGgbdRnHYs&\\1G\\1",[])),
    <<"caz">> = iolist_to_binary(re:replace("caz","(a)(?<=b(?1))","FPw&\\1SGgbdRnHYs&\\1G\\1",[global])),
    <<"zbaaz">> = iolist_to_binary(re:replace("zbaaz","(?<=b(?1))(a)","\\1",[])),
    <<"zbaaz">> = iolist_to_binary(re:replace("zbaaz","(?<=b(?1))(a)","\\1",[global])),
    <<"aaa">> = iolist_to_binary(re:replace("aaa","(?<=b(?1))(a)","rw\\1r\\1XcjPY",[])),
    <<"aaa">> = iolist_to_binary(re:replace("aaa","(?<=b(?1))(a)","rw\\1r\\1XcjPY",[global])),
    <<"baEbhbaaz">> = iolist_to_binary(re:replace("baz","(?<X>a)(?<=b(?&X))","&Ebhb\\1&",[])),
    <<"baEbhbaaz">> = iolist_to_binary(re:replace("baz","(?<X>a)(?<=b(?&X))","&Ebhb\\1&",[global])),
    <<"vUGseV">> = iolist_to_binary(re:replace("abcabc","^(?|(abc)|(def))\\1","vUGseV",[])),
    <<"vUGseV">> = iolist_to_binary(re:replace("abcabc","^(?|(abc)|(def))\\1","vUGseV",[global])),
    <<"pdefdefIMIKmldefdefOdefdefE">> = iolist_to_binary(re:replace("defdef","^(?|(abc)|(def))\\1","p\\1\\1IMIKml&O&E",[])),
    <<"pdefdefIMIKmldefdefOdefdefE">> = iolist_to_binary(re:replace("defdef","^(?|(abc)|(def))\\1","p\\1\\1IMIKml&O&E",[global])),
    <<"abcdef">> = iolist_to_binary(re:replace("abcdef","^(?|(abc)|(def))\\1","x\\1",[])),
    <<"abcdef">> = iolist_to_binary(re:replace("abcdef","^(?|(abc)|(def))\\1","x\\1",[global])),
    <<"defabc">> = iolist_to_binary(re:replace("defabc","^(?|(abc)|(def))\\1","Y\\1KYtfghC",[])),
    <<"defabc">> = iolist_to_binary(re:replace("defabc","^(?|(abc)|(def))\\1","Y\\1KYtfghC",[global])),
    <<"CjJxtxeRkNqWb">> = iolist_to_binary(re:replace("abcabc","^(?|(abc)|(def))(?1)","CjJxtxeRkNqWb",[])),
    <<"CjJxtxeRkNqWb">> = iolist_to_binary(re:replace("abcabc","^(?|(abc)|(def))(?1)","CjJxtxeRkNqWb",[global])),
    <<"defTdefabcIdefdefUFIhNdefabcdefa">> = iolist_to_binary(re:replace("defabc","^(?|(abc)|(def))(?1)","\\1T&I\\1\\1UFIhN&\\1a",[])),
    <<"defTdefabcIdefdefUFIhNdefabcdefa">> = iolist_to_binary(re:replace("defabc","^(?|(abc)|(def))(?1)","\\1T&I\\1\\1UFIhN&\\1a",[global])),
    <<"defdef">> = iolist_to_binary(re:replace("defdef","^(?|(abc)|(def))(?1)","Tt&N",[])),
    <<"defdef">> = iolist_to_binary(re:replace("defdef","^(?|(abc)|(def))(?1)","Tt&N",[global])),
    <<"abcdef">> = iolist_to_binary(re:replace("abcdef","^(?|(abc)|(def))(?1)","&kPyHlRCnbcTx&oIkg&P",[])),
    <<"abcdef">> = iolist_to_binary(re:replace("abcdef","^(?|(abc)|(def))(?1)","&kPyHlRCnbcTx&oIkg&P",[global])),
    <<"AaCBCpoCxCfpsCeXfNhGD">> = iolist_to_binary(re:replace("ABCD","(?:(?1)|B)(A(*F)|C)","a\\1&po\\1x\\1fps\\1eXfNhG",[])),
    <<"AaCBCpoCxCfpsCeXfNhGD">> = iolist_to_binary(re:replace("ABCD","(?:(?1)|B)(A(*F)|C)","a\\1&po\\1x\\1fps\\1eXfNhG",[global])),
    <<"gfCCfFQYBVbwmD">> = iolist_to_binary(re:replace("CCD","(?:(?1)|B)(A(*F)|C)","gf&fFQYBVbwm",[])),
    <<"gfCCfFQYBVbwmD">> = iolist_to_binary(re:replace("CCD","(?:(?1)|B)(A(*F)|C)","gf&fFQYBVbwm",[global])),
    <<"CAD">> = iolist_to_binary(re:replace("CAD","(?:(?1)|B)(A(*F)|C)","ehBuh&q\\1\\1mV\\1s\\1&Wt&g",[])),
    <<"CAD">> = iolist_to_binary(re:replace("CAD","(?:(?1)|B)(A(*F)|C)","ehBuh&q\\1\\1mV\\1s\\1&Wt&g",[global])),
    <<"QD">> = iolist_to_binary(re:replace("CCD","^(?:(?1)|B)(A(*F)|C)","Q",[])),
    <<"QD">> = iolist_to_binary(re:replace("CCD","^(?:(?1)|B)(A(*F)|C)","Q",[global])),
    <<"CyFHgvqCLgSIvMD">> = iolist_to_binary(re:replace("BCD","^(?:(?1)|B)(A(*F)|C)","\\1yFHgvq\\1LgSIvM",[])),
    <<"CyFHgvqCLgSIvMD">> = iolist_to_binary(re:replace("BCD","^(?:(?1)|B)(A(*F)|C)","\\1yFHgvq\\1LgSIvM",[global])),
    <<"ABCD">> = iolist_to_binary(re:replace("ABCD","^(?:(?1)|B)(A(*F)|C)","\\1DLEECoGfL&tOKBYRuEP",[])),
    <<"ABCD">> = iolist_to_binary(re:replace("ABCD","^(?:(?1)|B)(A(*F)|C)","\\1DLEECoGfL&tOKBYRuEP",[global])),
    <<"CAD">> = iolist_to_binary(re:replace("CAD","^(?:(?1)|B)(A(*F)|C)","UeRrup\\1r\\1&Ly\\1Gd&OBlH",[])),
    <<"CAD">> = iolist_to_binary(re:replace("CAD","^(?:(?1)|B)(A(*F)|C)","UeRrup\\1r\\1&Ly\\1Gd&OBlH",[global])),
    <<"BAD">> = iolist_to_binary(re:replace("BAD","^(?:(?1)|B)(A(*F)|C)","mqfmU",[])),
    <<"BAD">> = iolist_to_binary(re:replace("BAD","^(?:(?1)|B)(A(*F)|C)","mqfmU",[global])),
    <<"jD">> = iolist_to_binary(re:replace("AAD","(?:(?1)|B)(A(*ACCEPT)XX|C)D","j",[])),
    <<"jD">> = iolist_to_binary(re:replace("AAD","(?:(?1)|B)(A(*ACCEPT)XX|C)D","j",[global])),
    <<"mCACDGm">> = iolist_to_binary(re:replace("ACD","(?:(?1)|B)(A(*ACCEPT)XX|C)D","m\\1&Gm",[])),
    <<"mCACDGm">> = iolist_to_binary(re:replace("ACD","(?:(?1)|B)(A(*ACCEPT)XX|C)D","m\\1&Gm",[global])),
    <<"VQBAqcD">> = iolist_to_binary(re:replace("BAD","(?:(?1)|B)(A(*ACCEPT)XX|C)D","VQ&qc",[])),
    <<"VQBAqcD">> = iolist_to_binary(re:replace("BAD","(?:(?1)|B)(A(*ACCEPT)XX|C)D","VQ&qc",[global])),
    <<"PuyLdBCDsxAquBCDIQCCeUSo">> = iolist_to_binary(re:replace("BCD","(?:(?1)|B)(A(*ACCEPT)XX|C)D","PuyLd&sxAqu&IQ\\1\\1eUSo",[])),
    <<"PuyLdBCDsxAquBCDIQCCeUSo">> = iolist_to_binary(re:replace("BCD","(?:(?1)|B)(A(*ACCEPT)XX|C)D","PuyLd&sxAqu&IQ\\1\\1eUSo",[global])),
    <<"PfBAaRX">> = iolist_to_binary(re:replace("BAX","(?:(?1)|B)(A(*ACCEPT)XX|C)D","Pf&aR",[])),
    <<"PfBAaRX">> = iolist_to_binary(re:replace("BAX","(?:(?1)|B)(A(*ACCEPT)XX|C)D","Pf&aR",[global])),
    <<"ACX">> = iolist_to_binary(re:replace("ACX","(?:(?1)|B)(A(*ACCEPT)XX|C)D","&FJaBfLkq&LOtea",[])),
    <<"ACX">> = iolist_to_binary(re:replace("ACX","(?:(?1)|B)(A(*ACCEPT)XX|C)D","&FJaBfLkq&LOtea",[global])),
    <<"ABC">> = iolist_to_binary(re:replace("ABC","(?:(?1)|B)(A(*ACCEPT)XX|C)D","\\1G&sLawsVtb\\1",[])),
    <<"ABC">> = iolist_to_binary(re:replace("ABC","(?:(?1)|B)(A(*ACCEPT)XX|C)D","\\1G&sLawsVtb\\1",[global])),
    <<"BACBACoiIuBACXBACrcbxYvQLU">> = iolist_to_binary(re:replace("BAC","(?(DEFINE)(A))B(?1)C","&&oiIu&X\\1&r\\1cbxYvQLU",[])),
    <<"BACBACoiIuBACXBACrcbxYvQLU">> = iolist_to_binary(re:replace("BAC","(?(DEFINE)(A))B(?1)C","&&oiIu&X\\1&r\\1cbxYvQLU",[global])),
    <<"Gg">> = iolist_to_binary(re:replace("BAAC","(?(DEFINE)((A)\\2))B(?1)C","\\1Gg",[])),
    <<"Gg">> = iolist_to_binary(re:replace("BAAC","(?(DEFINE)((A)\\2))B(?1)C","\\1Gg",[global])),
    ok.
run42() ->
    <<"(ab(cd)ef)u(ab(cd)ef)njE(ab(cd)ef)(ab(cd)ef)j(ab(cd)ef)(ab(cd)ef)e(ab(cd)ef)F(ab(cd)ef)Y(ab(cd)ef)(ab(cd)ef)">> = iolist_to_binary(re:replace("(ab(cd)ef)","(?<pn> \\( ( [^()]++ | (?&pn) )* \\) )","\\1u\\1njE&\\1j\\1&e\\1F&Y&\\1",[extended])),
    <<"(ab(cd)ef)u(ab(cd)ef)njE(ab(cd)ef)(ab(cd)ef)j(ab(cd)ef)(ab(cd)ef)e(ab(cd)ef)F(ab(cd)ef)Y(ab(cd)ef)(ab(cd)ef)">> = iolist_to_binary(re:replace("(ab(cd)ef)","(?<pn> \\( ( [^()]++ | (?&pn) )* \\) )","\\1u\\1njE&\\1j\\1&e\\1F&Y&\\1",[extended,global])),
    <<"ac">> = iolist_to_binary(re:replace("ac","^(?=a(*SKIP)b|ac)","v&JbYT&PQOPm&rKp",[])),
    <<"ac">> = iolist_to_binary(re:replace("ac","^(?=a(*SKIP)b|ac)","v&JbYT&PQOPm&rKp",[global])),
    <<"nab">> = iolist_to_binary(re:replace("ab","^(?=a(*PRUNE)b)","n",[])),
    <<"nab">> = iolist_to_binary(re:replace("ab","^(?=a(*PRUNE)b)","n",[global])),
    <<"ac">> = iolist_to_binary(re:replace("ac","^(?=a(*PRUNE)b)","wTE",[])),
    <<"ac">> = iolist_to_binary(re:replace("ac","^(?=a(*PRUNE)b)","wTE",[global])),
    <<"IcRpeac">> = iolist_to_binary(re:replace("ac","^(?=a(*ACCEPT)b)","IcRpe",[])),
    <<"IcRpeac">> = iolist_to_binary(re:replace("ac","^(?=a(*ACCEPT)b)","IcRpe",[global])),
    <<"aDJtCudRWwbqgG">> = iolist_to_binary(re:replace("ab","(?>a\\Kb)","DJtCudRWwbqgG",[])),
    <<"aDJtCudRWwbqgG">> = iolist_to_binary(re:replace("ab","(?>a\\Kb)","DJtCudRWwbqgG",[global])),
    <<"aababbSoBtHbbcWirPkbda">> = iolist_to_binary(re:replace("ab","((?>a\\Kb))","\\1\\1&SoBtH&&cWirPk&da",[])),
    <<"aababbSoBtHbbcWirPkbda">> = iolist_to_binary(re:replace("ab","((?>a\\Kb))","\\1\\1&SoBtH&&cWirPk&da",[global])),
    <<"axSIuiabbsLIGababPOY">> = iolist_to_binary(re:replace("ab","(a\\Kb)","xSIui\\1bsLIG\\1\\1POY",[])),
    <<"axSIuiabbsLIGababPOY">> = iolist_to_binary(re:replace("ab","(a\\Kb)","xSIui\\1bsLIG\\1\\1POY",[global])),
    <<"G">> = iolist_to_binary(re:replace("ac","^a\\Kcz|ac","G",[])),
    <<"G">> = iolist_to_binary(re:replace("ac","^a\\Kcz|ac","G",[global])),
    <<"DPoYmBjVu">> = iolist_to_binary(re:replace("ab","(?>a\\Kbz|ab)","DPoYmBjVu",[])),
    <<"DPoYmBjVu">> = iolist_to_binary(re:replace("ab","(?>a\\Kbz|ab)","DPoYmBjVu",[global])),
    <<"aKhb">> = iolist_to_binary(re:replace("ab","^(?&t)(?(DEFINE)(?<t>a\\Kb))$","Kh&\\1",[])),
    <<"aKhb">> = iolist_to_binary(re:replace("ab","^(?&t)(?(DEFINE)(?<t>a\\Kb))$","Kh&\\1",[global])),
    <<"ha(b)cMPAla(b)cbeeMvca(b)cFnYVJ">> = iolist_to_binary(re:replace("a(b)c","^([^()]|\\((?1)*\\))*$","h&MPAl&beeMvc&FnYVJ",[])),
    <<"ha(b)cMPAla(b)cbeeMvca(b)cFnYVJ">> = iolist_to_binary(re:replace("a(b)c","^([^()]|\\((?1)*\\))*$","h&MPAl&beeMvc&FnYVJ",[global])),
    <<"pskDieVpeeKjCOoya(b(c)d)e">> = iolist_to_binary(re:replace("a(b(c)d)e","^([^()]|\\((?1)*\\))*$","pskDi\\1Vp\\1\\1KjCOoy&",[])),
    <<"pskDieVpeeKjCOoya(b(c)d)e">> = iolist_to_binary(re:replace("a(b(c)d)e","^([^()]|\\((?1)*\\))*$","pskDi\\1Vp\\1\\1KjCOoy&",[global])),
    <<"0P0h0aRQ">> = iolist_to_binary(re:replace("0","(?P<L1>(?P<L2>0)(?P>L1)|(?P>L2))","\\1P\\1h&aRQ",[])),
    <<"0P0h0aRQ">> = iolist_to_binary(re:replace("0","(?P<L1>(?P<L2>0)(?P>L1)|(?P>L2))","\\1P\\1h&aRQ",[global])),
    <<"a00PvGqL00OcN00do">> = iolist_to_binary(re:replace("00","(?P<L1>(?P<L2>0)(?P>L1)|(?P>L2))","a\\1PvGqL&OcN&do",[])),
    <<"a00PvGqL00OcN00do">> = iolist_to_binary(re:replace("00","(?P<L1>(?P<L2>0)(?P>L1)|(?P>L2))","a\\1PvGqL&OcN&do",[global])),
    <<"nEGDfiQkQ00000000">> = iolist_to_binary(re:replace("0000","(?P<L1>(?P<L2>0)(?P>L1)|(?P>L2))","nEGDfiQkQ&&",[])),
    <<"nEGDfiQkQ00000000">> = iolist_to_binary(re:replace("0000","(?P<L1>(?P<L2>0)(?P>L1)|(?P>L2))","nEGDfiQkQ&&",[global])),
    <<"pH0PSTC0OlN">> = iolist_to_binary(re:replace("0","(?P<L1>(?P<L2>0)|(?P>L2)(?P>L1))","pH&PSTC\\1OlN",[])),
    <<"pH0PSTC0OlN">> = iolist_to_binary(re:replace("0","(?P<L1>(?P<L2>0)|(?P>L2)(?P>L1))","pH&PSTC\\1OlN",[global])),
    <<"j0nEA0N0">> = iolist_to_binary(re:replace("00","(?P<L1>(?P<L2>0)|(?P>L2)(?P>L1))","j\\1nEA\\1N",[])),
    <<"j0nEA0Nj0nEA0N">> = iolist_to_binary(re:replace("00","(?P<L1>(?P<L2>0)|(?P>L2)(?P>L1))","j\\1nEA\\1N",[global])),
    <<"0KPLVefHPcQ000">> = iolist_to_binary(re:replace("0000","(?P<L1>(?P<L2>0)|(?P>L2)(?P>L1))","&KPLVefHPcQ",[])),
    <<"0KPLVefHPcQ0KPLVefHPcQ0KPLVefHPcQ0KPLVefHPcQ">> = iolist_to_binary(re:replace("0000","(?P<L1>(?P<L2>0)|(?P>L2)(?P>L1))","&KPLVefHPcQ",[global])),
    <<"ACABX">> = iolist_to_binary(re:replace("ACABX","A(*COMMIT)(B|D)","kdvl&SEgE&i\\1&rnUyHF&",[])),
    <<"ACABX">> = iolist_to_binary(re:replace("ACABX","A(*COMMIT)(B|D)","kdvl&SEgE&i\\1&rnUyHF&",[global])),
    <<"WusspAABCeVjGLABCnwQKJDEFG">> = iolist_to_binary(re:replace("ABCDEFG","(*COMMIT)(A|P)(B|P)(C|P)","Wussp\\1&eVjGL&nwQKJ",[])),
    <<"WusspAABCeVjGLABCnwQKJDEFG">> = iolist_to_binary(re:replace("ABCDEFG","(*COMMIT)(A|P)(B|P)(C|P)","Wussp\\1&eVjGL&nwQKJ",[global])),
    <<"DEFGABC">> = iolist_to_binary(re:replace("DEFGABC","(*COMMIT)(A|P)(B|P)(C|P)","K\\1&",[])),
    <<"DEFGABC">> = iolist_to_binary(re:replace("DEFGABC","(*COMMIT)(A|P)(B|P)(C|P)","K\\1&",[global])),
    <<"Fantabbbt">> = iolist_to_binary(re:replace("abbb","(\\w+)(?>b(*COMMIT))\\w{2}","F\\1nt&t",[])),
    <<"Fantabbbt">> = iolist_to_binary(re:replace("abbb","(\\w+)(?>b(*COMMIT))\\w{2}","F\\1nt&t",[global])),
    <<"abbb">> = iolist_to_binary(re:replace("abbb","(\\w+)b(*COMMIT)\\w{2}","\\1\\1&OCbsBdbM\\1yTuvtAF",[])),
    <<"abbb">> = iolist_to_binary(re:replace("abbb","(\\w+)b(*COMMIT)\\w{2}","\\1\\1&OCbsBdbM\\1yTuvtAF",[global])),
    <<"bemXaaaSaauUtFc">> = iolist_to_binary(re:replace("bac","(?&t)(?#()(?(DEFINE)(?<t>a))","emX&&&\\1S&&uUtF",[])),
    <<"bemXaaaSaauUtFc">> = iolist_to_binary(re:replace("bac","(?&t)(?#()(?(DEFINE)(?<t>a))","emX&&&\\1S&&uUtF",[global])),
    <<"yes">> = iolist_to_binary(re:replace("yes","(?>(*COMMIT)(?>yes|no)(*THEN)(*F))?","d&uwF&X",[])),
    <<"yes">> = iolist_to_binary(re:replace("yes","(?>(*COMMIT)(?>yes|no)(*THEN)(*F))?","d&uwF&X",[global])),
    <<"yes">> = iolist_to_binary(re:replace("yes","(?>(*COMMIT)(yes|no)(*THEN)(*F))?","&aEP\\1EjNm&xCdm\\1\\1ima",[])),
    <<"yes">> = iolist_to_binary(re:replace("yes","(?>(*COMMIT)(yes|no)(*THEN)(*F))?","&aEP\\1EjNm&xCdm\\1\\1ima",[global])),
    ok.
run43() ->
    <<"LqguC">> = iolist_to_binary(re:replace("bc","b?(*SKIP)c","LqguC",[])),
    <<"LqguC">> = iolist_to_binary(re:replace("bc","b?(*SKIP)c","LqguC",[global])),
    <<"aYbcnbcOu">> = iolist_to_binary(re:replace("abc","b?(*SKIP)c","Y&n&Ou",[])),
    <<"aYbcnbcOu">> = iolist_to_binary(re:replace("abc","b?(*SKIP)c","Y&n&Ou",[global])),
    <<"a">> = iolist_to_binary(re:replace("a","(*SKIP)bc","n&&H&\\1u&EQf\\1s",[])),
    <<"a">> = iolist_to_binary(re:replace("a","(*SKIP)bc","n&&H&\\1u&EQf\\1s",[global])),
    <<"a">> = iolist_to_binary(re:replace("a","(*SKIP)b","&Er&tiYv\\1hB\\1J&TR",[])),
    <<"a">> = iolist_to_binary(re:replace("a","(*SKIP)b","&Er&tiYv\\1hB\\1J&TR",[global])),
    <<"sIKbikAxxx">> = iolist_to_binary(re:replace("xxx","(?P<abn>(?P=abn)xxx|)+","sIKbikA",[])),
    <<"sIKbikAxsIKbikAxsIKbikAxsIKbikA">> = iolist_to_binary(re:replace("xxx","(?P<abn>(?P=abn)xxx|)+","sIKbikA",[global])),
    <<"vaWGLwaaAjaaaPaayFVaoME">> = iolist_to_binary(re:replace("aa","(?i:([^b]))(?1)","v\\1WGLw&Aj\\1&P&yFV\\1oME",[])),
    <<"vaWGLwaaAjaaaPaayFVaoME">> = iolist_to_binary(re:replace("aa","(?i:([^b]))(?1)","v\\1WGLw&Aj\\1&P&yFV\\1oME",[global])),
    <<"OLaaJBdVsaArNnoabN">> = iolist_to_binary(re:replace("aA","(?i:([^b]))(?1)","OL\\1\\1JBdVs&rNno\\1bN",[])),
    <<"OLaaJBdVsaArNnoabN">> = iolist_to_binary(re:replace("aA","(?i:([^b]))(?1)","OL\\1\\1JBdVs&rNno\\1bN",[global])),
    <<"ab">> = iolist_to_binary(re:replace("ab","(?i:([^b]))(?1)","b\\1U",[])),
    <<"ab">> = iolist_to_binary(re:replace("ab","(?i:([^b]))(?1)","b\\1U",[global])),
    <<"aB">> = iolist_to_binary(re:replace("aB","(?i:([^b]))(?1)","o",[])),
    <<"aB">> = iolist_to_binary(re:replace("aB","(?i:([^b]))(?1)","o",[global])),
    <<"Ba">> = iolist_to_binary(re:replace("Ba","(?i:([^b]))(?1)","is",[])),
    <<"Ba">> = iolist_to_binary(re:replace("Ba","(?i:([^b]))(?1)","is",[global])),
    <<"ba">> = iolist_to_binary(re:replace("ba","(?i:([^b]))(?1)","DuvhoTEpKLbL&",[])),
    <<"ba">> = iolist_to_binary(re:replace("ba","(?i:([^b]))(?1)","DuvhoTEpKLbL&",[global])),
    <<"xaaaaaaXaaaaaaXaaaaaaXG">> = iolist_to_binary(re:replace("aaaaaaX","^(?&t)*+(?(DEFINE)(?<t>a))\\w$","\\1\\1x&\\1&&G",[])),
    <<"xaaaaaaXaaaaaaXaaaaaaXG">> = iolist_to_binary(re:replace("aaaaaaX","^(?&t)*+(?(DEFINE)(?<t>a))\\w$","\\1\\1x&\\1&&G",[global])),
    <<"aaaaaa">> = iolist_to_binary(re:replace("aaaaaa","^(?&t)*+(?(DEFINE)(?<t>a))\\w$","Nt&ll\\1w",[])),
    <<"aaaaaa">> = iolist_to_binary(re:replace("aaaaaa","^(?&t)*+(?(DEFINE)(?<t>a))\\w$","Nt&ll\\1w",[global])),
    <<"R">> = iolist_to_binary(re:replace("aaaaaaX","^(?&t)*(?(DEFINE)(?<t>a))\\w$","R",[])),
    <<"R">> = iolist_to_binary(re:replace("aaaaaaX","^(?&t)*(?(DEFINE)(?<t>a))\\w$","R",[global])),
    <<"CaaaaaaPYhX">> = iolist_to_binary(re:replace("aaaaaa","^(?&t)*(?(DEFINE)(?<t>a))\\w$","C&PYhX",[])),
    <<"CaaaaaaPYhX">> = iolist_to_binary(re:replace("aaaaaa","^(?&t)*(?(DEFINE)(?<t>a))\\w$","C&PYhX",[global])),
    <<"dajkBrqRaaaaXXaaaaXFcavd">> = iolist_to_binary(re:replace("aaaaX","^(a)*+(\\w)","d\\1jkBrqR&X&Fc\\1vd",[])),
    <<"dajkBrqRaaaaXXaaaaXFcavd">> = iolist_to_binary(re:replace("aaaaX","^(a)*+(\\w)","d\\1jkBrqR&X&Fc\\1vd",[global])),
    <<"KNABawONSZ">> = iolist_to_binary(re:replace("YZ","^(a)*+(\\w)","KNABa\\1\\1wON\\1S",[])),
    <<"KNABawONSZ">> = iolist_to_binary(re:replace("YZ","^(a)*+(\\w)","KNABa\\1\\1wON\\1S",[global])),
    <<"aaaa">> = iolist_to_binary(re:replace("aaaa","^(a)*+(\\w)","CQ&DXxjEdVkGvk\\1",[])),
    <<"aaaa">> = iolist_to_binary(re:replace("aaaa","^(a)*+(\\w)","CQ&DXxjEdVkGvk\\1",[global])),
    <<"aaaaXdTXqBlsLHXnaaaaXSPAX">> = iolist_to_binary(re:replace("aaaaX","^(?:a)*+(\\w)","&dTXqBlsLH\\1n&SPA\\1",[])),
    <<"aaaaXdTXqBlsLHXnaaaaXSPAX">> = iolist_to_binary(re:replace("aaaaX","^(?:a)*+(\\w)","&dTXqBlsLH\\1n&SPA\\1",[global])),
    <<"jVZ">> = iolist_to_binary(re:replace("YZ","^(?:a)*+(\\w)","jV",[])),
    <<"jVZ">> = iolist_to_binary(re:replace("YZ","^(?:a)*+(\\w)","jV",[global])),
    <<"aaaa">> = iolist_to_binary(re:replace("aaaa","^(?:a)*+(\\w)","os&mdgX",[])),
    <<"aaaa">> = iolist_to_binary(re:replace("aaaa","^(?:a)*+(\\w)","os&mdgX",[global])),
    <<"YpwLaicvrdWdBXR">> = iolist_to_binary(re:replace("aaaaX","^(a)++(\\w)","YpwL\\1icvrdWdBXR",[])),
    <<"YpwLaicvrdWdBXR">> = iolist_to_binary(re:replace("aaaaX","^(a)++(\\w)","YpwL\\1icvrdWdBXR",[global])),
    <<"aaaa">> = iolist_to_binary(re:replace("aaaa","^(a)++(\\w)","ia\\1lhP\\1",[])),
    <<"aaaa">> = iolist_to_binary(re:replace("aaaa","^(a)++(\\w)","ia\\1lhP\\1",[global])),
    <<"YZ">> = iolist_to_binary(re:replace("YZ","^(a)++(\\w)","&BYHaB\\1&jJ",[])),
    <<"YZ">> = iolist_to_binary(re:replace("YZ","^(a)++(\\w)","&BYHaB\\1&jJ",[global])),
    <<"BVB">> = iolist_to_binary(re:replace("aaaaX","^(?:a)++(\\w)","BVB",[])),
    <<"BVB">> = iolist_to_binary(re:replace("aaaaX","^(?:a)++(\\w)","BVB",[global])),
    <<"aaaa">> = iolist_to_binary(re:replace("aaaa","^(?:a)++(\\w)","&cSk&xmMuHJpt\\1&VoP",[])),
    <<"aaaa">> = iolist_to_binary(re:replace("aaaa","^(?:a)++(\\w)","&cSk&xmMuHJpt\\1&VoP",[global])),
    <<"YZ">> = iolist_to_binary(re:replace("YZ","^(?:a)++(\\w)","c",[])),
    <<"YZ">> = iolist_to_binary(re:replace("YZ","^(?:a)++(\\w)","c",[global])),
    <<"GeKmcaWhXfkaTBYDbaaCaaaX">> = iolist_to_binary(re:replace("aaaaX","^(a)?+(\\w)","GeKmc\\1WhXfk\\1TBYDb&Ca",[])),
    <<"GeKmcaWhXfkaTBYDbaaCaaaX">> = iolist_to_binary(re:replace("aaaaX","^(a)?+(\\w)","GeKmc\\1WhXfk\\1TBYDb&Ca",[global])),
    <<"MMBtYlbYjbxkZ">> = iolist_to_binary(re:replace("YZ","^(a)?+(\\w)","MMBt&lb\\1&jbxk",[])),
    <<"MMBtYlbYjbxkZ">> = iolist_to_binary(re:replace("YZ","^(a)?+(\\w)","MMBt&lb\\1&jbxk",[global])),
    <<"pwtaatvQaaXauUUqymOuOaaX">> = iolist_to_binary(re:replace("aaaaX","^(?:a)?+(\\w)","pwt&tvQ&X\\1uUUqymOuO",[])),
    <<"pwtaatvQaaXauUUqymOuOaaX">> = iolist_to_binary(re:replace("aaaaX","^(?:a)?+(\\w)","pwt&tvQ&X\\1uUUqymOuO",[global])),
    <<"YZ">> = iolist_to_binary(re:replace("YZ","^(?:a)?+(\\w)","\\1",[])),
    <<"YZ">> = iolist_to_binary(re:replace("YZ","^(?:a)?+(\\w)","\\1",[global])),
    <<"ODb">> = iolist_to_binary(re:replace("aaaaX","^(a){2,}+(\\w)","ODb",[])),
    <<"ODb">> = iolist_to_binary(re:replace("aaaaX","^(a){2,}+(\\w)","ODb",[global])),
    <<"aaa">> = iolist_to_binary(re:replace("aaa","^(a){2,}+(\\w)","OUSVkw\\1k&ixHS\\1&u\\1&h",[])),
    <<"aaa">> = iolist_to_binary(re:replace("aaa","^(a){2,}+(\\w)","OUSVkw\\1k&ixHS\\1&u\\1&h",[global])),
    <<"YZ">> = iolist_to_binary(re:replace("YZ","^(a){2,}+(\\w)","wcl",[])),
    <<"YZ">> = iolist_to_binary(re:replace("YZ","^(a){2,}+(\\w)","wcl",[global])),
    <<"R">> = iolist_to_binary(re:replace("aaaaX","^(?:a){2,}+(\\w)","R",[])),
    <<"R">> = iolist_to_binary(re:replace("aaaaX","^(?:a){2,}+(\\w)","R",[global])),
    <<"aaa">> = iolist_to_binary(re:replace("aaa","^(?:a){2,}+(\\w)","&UeGhR&",[])),
    <<"aaa">> = iolist_to_binary(re:replace("aaa","^(?:a){2,}+(\\w)","&UeGhR&",[global])),
    <<"YZ">> = iolist_to_binary(re:replace("YZ","^(?:a){2,}+(\\w)","&e&aKbUC&nHH\\1qy\\1",[])),
    <<"YZ">> = iolist_to_binary(re:replace("YZ","^(?:a){2,}+(\\w)","&e&aKbUC&nHH\\1qy\\1",[global])),
    <<"JqKpfdXTbMbybb">> = iolist_to_binary(re:replace("b","(a|)*(?1)b","JqKpfdXT&Mby&\\1&",[])),
    <<"JqKpfdXTbMbybb">> = iolist_to_binary(re:replace("b","(a|)*(?1)b","JqKpfdXT&Mby&\\1&",[global])),
    <<"FAmVeO">> = iolist_to_binary(re:replace("ab","(a|)*(?1)b","FAmVe\\1O",[])),
    <<"FAmVeO">> = iolist_to_binary(re:replace("ab","(a|)*(?1)b","FAmVe\\1O",[global])),
    <<"mSDSJp">> = iolist_to_binary(re:replace("aab","(a|)*(?1)b","\\1mSDSJp",[])),
    <<"mSDSJp">> = iolist_to_binary(re:replace("aab","(a|)*(?1)b","\\1mSDSJp",[global])),
    <<"ab">> = iolist_to_binary(re:replace("ab","(a)++(?1)b","JagFUGCxoJ&\\1SMGCK",[])),
    <<"ab">> = iolist_to_binary(re:replace("ab","(a)++(?1)b","JagFUGCxoJ&\\1SMGCK",[global])),
    <<"aab">> = iolist_to_binary(re:replace("aab","(a)++(?1)b","&an&\\1uIjsv\\1",[])),
    <<"aab">> = iolist_to_binary(re:replace("aab","(a)++(?1)b","&an&\\1uIjsv\\1",[global])),
    <<"ab">> = iolist_to_binary(re:replace("ab","(a)*+(?1)b","&C\\1nyt\\1\\1&\\1sJWoCUIsrr",[])),
    <<"ab">> = iolist_to_binary(re:replace("ab","(a)*+(?1)b","&C\\1nyt\\1\\1&\\1sJWoCUIsrr",[global])),
    <<"aab">> = iolist_to_binary(re:replace("aab","(a)*+(?1)b","heJfENVeR\\1TJ\\1&&Dvf",[])),
    <<"aab">> = iolist_to_binary(re:replace("aab","(a)*+(?1)b","heJfENVeR\\1TJ\\1&&Dvf",[global])),
    <<"gb">> = iolist_to_binary(re:replace("b","(?1)(?:(b)){0}","g&",[])),
    <<"gb">> = iolist_to_binary(re:replace("b","(?1)(?:(b)){0}","g&",[global])),
    <<"bvH">> = iolist_to_binary(re:replace("foo(bar(baz)+baz(bop))","(foo ( \\( ((?:(?> [^()]+ )|(?2))*) \\) ) )","bvH",[extended])),
    <<"bvH">> = iolist_to_binary(re:replace("foo(bar(baz)+baz(bop))","(foo ( \\( ((?:(?> [^()]+ )|(?2))*) \\) ) )","bvH",[extended,global])),
    ok.
run44() ->
    <<"ABGrQwABU">> = iolist_to_binary(re:replace("AB","(A (A|B(*ACCEPT)|C) D)(E)","&GrQw\\1U",[extended])),
    <<"ABGrQwABU">> = iolist_to_binary(re:replace("AB","(A (A|B(*ACCEPT)|C) D)(E)","&GrQw\\1U",[extended,global])),
    <<"xe">> = iolist_to_binary(re:replace("ba","\\A.*?(a|bc)","xe",[])),
    <<"xe">> = iolist_to_binary(re:replace("ba","\\A.*?(a|bc)","xe",[global])),
    <<"PvFpbapueukCvxbaUJ">> = iolist_to_binary(re:replace("ba","\\A.*?(?:a|bc)++","PvFp&pueukCv\\1\\1\\1x&UJ",[])),
    <<"PvFpbapueukCvxbaUJ">> = iolist_to_binary(re:replace("ba","\\A.*?(?:a|bc)++","PvFp&pueukCv\\1\\1\\1x&UJ",[global])),
    <<"aenigqoaQeBUcbaFyFLjg">> = iolist_to_binary(re:replace("ba","\\A.*?(a|bc)++","\\1enigqo\\1QeBUc&FyFLjg",[])),
    <<"aenigqoaQeBUcbaFyFLjg">> = iolist_to_binary(re:replace("ba","\\A.*?(a|bc)++","\\1enigqo\\1QeBUc&FyFLjg",[global])),
    <<"X">> = iolist_to_binary(re:replace("ba","\\A.*?(?:a|bc|d)","X",[])),
    <<"X">> = iolist_to_binary(re:replace("ba","\\A.*?(?:a|bc|d)","X",[global])),
    <<"CSYvJMwNrXbeetle">> = iolist_to_binary(re:replace("beetle","(?:(b))++","CSYvJMwNrX\\1",[])),
    <<"CSYvJMwNrXbeetle">> = iolist_to_binary(re:replace("beetle","(?:(b))++","CSYvJMwNrX\\1",[global])),
    <<"WVcuLyAOpQa">> = iolist_to_binary(re:replace("a","(?(?=(a(*ACCEPT)z))a)","WVcuLyAOpQ&",[])),
    <<"WVcuLyAOpQaWVcuLyAOpQ">> = iolist_to_binary(re:replace("a","(?(?=(a(*ACCEPT)z))a)","WVcuLyAOpQ&",[global])),
    <<"EaaaabPIMaaaaabEavk">> = iolist_to_binary(re:replace("aaaab","^(a)(?1)+ab","E&PIM\\1&E\\1vk",[])),
    <<"EaaaabPIMaaaaabEavk">> = iolist_to_binary(re:replace("aaaab","^(a)(?1)+ab","E&PIM\\1&E\\1vk",[global])),
    <<"aaaab">> = iolist_to_binary(re:replace("aaaab","^(a)(?1)++ab","\\1ux",[])),
    <<"aaaab">> = iolist_to_binary(re:replace("aaaab","^(a)(?1)++ab","\\1ux",[global])),
    <<"IlIckgammon">> = iolist_to_binary(re:replace("backgammon","(?(DEFINE)(a))?b(?1)","IlI",[])),
    <<"IlIckgammon">> = iolist_to_binary(re:replace("backgammon","(?(DEFINE)(a))?b(?1)","IlI",[global])),
    <<"MAwltkWfEDP
def">> = iolist_to_binary(re:replace("abc
def","^\\N+","MA\\1wltkWfEDP",[])),
    <<"MAwltkWfEDP
def">> = iolist_to_binary(re:replace("abc
def","^\\N+","MA\\1wltkWfEDP",[global])),
    <<"abchoMQ
def">> = iolist_to_binary(re:replace("abc
def","^\\N{1,}","&hoMQ",[])),
    <<"abchoMQ
def">> = iolist_to_binary(re:replace("abc
def","^\\N{1,}","&hoMQ",[global])),
    <<"enlaaaabOskJvtaaaaabePBUcde">> = iolist_to_binary(re:replace("aaaabcde","(?(R)a+|(?R)b)","enl&\\1OskJvta&\\1ePBU",[])),
    <<"enlaaaabOskJvtaaaaabePBUcde">> = iolist_to_binary(re:replace("aaaabcde","(?(R)a+|(?R)b)","enl&\\1OskJvta&\\1ePBU",[global])),
    <<"xETCwaaaaAQOTcde">> = iolist_to_binary(re:replace("aaaabcde","(?(R)a+|((?R))b)","xETCw\\1AQOT",[])),
    <<"xETCwaaaaAQOTcde">> = iolist_to_binary(re:replace("aaaabcde","(?(R)a+|((?R))b)","xETCw\\1AQOT",[global])),
    <<"BDWEaaaabsaaaabaaaabcde">> = iolist_to_binary(re:replace("aaaabcde","((?(R)a+|(?1)b))","BDWE\\1s&&",[])),
    <<"BDWEaaaabsaaaabaaaabcde">> = iolist_to_binary(re:replace("aaaabcde","((?(R)a+|(?1)b))","BDWE\\1s&&",[global])),
    <<"wjaaaabFaaaabcde">> = iolist_to_binary(re:replace("aaaabcde","((?(R1)a+|(?1)b))","wj\\1F&",[])),
    <<"wjaaaabFaaaabcde">> = iolist_to_binary(re:replace("aaaabcde","((?(R1)a+|(?1)b))","wj\\1F&",[global])),
    <<"Sx">> = iolist_to_binary(re:replace("aaa","((?(R)a|(?1)))*","Sx",[])),
    <<"SxSx">> = iolist_to_binary(re:replace("aaa","((?(R)a|(?1)))*","Sx",[global])),
    <<"H">> = iolist_to_binary(re:replace("aaa","((?(R)a|(?1)))+","H",[])),
    <<"H">> = iolist_to_binary(re:replace("aaa","((?(R)a|(?1)))+","H",[global])),
    <<"yWcaduabfPinElhSaa">> = iolist_to_binary(re:replace("a","(?>(?&t)c|(?&t))(?(DEFINE)(?<t>a|b(*PRUNE)c))","y\\1Wc&duabfPinElhS&&",[])),
    <<"yWcaduabfPinElhSaa">> = iolist_to_binary(re:replace("a","(?>(?&t)c|(?&t))(?(DEFINE)(?<t>a|b(*PRUNE)c))","y\\1Wc&duabfPinElhS&&",[global])),
    <<"bbalayoQ">> = iolist_to_binary(re:replace("ba","(?>(?&t)c|(?&t))(?(DEFINE)(?<t>a|b(*PRUNE)c))","b\\1&layoQ",[])),
    <<"bbalayoQ">> = iolist_to_binary(re:replace("ba","(?>(?&t)c|(?&t))(?(DEFINE)(?<t>a|b(*PRUNE)c))","b\\1&layoQ",[global])),
    <<"bbpF">> = iolist_to_binary(re:replace("bba","(?>(?&t)c|(?&t))(?(DEFINE)(?<t>a|b(*PRUNE)c))","pF",[])),
    <<"bbpF">> = iolist_to_binary(re:replace("bba","(?>(?&t)c|(?&t))(?(DEFINE)(?<t>a|b(*PRUNE)c))","pF",[global])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","^.*? (a(*THEN)b) c","GblOAJxEl",[extended])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","^.*? (a(*THEN)b) c","GblOAJxEl",[extended,global])),
    ok.
run45() ->
    <<"wDMUaJIhLW">> = iolist_to_binary(re:replace("aabc","^.*? (a(*THEN)b|(*F)) c","wDMUaJIhLW",[extended])),
    <<"wDMUaJIhLW">> = iolist_to_binary(re:replace("aabc","^.*? (a(*THEN)b|(*F)) c","wDMUaJIhLW",[extended,global])),
    <<"uhDuabJEuDDaabcJKaaabcvdX">> = iolist_to_binary(re:replace("aabc","^.*? ( (a(*THEN)b) | (*F) ) c","uhDu\\1JEuDD&JKa&vdX",[extended])),
    <<"uhDuabJEuDDaabcJKaaabcvdX">> = iolist_to_binary(re:replace("aabc","^.*? ( (a(*THEN)b) | (*F) ) c","uhDu\\1JEuDD&JKa&vdX",[extended,global])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","^.*? ( (a(*THEN)b) ) c","oUFI&utTyJ",[extended])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","^.*? ( (a(*THEN)b) ) c","oUFI&utTyJ",[extended,global])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","^.*? (?:a(*THEN)b) c","ib\\1&erlkw&wuHdHNtS",[extended])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","^.*? (?:a(*THEN)b) c","ib\\1&erlkw&wuHdHNtS",[extended,global])),
    <<"UAyUaabcpHoaabcOHkaabc">> = iolist_to_binary(re:replace("aabc","^.*? (?:a(*THEN)b|(*F)) c","UAyU&\\1pH\\1o&O\\1\\1Hk&",[extended])),
    <<"UAyUaabcpHoaabcOHkaabc">> = iolist_to_binary(re:replace("aabc","^.*? (?:a(*THEN)b|(*F)) c","UAyU&\\1pH\\1o&O\\1\\1Hk&",[extended,global])),
    <<"UlaabcmKaP">> = iolist_to_binary(re:replace("aabc","^.*? (?: (?:a(*THEN)b) | (*F) ) c","Ul&mKaP",[extended])),
    <<"UlaabcmKaP">> = iolist_to_binary(re:replace("aabc","^.*? (?: (?:a(*THEN)b) | (*F) ) c","Ul&mKaP",[extended,global])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","^.*? (?: (?:a(*THEN)b) ) c","mOVI&kb\\1NflC",[extended])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","^.*? (?: (?:a(*THEN)b) ) c","mOVI&kb\\1NflC",[extended,global])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","^.*? (?>a(*THEN)b) c","&\\1u&a&caKjjSkMS\\1L",[extended])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","^.*? (?>a(*THEN)b) c","&\\1u&a&caKjjSkMS\\1L",[extended,global])),
    <<"aabcD">> = iolist_to_binary(re:replace("aabc","^.*? (?>a(*THEN)b|(*F)) c","&D\\1\\1",[extended])),
    <<"aabcD">> = iolist_to_binary(re:replace("aabc","^.*? (?>a(*THEN)b|(*F)) c","&D\\1\\1",[extended,global])),
    <<"NhofxbKsmLiNJYyrV">> = iolist_to_binary(re:replace("aabc","^.*? (?> (?>a(*THEN)b) | (*F) ) c","NhofxbK\\1smLiNJ\\1YyrV",[extended])),
    <<"NhofxbKsmLiNJYyrV">> = iolist_to_binary(re:replace("aabc","^.*? (?> (?>a(*THEN)b) | (*F) ) c","NhofxbK\\1smLiNJ\\1YyrV",[extended,global])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","^.*? (?> (?>a(*THEN)b) ) c","&R&&m&&",[extended])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","^.*? (?> (?>a(*THEN)b) ) c","&R&&m&&",[extended,global])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","^.*? (a(*THEN)b)++ c","cxccnpYwqQ",[extended])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","^.*? (a(*THEN)b)++ c","cxccnpYwqQ",[extended,global])),
    <<"wabYQqaabclJrcNaabcQujabFaabcn">> = iolist_to_binary(re:replace("aabc","^.*? (a(*THEN)b|(*F))++ c","w\\1YQq&lJrcN&Quj\\1F&n",[extended])),
    <<"wabYQqaabclJrcNaabcQujabFaabcn">> = iolist_to_binary(re:replace("aabc","^.*? (a(*THEN)b|(*F))++ c","w\\1YQq&lJrcN&Quj\\1F&n",[extended,global])),
    <<"SSNdaabcnWnnujabaabcaabc">> = iolist_to_binary(re:replace("aabc","^.*? ( (a(*THEN)b)++ | (*F) )++ c","SSNd&nWnnuj\\1&&",[extended])),
    <<"SSNdaabcnWnnujabaabcaabc">> = iolist_to_binary(re:replace("aabc","^.*? ( (a(*THEN)b)++ | (*F) )++ c","SSNd&nWnnuj\\1&&",[extended,global])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","^.*? ( (a(*THEN)b)++ )++ c","sC\\1",[extended])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","^.*? ( (a(*THEN)b)++ )++ c","sC\\1",[extended,global])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","^.*? (?:a(*THEN)b)++ c","\\1&KtbPW\\1jI",[extended])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","^.*? (?:a(*THEN)b)++ c","\\1&KtbPW\\1jI",[extended,global])),
    <<"aabcDh">> = iolist_to_binary(re:replace("aabc","^.*? (?:a(*THEN)b|(*F))++ c","&Dh",[extended])),
    <<"aabcDh">> = iolist_to_binary(re:replace("aabc","^.*? (?:a(*THEN)b|(*F))++ c","&Dh",[extended,global])),
    <<"HX">> = iolist_to_binary(re:replace("aabc","^.*? (?: (?:a(*THEN)b)++ | (*F) )++ c","HX",[extended])),
    <<"HX">> = iolist_to_binary(re:replace("aabc","^.*? (?: (?:a(*THEN)b)++ | (*F) )++ c","HX",[extended,global])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","^.*? (?: (?:a(*THEN)b)++ )++ c","BlTx\\1ckgd",[extended])),
    <<"aabc">> = iolist_to_binary(re:replace("aabc","^.*? (?: (?:a(*THEN)b)++ )++ c","BlTx\\1ckgd",[extended,global])),
    <<"Wbqac">> = iolist_to_binary(re:replace("ac","^(?(?=a(*THEN)b)ab|ac)","Wbq&",[])),
    <<"Wbqac">> = iolist_to_binary(re:replace("ac","^(?(?=a(*THEN)b)ab|ac)","Wbq&",[global])),
    ok.
run46() ->
    <<"ba">> = iolist_to_binary(re:replace("ba","^.*?(?(?=a)a|b(*THEN)c)","xLq\\1Y\\1ouuKk\\1U",[])),
    <<"ba">> = iolist_to_binary(re:replace("ba","^.*?(?(?=a)a|b(*THEN)c)","xLq\\1Y\\1ouuKk\\1U",[global])),
    <<"uADbaXiwJ">> = iolist_to_binary(re:replace("ba","^.*?(?:(?(?=a)a|b(*THEN)c)|d)","uAD&XiwJ",[])),
    <<"uADbaXiwJ">> = iolist_to_binary(re:replace("ba","^.*?(?:(?(?=a)a|b(*THEN)c)|d)","uAD&XiwJ",[global])),
    <<"ac">> = iolist_to_binary(re:replace("ac","^.*?(?(?=a)a(*THEN)b|c)","&yC&jQ\\1&&E",[])),
    <<"ac">> = iolist_to_binary(re:replace("ac","^.*?(?(?=a)a(*THEN)b|c)","&yC&jQ\\1&&E",[global])),
    <<"csUtabc">> = iolist_to_binary(re:replace("aabc","^.*(?=a(*THEN)b)","csUt",[])),
    <<"csUtabc">> = iolist_to_binary(re:replace("aabc","^.*(?=a(*THEN)b)","csUt",[global])),
    <<"xacCEyciDmGacDld">> = iolist_to_binary(re:replace("xacd","(?<=a(*ACCEPT)b)c","&CEy&iDmGa&\\1Dl",[])),
    <<"xacCEyciDmGacDld">> = iolist_to_binary(re:replace("xacd","(?<=a(*ACCEPT)b)c","&CEy&iDmGa&\\1Dl",[global])),
    <<"xaYQqPscDQgoaacNnyicNyd">> = iolist_to_binary(re:replace("xacd","(?<=(a(*ACCEPT)b))c","YQqPs&DQgo\\1\\1&Nnyi&Ny",[])),
    <<"xaYQqPscDQgoaacNnyicNyd">> = iolist_to_binary(re:replace("xacd","(?<=(a(*ACCEPT)b))c","YQqPs&DQgo\\1\\1&Nnyi&Ny",[global])),
    <<"xaboababccDscFcd">> = iolist_to_binary(re:replace("xabcd","(?<=(a(*COMMIT)b))c","o\\1\\1&&Ds&F&",[])),
    <<"xaboababccDscFcd">> = iolist_to_binary(re:replace("xabcd","(?<=(a(*COMMIT)b))c","o\\1\\1&&Ds&F&",[global])),
    <<"xacd">> = iolist_to_binary(re:replace("xacd","(?<=(a(*COMMIT)b))c","s&\\1BXWRj\\1rQXiOeLx",[])),
    <<"xacd">> = iolist_to_binary(re:replace("xacd","(?<=(a(*COMMIT)b))c","s&\\1BXWRj\\1rQXiOeLx",[global])),
    <<"xYd">> = iolist_to_binary(re:replace("xcd","(?<!a(*FAIL)b)c","Y",[])),
    <<"xYd">> = iolist_to_binary(re:replace("xcd","(?<!a(*FAIL)b)c","Y",[global])),
    <<"aDaLYYtnYd">> = iolist_to_binary(re:replace("acd","(?<!a(*FAIL)b)c","DaLYYtnY",[])),
    <<"aDaLYYtnYd">> = iolist_to_binary(re:replace("acd","(?<!a(*FAIL)b)c","DaLYYtnY",[global])),
    <<"xabMBUMd">> = iolist_to_binary(re:replace("xabcd","(?<=a(*PRUNE)b)c","MBU\\1M",[])),
    <<"xabMBUMd">> = iolist_to_binary(re:replace("xabcd","(?<=a(*PRUNE)b)c","MBU\\1M",[global])),
    <<"xabcLpd">> = iolist_to_binary(re:replace("xabcd","(?<=a(*SKIP)b)c","&Lp",[])),
    <<"xabcLpd">> = iolist_to_binary(re:replace("xabcd","(?<=a(*SKIP)b)c","&Lp",[global])),
    <<"xabhrcUSJrDd">> = iolist_to_binary(re:replace("xabcd","(?<=a(*THEN)b)c","hr&USJrD",[])),
    <<"xabhrcUSJrDd">> = iolist_to_binary(re:replace("xabcd","(?<=a(*THEN)b)c","hr&USJrD",[global])),
    <<"BbfgCNDoabcdaCa">> = iolist_to_binary(re:replace("abcd","(a)(?2){2}(.)","BbfgCNDo&\\1C\\1",[])),
    <<"BbfgCNDoabcdaCa">> = iolist_to_binary(re:replace("abcd","(a)(?2){2}(.)","BbfgCNDo&\\1C\\1",[global])),
    <<"hello world wtestYt">> = iolist_to_binary(re:replace("hello world test","(another)?(\\1?)test","w&Yt",[])),
    <<"hello world wtestYt">> = iolist_to_binary(re:replace("hello world test","(another)?(\\1?)test","w&Yt",[global])),
    <<"hello world test">> = iolist_to_binary(re:replace("hello world test","(another)?(\\1+)test","Ag&V",[])),
    <<"hello world test">> = iolist_to_binary(re:replace("hello world test","(another)?(\\1+)test","Ag&V",[global])),
    <<"VxnHOwDhnQQemGfaacIJ">> = iolist_to_binary(re:replace("aac","(a(*COMMIT)b){0}a(?1)|aac","VxnH\\1OwDhnQQemGf&IJ",[])),
    <<"VxnHOwDhnQQemGfaacIJ">> = iolist_to_binary(re:replace("aac","(a(*COMMIT)b){0}a(?1)|aac","VxnH\\1OwDhnQQemGf&IJ",[global])),
    <<"OmSWaacaacyOcffpn">> = iolist_to_binary(re:replace("aac","((?:a?)*)*c","OmS\\1W&&yOcff\\1pn",[])),
    <<"OmSWaacaacyOcffpn">> = iolist_to_binary(re:replace("aac","((?:a?)*)*c","OmS\\1W&&yOcff\\1pn",[global])),
    <<"XaacM">> = iolist_to_binary(re:replace("aac","((?>a?)*)*c","X&M",[])),
    <<"XaacM">> = iolist_to_binary(re:replace("aac","((?>a?)*)*c","X&M",[global])),
    <<"aGbaQAbaqhihaMMrQ">> = iolist_to_binary(re:replace("aba","(?>.*?a)(?<=ba)","G&QA&qhihaMMrQ",[])),
    <<"aGbaQAbaqhihaMMrQ">> = iolist_to_binary(re:replace("aba","(?>.*?a)(?<=ba)","G&QA&qhihaMMrQ",[global])),
    <<"kIxMrDBa">> = iolist_to_binary(re:replace("aba","(?:.*?a)(?<=ba)","kIxM\\1rD\\1B\\1a",[])),
    <<"kIxMrDBa">> = iolist_to_binary(re:replace("aba","(?:.*?a)(?<=ba)","kIxM\\1rD\\1B\\1a",[global])),
    <<"atkeKIY">> = iolist_to_binary(re:replace("aab","(?>.*?a)b","tkeKIY",[dotall])),
    <<"atkeKIY">> = iolist_to_binary(re:replace("aab","(?>.*?a)b","tkeKIY",[dotall,global])),
    ok.
run47() ->
    <<"aI">> = iolist_to_binary(re:replace("aab","(?>.*?a)b","\\1I\\1",[])),
    <<"aI">> = iolist_to_binary(re:replace("aab","(?>.*?a)b","\\1I\\1",[global])),
    <<"aab">> = iolist_to_binary(re:replace("aab","(?>^a)b","rO&YBnR",[dotall])),
    <<"aab">> = iolist_to_binary(re:replace("aab","(?>^a)b","rO&YBnR",[dotall,global])),
    <<"alphabetabcduwsqruwBU">> = iolist_to_binary(re:replace("alphabetabcd","(?>.*?)(?<=(abcd)|(wxyz))","uwsqruwBU",[])),
    <<"alphabetabcduwsqruwBU">> = iolist_to_binary(re:replace("alphabetabcd","(?>.*?)(?<=(abcd)|(wxyz))","uwsqruwBU",[global])),
    <<"endingwxyzGFFGlEEaBgxgufwp">> = iolist_to_binary(re:replace("endingwxyz","(?>.*?)(?<=(abcd)|(wxyz))","&GFFGlEEaBgxgufwp",[])),
    <<"endingwxyzGFFGlEEaBgxgufwp">> = iolist_to_binary(re:replace("endingwxyz","(?>.*?)(?<=(abcd)|(wxyz))","&GFFGlEEaBgxgufwp",[global])),
    <<"xalphabetabcdalphabetabcdJvxalphabetabcdabcddalphabetabcdalphabetabcd">> = iolist_to_binary(re:replace("alphabetabcd","(?>.*)(?<=(abcd)|(wxyz))","x&&Jvx&\\1d&&",[])),
    <<"xalphabetabcdalphabetabcdJvxalphabetabcdabcddalphabetabcdalphabetabcdxJvxabcdd">> = iolist_to_binary(re:replace("alphabetabcd","(?>.*)(?<=(abcd)|(wxyz))","x&&Jvx&\\1d&&",[global])),
    <<"ieLIsedxuM">> = iolist_to_binary(re:replace("endingwxyz","(?>.*)(?<=(abcd)|(wxyz))","ieL\\1IsedxuM",[])),
    <<"ieLIsedxuMieLIsedxuM">> = iolist_to_binary(re:replace("endingwxyz","(?>.*)(?<=(abcd)|(wxyz))","ieL\\1IsedxuM",[global])),
    <<"abcdfooxyz">> = iolist_to_binary(re:replace("abcdfooxyz","(?>.*)foo","&\\1fqeu\\1",[])),
    <<"abcdfooxyz">> = iolist_to_binary(re:replace("abcdfooxyz","(?>.*)foo","&\\1fqeu\\1",[global])),
    <<"abcdkqQTClxyz">> = iolist_to_binary(re:replace("abcdfooxyz","(?>.*?)foo","kqQTCl",[])),
    <<"abcdkqQTClxyz">> = iolist_to_binary(re:replace("abcdfooxyz","(?>.*?)foo","kqQTCl",[global])),
    <<"RlacG">> = iolist_to_binary(re:replace("ac","(?:(a(*PRUNE)b)){0}(?:(?1)|ac)","\\1Rl&G\\1",[])),
    <<"RlacG">> = iolist_to_binary(re:replace("ac","(?:(a(*PRUNE)b)){0}(?:(?1)|ac)","\\1Rl&G\\1",[global])),
    <<"KacfGnCr">> = iolist_to_binary(re:replace("ac","(?:(a(*SKIP)b)){0}(?:(?1)|ac)","\\1K&fGn\\1Cr",[])),
    <<"KacfGnCr">> = iolist_to_binary(re:replace("ac","(?:(a(*SKIP)b)){0}(?:(?1)|ac)","\\1K&fGn\\1Cr",[global])),
    <<"aa">> = iolist_to_binary(re:replace("aa","(?<=(*SKIP)ac)a","\\1n\\1&umpF&",[])),
    <<"aa">> = iolist_to_binary(re:replace("aa","(?<=(*SKIP)ac)a","\\1n\\1&umpF&",[global])),
    <<"aaJTc">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*PRUNE)b|a+c","\\1JTc",[])),
    <<"aaJTc">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*PRUNE)b|a+c","\\1JTc",[global])),
    <<"aaaaaacPoPcntBnXovXUUqId">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*SKIP)(*PRUNE)b|a+c","&Po\\1Pcn\\1tBnXovXUUqId",[])),
    <<"aaaaaacPoPcntBnXovXUUqId">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*SKIP)(*PRUNE)b|a+c","&Po\\1Pcn\\1tBnXovXUUqId",[global])),
    <<"aaPKXinsyIho">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*SKIP:N)(*PRUNE)b|a+c","P\\1KXinsyIho",[])),
    <<"aaPKXinsyIho">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*SKIP:N)(*PRUNE)b|a+c","P\\1KXinsyIho",[global])),
    <<"aadQIOxaaaacMgBmiaaaacSNVV">> = iolist_to_binary(re:replace("aaaaaac","aaaa(*:N)a(*SKIP:N)(*PRUNE)b|a+c","dQI\\1Ox&MgB\\1\\1m\\1i&SNVV",[])),
    <<"aadQIOxaaaacMgBmiaaaacSNVV">> = iolist_to_binary(re:replace("aaaaaac","aaaa(*:N)a(*SKIP:N)(*PRUNE)b|a+c","dQI\\1Ox&MgB\\1\\1m\\1i&SNVV",[global])),
    <<"aafjn">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*THEN)(*PRUNE)b|a+c","fjn",[])),
    <<"aafjn">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*THEN)(*PRUNE)b|a+c","fjn",[global])),
    <<"aaaaaEWyIbgb">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*SKIP)b|a+c","EW\\1yIbgb",[])),
    <<"aaaaaEWyIbgb">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*SKIP)b|a+c","EW\\1yIbgb",[global])),
    <<"aaaaaaacyDfacanKSCjCr">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*PRUNE)(*SKIP)b|a+c","a&yDf&anKS\\1CjCr",[])),
    <<"aaaaaaacyDfacanKSCjCr">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*PRUNE)(*SKIP)b|a+c","a&yDf&anKS\\1CjCr",[global])),
    <<"aaaaahTo">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*THEN)(*SKIP)b|a+c","\\1h\\1To",[])),
    <<"aaaaahTo">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*THEN)(*SKIP)b|a+c","\\1h\\1To",[global])),
    <<"aaaaaSQq">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*COMMIT)(*SKIP)b|a+c","SQq",[])),
    <<"aaaaaSQq">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*COMMIT)(*SKIP)b|a+c","SQq",[global])),
    <<"aaaaaac">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*COMMIT)b|a+c","m&\\1ypjt",[])),
    <<"aaaaaac">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*COMMIT)b|a+c","m&\\1ypjt",[global])),
    ok.
run48() ->
    <<"vmtlvgrhXoIVUjuxCJ">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*THEN)b|a+c","vmtlvgrhXoIVUjuxCJ",[])),
    <<"vmtlvgrhXoIVUjuxCJ">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*THEN)b|a+c","vmtlvgrhXoIVUjuxCJ",[global])),
    <<"ShoEGuxAELDlwIpN">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*SKIP)(*THEN)b|a+c","S\\1hoEGuxAELDlwIpN",[])),
    <<"ShoEGuxAELDlwIpN">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*SKIP)(*THEN)b|a+c","S\\1hoEGuxAELDlwIpN",[global])),
    <<"fnaaaaaacK">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*PRUNE)(*THEN)b|a+c","fn&K",[])),
    <<"fnaaaaaacK">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*PRUNE)(*THEN)b|a+c","fn&K",[global])),
    <<"kbKqwYdbLnM">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*COMMIT)(*THEN)b|a+c","kbKqwY\\1dbLnM",[])),
    <<"kbKqwYdbLnM">> = iolist_to_binary(re:replace("aaaaaac","aaaaa(*COMMIT)(*THEN)b|a+c","kbKqwY\\1dbLnM",[global])),
    <<"aaaaaaaHqiP">> = iolist_to_binary(re:replace("aaaaaa","aaaaa(*:m)(*PRUNE:m)(*SKIP:m)m|a+","&aHqiP",[])),
    <<"aaaaaaaHqiP">> = iolist_to_binary(re:replace("aaaaaa","aaaaa(*:m)(*PRUNE:m)(*SKIP:m)m|a+","&aHqiP",[global])),
    <<"aaaaaqaCk">> = iolist_to_binary(re:replace("aaaaaa","aaaaa(*:m)(*MARK:m)(*PRUNE)(*SKIP:m)m|a+","q&Ck",[])),
    <<"aaaaaqaCk">> = iolist_to_binary(re:replace("aaaaaa","aaaaa(*:m)(*MARK:m)(*PRUNE)(*SKIP:m)m|a+","q&Ck",[global])),
    <<"aaLaaaaSIHmXmaaaaaaaaQaGiQRaaaa">> = iolist_to_binary(re:replace("aaaaaa","aaaaa(*:n)(*PRUNE:m)(*SKIP:m)m|a+","L&SI\\1HmX\\1m&&QaGiQR&",[])),
    <<"aaLaaaaSIHmXmaaaaaaaaQaGiQRaaaa">> = iolist_to_binary(re:replace("aaaaaa","aaaaa(*:n)(*PRUNE:m)(*SKIP:m)m|a+","L&SI\\1HmX\\1m&&QaGiQR&",[global])),
    <<"aaaaaJDpAfOcLFC">> = iolist_to_binary(re:replace("aaaaaa","aaaaa(*:n)(*MARK:m)(*PRUNE)(*SKIP:m)m|a+","JDpAfO\\1cLFC",[])),
    <<"aaaaaJDpAfOcLFC">> = iolist_to_binary(re:replace("aaaaaa","aaaaa(*:n)(*MARK:m)(*PRUNE)(*SKIP:m)m|a+","JDpAfO\\1cLFC",[global])),
    <<"aaiyeb">> = iolist_to_binary(re:replace("aaaac","a(*MARK:A)aa(*PRUNE:A)a(*SKIP:A)b|a+c","iy\\1e\\1b",[])),
    <<"aaiyeb">> = iolist_to_binary(re:replace("aaaac","a(*MARK:A)aa(*PRUNE:A)a(*SKIP:A)b|a+c","iy\\1e\\1b",[global])),
    <<"aaaxpghdaVtJPnXNvALV">> = iolist_to_binary(re:replace("aaaac","a(*MARK:A)aa(*MARK:A)a(*SKIP:A)b|a+c","xpghdaVtJ\\1PnXNv\\1ALV",[])),
    <<"aaaxpghdaVtJPnXNvALV">> = iolist_to_binary(re:replace("aaaac","a(*MARK:A)aa(*MARK:A)a(*SKIP:A)b|a+c","xpghdaVtJ\\1PnXNv\\1ALV",[global])),
    <<"aap">> = iolist_to_binary(re:replace("aaaac","aaa(*PRUNE:A)a(*SKIP:A)b|a+c","p",[])),
    <<"aap">> = iolist_to_binary(re:replace("aaaac","aaa(*PRUNE:A)a(*SKIP:A)b|a+c","p",[global])),
    <<"aaaYRKO">> = iolist_to_binary(re:replace("aaaac","aaa(*MARK:A)a(*SKIP:A)b|a+c","YRKO",[])),
    <<"aaaYRKO">> = iolist_to_binary(re:replace("aaaac","aaa(*MARK:A)a(*SKIP:A)b|a+c","YRKO",[global])),
    <<"BraUcvnkvGpATSbajqC">> = iolist_to_binary(re:replace("ba",".?(a|b(*THEN)c)","BraUcvnkvGpATS&jqC",[])),
    <<"BraUcvnkvGpATSbajqC">> = iolist_to_binary(re:replace("ba",".?(a|b(*THEN)c)","BraUcvnkvGpATS&jqC",[global])),
    <<"SvwukUabcxYabctLabcWMabjohX">> = iolist_to_binary(re:replace("abc","(a(*COMMIT)b)c|abd","SvwukU&xY&tL&WM\\1johX",[])),
    <<"SvwukUabcxYabctLabcWMabjohX">> = iolist_to_binary(re:replace("abc","(a(*COMMIT)b)c|abd","SvwukU&xY&tL&WM\\1johX",[global])),
    <<"abd">> = iolist_to_binary(re:replace("abd","(a(*COMMIT)b)c|abd","nrGC&R",[])),
    <<"abd">> = iolist_to_binary(re:replace("abd","(a(*COMMIT)b)c|abd","nrGC&R",[global])),
    <<"qCRcTneabcivabcsCXFrnd">> = iolist_to_binary(re:replace("abc","(?=a(*COMMIT)b)abc|abd","qCRcTne&iv&sCXFrnd",[])),
    <<"qCRcTneabcivabcsCXFrnd">> = iolist_to_binary(re:replace("abc","(?=a(*COMMIT)b)abc|abd","qCRcTne&iv&sCXFrnd",[global])),
    <<"babdultabdhgP">> = iolist_to_binary(re:replace("abd","(?=a(*COMMIT)b)abc|abd","\\1b&ult&hg\\1P",[])),
    <<"babdultabdhgP">> = iolist_to_binary(re:replace("abd","(?=a(*COMMIT)b)abc|abd","\\1b&ult&hg\\1P",[global])),
    <<"tRwOvxXkpyskSn">> = iolist_to_binary(re:replace("abc","(?>a(*COMMIT)b)c|abd","tRwOvxXk\\1pyskS\\1n",[])),
    <<"tRwOvxXkpyskSn">> = iolist_to_binary(re:replace("abc","(?>a(*COMMIT)b)c|abd","tRwOvxXk\\1pyskS\\1n",[global])),
    <<"gLGD">> = iolist_to_binary(re:replace("abd","(?>a(*COMMIT)b)c|abd","gLGD",[])),
    <<"gLGD">> = iolist_to_binary(re:replace("abd","(?>a(*COMMIT)b)c|abd","gLGD",[global])),
    <<"eSWabgEuWBlc">> = iolist_to_binary(re:replace("abc","a(?=b(*COMMIT)c)[^d]|abd","e\\1SW&\\1gEu\\1WBl",[])),
    <<"eSWabgEuWBlc">> = iolist_to_binary(re:replace("abc","a(?=b(*COMMIT)c)[^d]|abd","e\\1SW&\\1gEu\\1WBl",[global])),
    <<"abd">> = iolist_to_binary(re:replace("abd","a(?=b(*COMMIT)c)[^d]|abd","Cy",[])),
    <<"abd">> = iolist_to_binary(re:replace("abd","a(?=b(*COMMIT)c)[^d]|abd","Cy",[global])),
    <<"lCKqNoFrmqk">> = iolist_to_binary(re:replace("abd","a(?=bc).|abd","lCKqNoFrmqk",[])),
    <<"lCKqNoFrmqk">> = iolist_to_binary(re:replace("abd","a(?=bc).|abd","lCKqNoFrmqk",[global])),
    <<"ghAabNTPGyRCabc">> = iolist_to_binary(re:replace("abc","a(?=bc).|abd","gh\\1A&NTPGyR\\1C&",[])),
    <<"ghAabNTPGyRCabc">> = iolist_to_binary(re:replace("abc","a(?=bc).|abd","gh\\1A&NTPGyR\\1C&",[global])),
    <<"abceabd">> = iolist_to_binary(re:replace("abceabd","a(?>b(*COMMIT)c)d|abd","IU&P",[])),
    <<"abceabd">> = iolist_to_binary(re:replace("abceabd","a(?>b(*COMMIT)c)d|abd","IU&P",[global])),
    <<"abcehdKDpy">> = iolist_to_binary(re:replace("abceabd","a(?>bc)d|abd","hdKDpy",[])),
    <<"abcehdKDpy">> = iolist_to_binary(re:replace("abceabd","a(?>bc)d|abd","hdKDpy",[global])),
    ok.
run49() ->
    <<"nAXgVEabdhYFcyFVwuV">> = iolist_to_binary(re:replace("abd","(?>a(*COMMIT)b)c|abd","nAX\\1gVE&hYF\\1cy\\1FVwuV",[])),
    <<"nAXgVEabdhYFcyFVwuV">> = iolist_to_binary(re:replace("abd","(?>a(*COMMIT)b)c|abd","nAX\\1gVE&hYF\\1cy\\1FVwuV",[global])),
    <<"abd">> = iolist_to_binary(re:replace("abd","(?>a(*COMMIT)c)d|abd","jM",[])),
    <<"abd">> = iolist_to_binary(re:replace("abd","(?>a(*COMMIT)c)d|abd","jM",[global])),
    <<"xqHG">> = iolist_to_binary(re:replace("ac","((?=a(*COMMIT)b)ab|ac){0}(?:(?1)|a(c))","xqHG",[])),
    <<"xqHG">> = iolist_to_binary(re:replace("ac","((?=a(*COMMIT)b)ab|ac){0}(?:(?1)|a(c))","xqHG",[global])),
    <<"a">> = iolist_to_binary(re:replace("a","^(a)?(?(1)a|b)+$","GeWPQyG&Ahl\\1Bc&x",[])),
    <<"a">> = iolist_to_binary(re:replace("a","^(a)?(?(1)a|b)+$","GeWPQyG&Ahl\\1Bc&x",[global])),
    <<"dNWEabcdRabcdBmabcdabcdlSrd">> = iolist_to_binary(re:replace("abcd","^((abc|abcx)(*THEN)y|abcd)","dNWE\\1R&Bm&\\1lSrd",[])),
    <<"dNWEabcdRabcdBmabcdabcdlSrd">> = iolist_to_binary(re:replace("abcd","^((abc|abcx)(*THEN)y|abcd)","dNWE\\1R&Bm&\\1lSrd",[global])),
    <<"abcxy">> = iolist_to_binary(re:replace("abcxy","^((abc|abcx)(*THEN)y|abcd)","&\\1&XAFhdfF",[])),
    <<"abcxy">> = iolist_to_binary(re:replace("abcxy","^((abc|abcx)(*THEN)y|abcd)","&\\1&XAFhdfF",[global])),
    <<"yes">> = iolist_to_binary(re:replace("yes","^((yes|no)(*THEN)(*F))?","BADWi",[])),
    <<"yes">> = iolist_to_binary(re:replace("yes","^((yes|no)(*THEN)(*F))?","BADWi",[global])),
    <<"AbcdCBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCBefgBhiBqz","(A (.*)   C? (*THEN)  | A D) (*FAIL)","iGh&Y",[extended])),
    <<"AbcdCBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCBefgBhiBqz","(A (.*)   C? (*THEN)  | A D) (*FAIL)","iGh&Y",[extended,global])),
    <<"AbcdCBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCBefgBhiBqz","(A (.*)   C? (*THEN)  | A D) z","o",[extended])),
    <<"AbcdCBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCBefgBhiBqz","(A (.*)   C? (*THEN)  | A D) z","o",[extended,global])),
    <<"AbcdCBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCBefgBhiBqz","(A (.*)   C? (*THEN)  | A D) \\s* (*FAIL)","\\1YEHe\\1\\1IOtAN",[extended])),
    <<"AbcdCBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCBefgBhiBqz","(A (.*)   C? (*THEN)  | A D) \\s* (*FAIL)","\\1YEHe\\1\\1IOtAN",[extended,global])),
    <<"AbcdCBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCBefgBhiBqz","(A (.*)   C? (*THEN)  | A D) \\s* z","Rg\\1p&cCrLG\\1\\1GS",[extended])),
    <<"AbcdCBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCBefgBhiBqz","(A (.*)   C? (*THEN)  | A D) \\s* z","Rg\\1p&cCrLG\\1\\1GS",[extended,global])),
    <<"AbcdCBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCBefgBhiBqz","(A (.*)   (?:C|) (*THEN)  | A D) (*FAIL)","aJ",[extended])),
    <<"AbcdCBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCBefgBhiBqz","(A (.*)   (?:C|) (*THEN)  | A D) (*FAIL)","aJ",[extended,global])),
    <<"AbcdCBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCBefgBhiBqz","(A (.*)   (?:C|) (*THEN)  | A D) z","O&n",[extended])),
    <<"AbcdCBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCBefgBhiBqz","(A (.*)   (?:C|) (*THEN)  | A D) z","O&n",[extended,global])),
    <<"AbcdCBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCBefgBhiBqz","(A (.*)   C{0,6} (*THEN)  | A D) (*FAIL)","TxOFuVua",[extended])),
    <<"AbcdCBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCBefgBhiBqz","(A (.*)   C{0,6} (*THEN)  | A D) (*FAIL)","TxOFuVua",[extended,global])),
    <<"AbcdCBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCBefgBhiBqz","(A (.*)   C{0,6} (*THEN)  | A D) z","SU",[extended])),
    <<"AbcdCBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCBefgBhiBqz","(A (.*)   C{0,6} (*THEN)  | A D) z","SU",[extended,global])),
    <<"AbcdCEBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCEBefgBhiBqz","(A (.*)   (CE){0,6} (*THEN)  | A D) (*FAIL)","\\1\\1&LrN\\1n&nGv&aNIaWn",[extended])),
    <<"AbcdCEBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCEBefgBhiBqz","(A (.*)   (CE){0,6} (*THEN)  | A D) (*FAIL)","\\1\\1&LrN\\1n&nGv&aNIaWn",[extended,global])),
    <<"AbcdCEBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCEBefgBhiBqz","(A (.*)   (CE){0,6} (*THEN)  | A D) z","\\1YODJodgCmmfKwf\\1",[extended])),
    <<"AbcdCEBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCEBefgBhiBqz","(A (.*)   (CE){0,6} (*THEN)  | A D) z","\\1YODJodgCmmfKwf\\1",[extended,global])),
    <<"AbcdCBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCBefgBhiBqz","(A (.*)   (CE*){0,6} (*THEN)  | A D) (*FAIL)","N\\1FtqpFbrL\\1Uwr&u",[extended])),
    <<"AbcdCBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCBefgBhiBqz","(A (.*)   (CE*){0,6} (*THEN)  | A D) (*FAIL)","N\\1FtqpFbrL\\1Uwr&u",[extended,global])),
    <<"AbcdCBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCBefgBhiBqz","(A (.*)   (CE*){0,6} (*THEN)  | A D) z","\\1A\\1QPFrGi",[extended])),
    <<"AbcdCBefgBhiBqz">> = iolist_to_binary(re:replace("AbcdCBefgBhiBqz","(A (.*)   (CE*){0,6} (*THEN)  | A D) z","\\1A\\1QPFrGi",[extended,global])),
    <<"ac">> = iolist_to_binary(re:replace("ac","(?=a(*COMMIT)b|ac)ac|ac","xw\\1OijBNT\\1R\\1\\1",[])),
    <<"ac">> = iolist_to_binary(re:replace("ac","(?=a(*COMMIT)b|ac)ac|ac","xw\\1OijBNT\\1R\\1\\1",[global])),
    <<"ac">> = iolist_to_binary(re:replace("ac","(?=a(*COMMIT)b|(ac)) ac | (a)c","&\\1lqABSOB&",[extended])),
    <<"ac">> = iolist_to_binary(re:replace("ac","(?=a(*COMMIT)b|(ac)) ac | (a)c","&\\1lqABSOB&",[extended,global])),
    ok.
run50() ->
    <<"fUpPJGcmtHgPTjpn">> = iolist_to_binary(re:replace("bnn","(?(?!b(*THEN)a)bn|bnn)","fUpPJGc\\1mtHgP\\1Tjp",[])),
    <<"fUpPJGcmtHgPTjpn">> = iolist_to_binary(re:replace("bnn","(?(?!b(*THEN)a)bn|bnn)","fUpPJGc\\1mtHgP\\1Tjp",[global])),
    <<"bnpQyfPUbHStn">> = iolist_to_binary(re:replace("bnn","(?!b(*SKIP)a)bn|bnn","&pQyfPUb\\1HSt",[])),
    <<"bnpQyfPUbHStn">> = iolist_to_binary(re:replace("bnn","(?!b(*SKIP)a)bn|bnn","&pQyfPUb\\1HSt",[global])),
    <<"QItDtbnXKbLqmpn">> = iolist_to_binary(re:replace("bnn","(?(?!b(*SKIP)a)bn|bnn)","QItD\\1t&XKbLqmp",[])),
    <<"QItDtbnXKbLqmpn">> = iolist_to_binary(re:replace("bnn","(?(?!b(*SKIP)a)bn|bnn)","QItD\\1t&XKbLqmp",[global])),
    <<"HyrLbnn">> = iolist_to_binary(re:replace("bnn","(?!b(*PRUNE)a)bn|bnn","HyrL&",[])),
    <<"HyrLbnn">> = iolist_to_binary(re:replace("bnn","(?!b(*PRUNE)a)bn|bnn","HyrL&",[global])),
    <<"MUxDTbnn">> = iolist_to_binary(re:replace("bnn","(?(?!b(*PRUNE)a)bn|bnn)","MUxDT&",[])),
    <<"MUxDTbnn">> = iolist_to_binary(re:replace("bnn","(?(?!b(*PRUNE)a)bn|bnn)","MUxDT&",[global])),
    <<"sdqn">> = iolist_to_binary(re:replace("bnn","(?!b(*COMMIT)a)bn|bnn","sd\\1q",[])),
    <<"sdqn">> = iolist_to_binary(re:replace("bnn","(?!b(*COMMIT)a)bn|bnn","sd\\1q",[global])),
    <<"FQLjbnHLRNtn">> = iolist_to_binary(re:replace("bnn","(?(?!b(*COMMIT)a)bn|bnn)","FQLj&HLRN\\1\\1t",[])),
    <<"FQLjbnHLRNtn">> = iolist_to_binary(re:replace("bnn","(?(?!b(*COMMIT)a)bn|bnn)","FQLj&HLRN\\1\\1t",[global])),
    <<"bnn">> = iolist_to_binary(re:replace("bnn","(?=b(*SKIP)a)bn|bnn","dAaye\\1Bf&UNI",[])),
    <<"bnn">> = iolist_to_binary(re:replace("bnn","(?=b(*SKIP)a)bn|bnn","dAaye\\1Bf&UNI",[global])),
    <<"ObnnQfkfGJxwbnnxkmrGMbnn">> = iolist_to_binary(re:replace("bnn","(?=b(*THEN)a)bn|bnn","O&Q\\1fkfGJxw&xkmrGM&",[])),
    <<"ObnnQfkfGJxwbnnxkmrGMbnn">> = iolist_to_binary(re:replace("bnn","(?=b(*THEN)a)bn|bnn","O&Q\\1fkfGJxw&xkmrGM&",[global])),
    <<"bdVxYcoMDjqfdtinEac">> = iolist_to_binary(re:replace("ac","^(?!a(*SKIP)b)","bdVx&YcoMDjq&fd\\1tinE",[])),
    <<"bdVxYcoMDjqfdtinEac">> = iolist_to_binary(re:replace("ac","^(?!a(*SKIP)b)","bdVx&YcoMDjq&fd\\1tinE",[global])),
    <<"XDacvYSvDacNKacAfJd">> = iolist_to_binary(re:replace("acd","^(?!a(*SKIP)b)..","XD\\1&vY\\1SvD&NK&AfJ",[])),
    <<"XDacvYSvDacNKacAfJd">> = iolist_to_binary(re:replace("acd","^(?!a(*SKIP)b)..","XD\\1&vY\\1SvD&NK&AfJ",[global])),
    <<"MnEjDLxqRfDdksvBNUd">> = iolist_to_binary(re:replace("acd","(?!a(*SKIP)b)..","MnEjDLxqRfD\\1dksvBNU",[])),
    <<"MnEjDLxqRfDdksvBNUd">> = iolist_to_binary(re:replace("acd","(?!a(*SKIP)b)..","MnEjDLxqRfD\\1dksvBNU",[global])),
    <<"Snac">> = iolist_to_binary(re:replace("ac","^(?(?!a(*SKIP)b))","S\\1n",[])),
    <<"Snac">> = iolist_to_binary(re:replace("ac","^(?(?!a(*SKIP)b))","S\\1n",[global])),
    <<"IacBaUakXjhOFhQykvd">> = iolist_to_binary(re:replace("acd","^(?!a(*PRUNE)b)..","I\\1&BaUakXjhOFhQy\\1kv",[])),
    <<"IacBaUakXjhOFhQykvd">> = iolist_to_binary(re:replace("acd","^(?!a(*PRUNE)b)..","I\\1&BaUakXjhOFhQy\\1kv",[global])),
    <<"acxacacaccABhoecjWacDd">> = iolist_to_binary(re:replace("acd","(?!a(*PRUNE)b)..","&x&&&cABhoecjW&D",[])),
    <<"acxacacaccABhoecjWacDd">> = iolist_to_binary(re:replace("acd","(?!a(*PRUNE)b)..","&x&&&cABhoecjW&D",[global])),
    <<"mBPmYeGJsacgacj">> = iolist_to_binary(re:replace("ac","(?!a(*COMMIT)b)ac|cd","mBP\\1mYeGJ\\1s&g&j",[])),
    <<"mBPmYeGJsacgacj">> = iolist_to_binary(re:replace("ac","(?!a(*COMMIT)b)ac|cd","mBP\\1mYeGJ\\1s&g&j",[global])),
    <<"baybaRbaANqnrUXsC">> = iolist_to_binary(re:replace("ba","\\A.*?(?:a|bc)","&y&R&ANqnrUXsC",[])),
    <<"baybaRbaANqnrUXsC">> = iolist_to_binary(re:replace("ba","\\A.*?(?:a|bc)","&y&R&ANqnrUXsC",[global])),
    <<"FCDCDlbCDOEkErhCDCDsCDT">> = iolist_to_binary(re:replace("CD","^(A(*THEN)B|C(*THEN)D)","F&&lb\\1OEkErh\\1&s\\1T",[])),
    <<"FCDCDlbCDOEkErhCDCDsCDT">> = iolist_to_binary(re:replace("CD","^(A(*THEN)B|C(*THEN)D)","F&&lb\\1OEkErh\\1&s\\1T",[global])),
    <<"s1234BtugJSlfoIoa">> = iolist_to_binary(re:replace("1234","^\\d*\\w{4}","\\1s&BtugJS\\1lfoIo\\1a",[])),
    <<"s1234BtugJSlfoIoa">> = iolist_to_binary(re:replace("1234","^\\d*\\w{4}","\\1s&BtugJS\\1lfoIo\\1a",[global])),
    <<"123">> = iolist_to_binary(re:replace("123","^\\d*\\w{4}","&dfYwAHcFyJUBIK&&&",[])),
    <<"123">> = iolist_to_binary(re:replace("123","^\\d*\\w{4}","&dfYwAHcFyJUBIK&&&",[global])),
    <<"aaaaewRuSaaaab">> = iolist_to_binary(re:replace("aaaa","^[^b]*\\w{4}","&ewRuS&b",[])),
    <<"aaaaewRuSaaaab">> = iolist_to_binary(re:replace("aaaa","^[^b]*\\w{4}","&ewRuS&b",[global])),
    <<"aaa">> = iolist_to_binary(re:replace("aaa","^[^b]*\\w{4}","iOiPewDMrMw&Iy",[])),
    <<"aaa">> = iolist_to_binary(re:replace("aaa","^[^b]*\\w{4}","iOiPewDMrMw&Iy",[global])),
    ok.
run51() ->
    <<"rkSqOQ">> = iolist_to_binary(re:replace("aaaa","^[^b]*\\w{4}","rkSqOQ",[caseless])),
    <<"rkSqOQ">> = iolist_to_binary(re:replace("aaaa","^[^b]*\\w{4}","rkSqOQ",[caseless,global])),
    <<"aaa">> = iolist_to_binary(re:replace("aaa","^[^b]*\\w{4}","V",[caseless])),
    <<"aaa">> = iolist_to_binary(re:replace("aaa","^[^b]*\\w{4}","V",[caseless,global])),
    <<"LfjQyR">> = iolist_to_binary(re:replace("aaaa","^a*\\w{4}","LfjQyR",[])),
    <<"LfjQyR">> = iolist_to_binary(re:replace("aaaa","^a*\\w{4}","LfjQyR",[global])),
    <<"aaa">> = iolist_to_binary(re:replace("aaa","^a*\\w{4}","tWpTOW&\\1k&YBc",[])),
    <<"aaa">> = iolist_to_binary(re:replace("aaa","^a*\\w{4}","tWpTOW&\\1k&YBc",[global])),
    <<"aaaaXvMpW">> = iolist_to_binary(re:replace("aaaa","^a*\\w{4}","&XvMpW",[caseless])),
    <<"aaaaXvMpW">> = iolist_to_binary(re:replace("aaaa","^a*\\w{4}","&XvMpW",[caseless,global])),
    <<"aaa">> = iolist_to_binary(re:replace("aaa","^a*\\w{4}","JS\\1AJl&S",[caseless])),
    <<"aaa">> = iolist_to_binary(re:replace("aaa","^a*\\w{4}","JS\\1AJl&S",[caseless,global])),
    <<"o1 IN SOA non-sp1 non-sp2(i1 IN SOA non-sp1 non-sp2(1k1far1UTF">> = iolist_to_binary(re:replace("1 IN SOA non-sp1 non-sp2(","^(\\d+)\\s+IN\\s+SOA\\s+(\\S+)\\s+(\\S+)\\s*\\(\\s*$","o&i&\\1k\\1far\\1UTF",[])),
    <<"o1 IN SOA non-sp1 non-sp2(i1 IN SOA non-sp1 non-sp2(1k1far1UTF">> = iolist_to_binary(re:replace("1 IN SOA non-sp1 non-sp2(","^(\\d+)\\s+IN\\s+SOA\\s+(\\S+)\\s+(\\S+)\\s*\\(\\s*$","o&i&\\1k\\1far\\1UTF",[global])),
    <<"AZ">> = iolist_to_binary(re:replace("AZ","^A\\xZ","&ePUJnkS",[])),
    <<"AZ">> = iolist_to_binary(re:replace("AZ","^A\\xZ","&ePUJnkS",[global])),
    <<"HDSASBbcRNYiEPlVoYX">> = iolist_to_binary(re:replace("ASB","^A\\o{123}B","HDS&bc\\1RNYiEPlVoYX",[])),
    <<"HDSASBbcRNYiEPlVoYX">> = iolist_to_binary(re:replace("ASB","^A\\o{123}B","HDS&bc\\1RNYiEPlVoYX",[global])),
    <<"S">> = iolist_to_binary(re:replace("aaaab"," ^ a + + b $ ","S",[extended])),
    <<"S">> = iolist_to_binary(re:replace("aaaab"," ^ a + + b $ ","S",[extended,global])),
    <<"jMfVowwsesaaaaboWOLaaaabyd">> = iolist_to_binary(re:replace("aaaab"," ^ a + #comment
  + b $ ","jMfVoww\\1ses&oWOL&yd",[extended])),
    <<"jMfVowwsesaaaaboWOLaaaabyd">> = iolist_to_binary(re:replace("aaaab"," ^ a + #comment
  + b $ ","jMfVoww\\1ses&oWOL&yd",[extended,global])),
    <<"QqHTIgCoaaaabiIlqXaaaabO">> = iolist_to_binary(re:replace("aaaab"," ^ a + #comment
  #comment
  + b $ ","QqHTIgCo\\1&\\1\\1iIlqX&O",[extended])),
    <<"QqHTIgCoaaaabiIlqXaaaabO">> = iolist_to_binary(re:replace("aaaab"," ^ a + #comment
  #comment
  + b $ ","QqHTIgCo\\1&\\1\\1iIlqX&O",[extended,global])),
    <<"fBLv">> = iolist_to_binary(re:replace("aaaab"," ^ (?> a + ) b $ ","fBLv",[extended])),
    <<"fBLv">> = iolist_to_binary(re:replace("aaaab"," ^ (?> a + ) b $ ","fBLv",[extended,global])),
    <<"lyLDaaaaBYgvaaaa">> = iolist_to_binary(re:replace("aaaab"," ^ ( a + ) + + \\w $ ","lyLD\\1BYgv\\1",[extended])),
    <<"lyLDaaaaBYgvaaaa">> = iolist_to_binary(re:replace("aaaab"," ^ ( a + ) + + \\w $ ","lyLD\\1BYgv\\1",[extended,global])),
    <<"acb">> = iolist_to_binary(re:replace("acb","(?:x|(?:(xx|yy)+|x|x|x|x|x)|a|a|a)bc","Ry&\\1X&qs\\1vwy\\1&kyHc",[])),
    <<"acb">> = iolist_to_binary(re:replace("acb","(?:x|(?:(xx|yy)+|x|x|x|x|x)|a|a|a)bc","Ry&\\1X&qs\\1vwy\\1&kyHc",[global])),
    <<"uXMdu\"NOT MATCHED">> = iolist_to_binary(re:replace("NON QUOTED \"QUOT\"\"ED\" AFTER \"NOT MATCHED","\\A(?:[^\\\"]++|\\\"(?:[^\\\"]*+|\\\"\\\")*+\\\")++","\\1uXMdu",[])),
    <<"uXMdu\"NOT MATCHED">> = iolist_to_binary(re:replace("NON QUOTED \"QUOT\"\"ED\" AFTER \"NOT MATCHED","\\A(?:[^\\\"]++|\\\"(?:[^\\\"]*+|\\\"\\\")*+\\\")++","\\1uXMdu",[global])),
    <<"oTbEDv\"NOT MATCHED">> = iolist_to_binary(re:replace("NON QUOTED \"QUOT\"\"ED\" AFTER \"NOT MATCHED","\\A(?:[^\\\"]++|\\\"(?:[^\\\"]++|\\\"\\\")*+\\\")++","oTbEDv",[])),
    <<"oTbEDv\"NOT MATCHED">> = iolist_to_binary(re:replace("NON QUOTED \"QUOT\"\"ED\" AFTER \"NOT MATCHED","\\A(?:[^\\\"]++|\\\"(?:[^\\\"]++|\\\"\\\")*+\\\")++","oTbEDv",[global])),
    <<"RNON QUOTED \"QUOT\"\"ED\" AFTER elTeYNON QUOTED \"QUOT\"\"ED\" AFTER NON QUOTED \"QUOT\"\"ED\" AFTER \"NOT MATCHED">> = iolist_to_binary(re:replace("NON QUOTED \"QUOT\"\"ED\" AFTER \"NOT MATCHED","\\A(?:[^\\\"]++|\\\"(?:[^\\\"]++|\\\"\\\")++\\\")++","R&elTeY&&\\1",[])),
    <<"RNON QUOTED \"QUOT\"\"ED\" AFTER elTeYNON QUOTED \"QUOT\"\"ED\" AFTER NON QUOTED \"QUOT\"\"ED\" AFTER \"NOT MATCHED">> = iolist_to_binary(re:replace("NON QUOTED \"QUOT\"\"ED\" AFTER \"NOT MATCHED","\\A(?:[^\\\"]++|\\\"(?:[^\\\"]++|\\\"\\\")++\\\")++","R&elTeY&&\\1",[global])),
    <<"NON QUOTED \"QUOT\"\"ED\" AFTER NON QUOTED \"QUOT\"\"ED\" AFTER X AFTER \"NOT MATCHED">> = iolist_to_binary(re:replace("NON QUOTED \"QUOT\"\"ED\" AFTER \"NOT MATCHED","\\A([^\\\"1]++|[\\\"2]([^\\\"3]*+|[\\\"4][\\\"5])*+[\\\"6])++","&&X\\1",[])),
    <<"NON QUOTED \"QUOT\"\"ED\" AFTER NON QUOTED \"QUOT\"\"ED\" AFTER X AFTER \"NOT MATCHED">> = iolist_to_binary(re:replace("NON QUOTED \"QUOT\"\"ED\" AFTER \"NOT MATCHED","\\A([^\\\"1]++|[\\\"2]([^\\\"3]*+|[\\\"4][\\\"5])*+[\\\"6])++","&&X\\1",[global])),
    <<"YnMwtestestesNxitesWfbt test">> = iolist_to_binary(re:replace("test test","^\\w+(?>\\s*)(?<=\\w)","\\1YnMw&&&\\1Nxi&Wfb",[])),
    <<"YnMwtestestesNxitesWfbt test">> = iolist_to_binary(re:replace("test test","^\\w+(?>\\s*)(?<=\\w)","\\1YnMw&&&\\1Nxi&Wfb",[global])),
    ok.
run52() ->
    <<"rGTHaclRVHejdaclk">> = iolist_to_binary(re:replace("acl","(?P<Name>a)?(?P<Name2>b)?(?(<Name>)c|d)*l","rGTH&RVHejd&k",[])),
    <<"rGTHaclRVHejdaclk">> = iolist_to_binary(re:replace("acl","(?P<Name>a)?(?P<Name2>b)?(?(<Name>)c|d)*l","rGTH&RVHejd&k",[global])),
    <<"bdlGCtbdlDbdlLja">> = iolist_to_binary(re:replace("bdl","(?P<Name>a)?(?P<Name2>b)?(?(<Name>)c|d)*l","\\1&GCt&D&Lja",[])),
    <<"bdlGCtbdlDbdlLja">> = iolist_to_binary(re:replace("bdl","(?P<Name>a)?(?P<Name2>b)?(?(<Name>)c|d)*l","\\1&GCt&D&Lja",[global])),
    <<"afQfwLk">> = iolist_to_binary(re:replace("adl","(?P<Name>a)?(?P<Name2>b)?(?(<Name>)c|d)*l","f\\1QfwLk",[])),
    <<"afQfwLk">> = iolist_to_binary(re:replace("adl","(?P<Name>a)?(?P<Name2>b)?(?(<Name>)c|d)*l","f\\1QfwLk",[global])),
    <<"bcyjrFTlQUQPlu">> = iolist_to_binary(re:replace("bcl","(?P<Name>a)?(?P<Name2>b)?(?(<Name>)c|d)*l","\\1yjrFT&QU\\1QP\\1&u",[])),
    <<"bcyjrFTlQUQPlu">> = iolist_to_binary(re:replace("bcl","(?P<Name>a)?(?P<Name2>b)?(?(<Name>)c|d)*l","\\1yjrFT&QU\\1QP\\1&u",[global])),
    <<"abcgpi">> = iolist_to_binary(re:replace("abc","\\sabc","&gpi\\1",[])),
    <<"abcgpi">> = iolist_to_binary(re:replace("abc","\\sabc","&gpi\\1",[global])),
    <<"kQ">> = iolist_to_binary(re:replace("aa]]","[\\Qa]\\E]+","kQ",[])),
    <<"kQ">> = iolist_to_binary(re:replace("aa]]","[\\Qa]\\E]+","kQ",[global])),
    <<"jaa]]Iaa]]lt">> = iolist_to_binary(re:replace("aa]]","[\\Q]a\\E]+","j&I&lt",[])),
    <<"jaa]]Iaa]]lt">> = iolist_to_binary(re:replace("aa]]","[\\Q]a\\E]+","j&I&lt",[global])),
    <<"jOfKaMAaaBvu">> = iolist_to_binary(re:replace("AaaB","A((((((((a))))))))\\8B","jOfK\\1M&vu",[])),
    <<"jOfKaMAaaBvu">> = iolist_to_binary(re:replace("AaaB","A((((((((a))))))))\\8B","jOfK\\1M&vu",[global])),
    <<"WAaaBQSVaaHodUgHSHnt">> = iolist_to_binary(re:replace("AaaB","A(((((((((a)))))))))\\9B","W&QSV\\1\\1HodUgHSHnt",[])),
    <<"WAaaBQSVaaHodUgHSHnt">> = iolist_to_binary(re:replace("AaaB","A(((((((((a)))))))))\\9B","W&QSV\\1\\1HodUgHSHnt",[global])),
    <<"oyDWsqkcnurA8BWk">> = iolist_to_binary(re:replace("A8B","A[\\8\\9]B","oyDWsqkc\\1nur&\\1Wk",[])),
    <<"oyDWsqkcnurA8BWk">> = iolist_to_binary(re:replace("A8B","A[\\8\\9]B","oyDWsqkc\\1nur&\\1Wk",[global])),
    <<"drmFA9ByB">> = iolist_to_binary(re:replace("A9B","A[\\8\\9]B","dr\\1mF&yB",[])),
    <<"drmFA9ByB">> = iolist_to_binary(re:replace("A9B","A[\\8\\9]B","dr\\1mF&yB",[global])),
    <<"jababdVLabdJkabkPEEabGabEabA">> = iolist_to_binary(re:replace("abd","(|ab)*?d","j\\1&VL&Jk\\1kPEE\\1G\\1E\\1A",[])),
    <<"jababdVLabdJkabkPEEabGabEabA">> = iolist_to_binary(re:replace("abd","(|ab)*?d","j\\1&VL&Jk\\1kPEE\\1G\\1E\\1A",[global])),
    <<"xyUd">> = iolist_to_binary(re:replace("xyd","(|ab)*?d","U&",[])),
    <<"xyUd">> = iolist_to_binary(re:replace("xyd","(|ab)*?d","U&",[global])),
    <<"U1234abcd">> = iolist_to_binary(re:replace("1234abcd","(?:((abcd))|(((?:(?:(?:(?:abc|(?:abcdef))))b)abcdefghi)abc)|((*ACCEPT)))","&U",[])),
    <<"U1U2U3U4abcdUU">> = iolist_to_binary(re:replace("1234abcd","(?:((abcd))|(((?:(?:(?:(?:abc|(?:abcdef))))b)abcdefghi)abc)|((*ACCEPT)))","&U",[global])),
    <<"Wcaaaensa">> = iolist_to_binary(re:replace("aaa","(\\2|a)(\\1)","Wc&\\1ens",[])),
    <<"Wcaaaensa">> = iolist_to_binary(re:replace("aaa","(\\2|a)(\\1)","Wc&\\1ens",[global])),
    <<"botc">> = iolist_to_binary(re:replace("baaaaaaaaac","(?1)(?#?'){8}(a)","ot",[])),
    <<"botc">> = iolist_to_binary(re:replace("baaaaaaaaac","(?1)(?#?'){8}(a)","ot",[global])),
    <<"TKKhmnqBxxjxhwMexxxxxx">> = iolist_to_binary(re:replace("xx","((((((((((((x))))))))))))\\12","TKKhmnqB&j\\1hwMe&&&",[])),
    <<"TKKhmnqBxxjxhwMexxxxxx">> = iolist_to_binary(re:replace("xx","((((((((((((x))))))))))))\\12","TKKhmnqB&j\\1hwMe&&&",[global])),
    <<"AA8B9CFKEFFLoA8B9CgFNcA8B9CISDNV">> = iolist_to_binary(re:replace("A8B9C","A[\\8]B[\\9]C","A&FKEFFLo&gFNc&ISDNV",[])),
    <<"AA8B9CFKEFFLoA8B9CgFNcA8B9CISDNV">> = iolist_to_binary(re:replace("A8B9C","A[\\8]B[\\9]C","A&FKEFFLo&gFNc&ISDNV",[global])),
    <<"gbEHUmaJEumtTGBi">> = iolist_to_binary(re:replace("","(?1)()((((((\\1++))\\x85)+)|))","gbEHUma\\1JEum\\1t\\1TGBi",[])),
    <<"gbEHUmaJEumtTGBigbEHUmaJEumtTGBi">> = iolist_to_binary(re:replace("","(?1)()((((((\\1++))\\x85)+)|))","gbEHUma\\1JEum\\1t\\1TGBi",[global])),
    ok.
run53() ->
    <<"MfhOrMhJCsjabcd">> = iolist_to_binary(re:replace("abcd","(?|(\\k'Pm')|(?'Pm'))","Mfh&OrMhJ&C&\\1sj&",[])),
    <<"MfhOrMhJCsjaMfhOrMhJCsjbMfhOrMhJCsjcMfhOrMhJCsjdMfhOrMhJCsj">> = iolist_to_binary(re:replace("abcd","(?|(\\k'Pm')|(?'Pm'))","Mfh&OrMhJ&C&\\1sj&",[global])),
    <<"RuGESUvQDVqs">> = iolist_to_binary(re:replace("aaaaaa","(?|(aaa)|(b))\\g{1}","RuGESUvQDVqs",[])),
    <<"RuGESUvQDVqs">> = iolist_to_binary(re:replace("aaaaaa","(?|(aaa)|(b))\\g{1}","RuGESUvQDVqs",[global])),
    <<"bbbQYbbchbSpSgMsjmJ">> = iolist_to_binary(re:replace("bb","(?|(aaa)|(b))\\g{1}","\\1&QY&ch\\1SpSgMsjmJ",[])),
    <<"bbbQYbbchbSpSgMsjmJ">> = iolist_to_binary(re:replace("bb","(?|(aaa)|(b))\\g{1}","\\1&QY&ch\\1SpSgMsjmJ",[global])),
    <<"OnYLaaaaaayaaaaaaaaaaaaYaeLaaaaaaRpaaaaaaBh">> = iolist_to_binary(re:replace("aaaaaa","(?|(aaa)|(b))(?1)","OnYL&y&\\1\\1YaeL&Rp&Bh",[])),
    <<"OnYLaaaaaayaaaaaaaaaaaaYaeLaaaaaaRpaaaaaaBh">> = iolist_to_binary(re:replace("aaaaaa","(?|(aaa)|(b))(?1)","OnYL&y&\\1\\1YaeL&Rp&Bh",[global])),
    <<"oeobbaaa">> = iolist_to_binary(re:replace("baaa","(?|(aaa)|(b))(?1)","oeob&",[])),
    <<"oeobbaaa">> = iolist_to_binary(re:replace("baaa","(?|(aaa)|(b))(?1)","oeob&",[global])),
    <<"bb">> = iolist_to_binary(re:replace("bb","(?|(aaa)|(b))(?1)","axGk&GcWn",[])),
    <<"bb">> = iolist_to_binary(re:replace("bb","(?|(aaa)|(b))(?1)","axGk&GcWn",[global])),
    <<"xlCaaa">> = iolist_to_binary(re:replace("xaaa","(?|(aaa)|(b))","lC\\1",[])),
    <<"xlCaaa">> = iolist_to_binary(re:replace("xaaa","(?|(aaa)|(b))","lC\\1",[global])),
    <<"xbRbYbpbbbRbdHcFNHbvbc">> = iolist_to_binary(re:replace("xbc","(?|(aaa)|(b))","\\1RbYbp\\1&\\1R\\1dHcFNH&v\\1",[])),
    <<"xbRbYbpbbbRbdHcFNHbvbc">> = iolist_to_binary(re:replace("xbc","(?|(aaa)|(b))","\\1RbYbp\\1&\\1R\\1dHcFNH&v\\1",[global])),
    <<"CaaaaaaaaaLrSNg">> = iolist_to_binary(re:replace("aaaaaa","(?|(?'a'aaa)|(?'a'b))\\k'a'","C\\1&LrSNg",[])),
    <<"CaaaaaaaaaLrSNg">> = iolist_to_binary(re:replace("aaaaaa","(?|(?'a'aaa)|(?'a'b))\\k'a'","C\\1&LrSNg",[global])),
    <<"nLsXq">> = iolist_to_binary(re:replace("bb","(?|(?'a'aaa)|(?'a'b))\\k'a'","nLsXq",[])),
    <<"nLsXq">> = iolist_to_binary(re:replace("bb","(?|(?'a'aaa)|(?'a'b))\\k'a'","nLsXq",[global])),
    <<"acKXKkIbJADNy">> = iolist_to_binary(re:replace("acX","(?<=a(B){0}c)X","K&KkIb\\1J\\1ADN\\1y",[])),
    <<"acKXKkIbJADNy">> = iolist_to_binary(re:replace("acX","(?<=a(B){0}c)X","K&KkIb\\1J\\1ADN\\1y",[global])),
    <<"ugbb">> = iolist_to_binary(re:replace("bbbb","(?<DEFINE>b)(?(DEFINE)(a+))(?&DEFINE)","ug",[])),
    <<"ugug">> = iolist_to_binary(re:replace("bbbb","(?<DEFINE>b)(?(DEFINE)(a+))(?&DEFINE)","ug",[global])),
    <<"baaab">> = iolist_to_binary(re:replace("baaab","(?<DEFINE>b)(?(DEFINE)(a+))(?&DEFINE)","IByJwJUuLMj",[])),
    <<"baaab">> = iolist_to_binary(re:replace("baaab","(?<DEFINE>b)(?(DEFINE)(a+))(?&DEFINE)","IByJwJUuLMj",[global])),
    <<"   VPSbCdQCLByFred:099">> = iolist_to_binary(re:replace("   Fred:099","(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[,;:])(?=.{8,16})(?!.*[\\s])","VPS\\1&\\1bC&dQC&L&By",[])),
    <<"   VPSbCdQCLByFred:099">> = iolist_to_binary(re:replace("   Fred:099","(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[,;:])(?=.{8,16})(?!.*[\\s])","VPS\\1&\\1bC&dQC&L&By",[global])),
    <<"  yfgfEXSPbNXHn">> = iolist_to_binary(re:replace("  X","(?=.*X)X$","y\\1fgfEXSPbN&Hn",[])),
    <<"  yfgfEXSPbNXHn">> = iolist_to_binary(re:replace("  X","(?=.*X)X$","y\\1fgfEXSPbN&Hn",[global])),
    <<"aajtviCHbbc">> = iolist_to_binary(re:replace("aabc","(?s)(?=.*?)b","jtvi\\1CH&b",[])),
    <<"aajtviCHbbc">> = iolist_to_binary(re:replace("aabc","(?s)(?=.*?)b","jtvi\\1CH&b",[global])),
    <<"ufawxHZaAAZX">> = iolist_to_binary(re:replace("ZaAAZX","(Z)(a)\\2{1,2}?(?-i)\\1X","ufawxH&",[caseless])),
    <<"ufawxHZaAAZX">> = iolist_to_binary(re:replace("ZaAAZX","(Z)(a)\\2{1,2}?(?-i)\\1X","ufawxH&",[caseless,global])),
    <<"kJiQ">> = iolist_to_binary(re:replace("s09-H","[s[:digit:]\\E-H]+","kJi\\1Q",[])),
    <<"kJiQ">> = iolist_to_binary(re:replace("s09-H","[s[:digit:]\\E-H]+","kJi\\1Q",[global])),
    <<"JMtjs09-HSuujXYqQqQYj">> = iolist_to_binary(re:replace("s09-H","[s[:digit:]\\Q\\E-H]+","JMtj&Suu\\1jXYqQqQYj",[])),
    <<"JMtjs09-HSuujXYqQqQYj">> = iolist_to_binary(re:replace("s09-H","[s[:digit:]\\Q\\E-H]+","JMtj&Suu\\1jXYqQqQYj",[global])),
    <<"TQaylT">> = iolist_to_binary(re:replace("aaaa","a+(?:|b)a","T\\1Qayl\\1T",[])),
    <<"TQaylT">> = iolist_to_binary(re:replace("aaaa","a+(?:|b)a","T\\1Qayl\\1T",[global])),
    <<"lxmLDk">> = iolist_to_binary(re:replace("ABD","(?1)(A(*COMMIT)|B)D","lxmLDk",[])),
    <<"lxmLDk">> = iolist_to_binary(re:replace("ABD","(?1)(A(*COMMIT)|B)D","lxmLDk",[global])),
    <<"XaFfF">> = iolist_to_binary(re:replace("XABD","(?1)(A(*COMMIT)|B)D","aFfF",[])),
    <<"XaFfF">> = iolist_to_binary(re:replace("XABD","(?1)(A(*COMMIT)|B)D","aFfF",[global])),
    <<"QEtPABADAOwM">> = iolist_to_binary(re:replace("BAD","(?1)(A(*COMMIT)|B)D","QEtPA&\\1OwM",[])),
    <<"QEtPABADAOwM">> = iolist_to_binary(re:replace("BAD","(?1)(A(*COMMIT)|B)D","QEtPA&\\1OwM",[global])),
    <<"ABXSmAoeEyBABDbwguE">> = iolist_to_binary(re:replace("ABXABD","(?1)(A(*COMMIT)|B)D","SmAoeEyB&bwguE",[])),
    <<"ABXSmAoeEyBABDbwguE">> = iolist_to_binary(re:replace("ABXABD","(?1)(A(*COMMIT)|B)D","SmAoeEyB&bwguE",[global])),
    <<"ABX">> = iolist_to_binary(re:replace("ABX","(?1)(A(*COMMIT)|B)D","U&x&afp",[])),
    <<"ABX">> = iolist_to_binary(re:replace("ABX","(?1)(A(*COMMIT)|B)D","U&x&afp",[global])),
    <<"H123123d123123reQQQkMYO">> = iolist_to_binary(re:replace("123","(?(DEFINE)(?<m> 1? (?=(?<cond>2)?) 1 2 (?('cond')|3)))
    \\A
    ()
    (?&m)
    \\Z","H&&\\1d&&\\1reQQQkMYO\\1",[extended])),
    <<"H123123d123123reQQQkMYO">> = iolist_to_binary(re:replace("123","(?(DEFINE)(?<m> 1? (?=(?<cond>2)?) 1 2 (?('cond')|3)))
    \\A
    ()
    (?&m)
    \\Z","H&&\\1d&&\\1reQQQkMYO\\1",[extended,global])),
    <<"bRpsdEAZ123ZGFIG123PlQJ123JvL">> = iolist_to_binary(re:replace("AZ123Z","^(?: 
(?: A| (1? (?=(?<cond>2)?) (1) 2 (?('cond')|3)) )
(Z)
)+$","bRpsdE&GFIG\\1PlQJ\\1JvL",[extended])),
    <<"bRpsdEAZ123ZGFIG123PlQJ123JvL">> = iolist_to_binary(re:replace("AZ123Z","^(?: 
(?: A| (1? (?=(?<cond>2)?) (1) 2 (?('cond')|3)) )
(Z)
)+$","bRpsdE&GFIG\\1PlQJ\\1JvL",[extended,global])),
    <<"AZ12Z">> = iolist_to_binary(re:replace("AZ12Z","^(?: 
(?: A| (1? (?=(?<cond>2)?) (1) 2 (?('cond')|3)) )
(Z)
)+$","TEN&fs\\1AcOopKHNR&j",[extended])),
    <<"AZ12Z">> = iolist_to_binary(re:replace("AZ12Z","^(?: 
(?: A| (1? (?=(?<cond>2)?) (1) 2 (?('cond')|3)) )
(Z)
)+$","TEN&fs\\1AcOopKHNR&j",[extended,global])),
    ok.
run54() ->
    <<"mRufNYPacWdWMDb">> = iolist_to_binary(re:replace("acb","^ (?(DEFINE) ( (?!(a)\\2b)..) )   ()(?1)  ","mRufNYP&WdWMD",[extended])),
    <<"mRufNYPacWdWMDb">> = iolist_to_binary(re:replace("acb","^ (?(DEFINE) ( (?!(a)\\2b)..) )   ()(?1)  ","mRufNYP&WdWMD",[extended,global])),
    <<"aab">> = iolist_to_binary(re:replace("aab","^ (?(DEFINE) ( (?!(a)\\2b)..) )   ()(?1)  ","TFR&fH\\1Tv\\1EuMCNthKV",[extended])),
    <<"aab">> = iolist_to_binary(re:replace("aab","^ (?(DEFINE) ( (?!(a)\\2b)..) )   ()(?1)  ","TFR&fH\\1Tv\\1EuMCNthKV",[extended,global])),
    <<"ababababababtkFkuQ">> = iolist_to_binary(re:replace("abababababababababababM","(?>ab|abab){1,5}?M","tk\\1FkuQ",[])),
    <<"ababababababtkFkuQ">> = iolist_to_binary(re:replace("abababababababababababM","(?>ab|abab){1,5}?M","tk\\1FkuQ",[global])),
    <<"abkdPEKSAALababMxu">> = iolist_to_binary(re:replace("abababM","(?>ab|abab){2}?M","kd\\1PEKSAAL&xu",[])),
    <<"abkdPEKSAALababMxu">> = iolist_to_binary(re:replace("abababM","(?>ab|abab){2}?M","kd\\1PEKSAAL&xu",[global])),
    <<"bbLf">> = iolist_to_binary(re:replace("bbak","((?(?=(a))a)+k)","Lf",[])),
    <<"bbLf">> = iolist_to_binary(re:replace("bbak","((?(?=(a))a)+k)","Lf",[global])),
    <<"bboakFjakgULdV">> = iolist_to_binary(re:replace("bbak","((?(?=(a))a|)+k)","o\\1Fj\\1gULdV",[])),
    <<"bboakFjakgULdV">> = iolist_to_binary(re:replace("bbak","((?(?=(a))a|)+k)","o\\1Fj\\1gULdV",[global])),
    <<"ababbalbbadvpc">> = iolist_to_binary(re:replace("ababbalbbadabak","(?(?!(b))a|b)+k","vpc",[])),
    <<"ababbalbbadvpc">> = iolist_to_binary(re:replace("ababbalbbadabak","(?(?!(b))a|b)+k","vpc",[global])),
    <<"ABl">> = iolist_to_binary(re:replace("Ab","(?!(b))c|b","Bl",[])),
    <<"ABl">> = iolist_to_binary(re:replace("Ab","(?!(b))c|b","Bl",[global])),
    <<"ApWcFBWdWwcnp">> = iolist_to_binary(re:replace("Ac","(?!(b))c|b","pW\\1&FBWdWw&np",[])),
    <<"ApWcFBWdWwcnp">> = iolist_to_binary(re:replace("Ac","(?!(b))c|b","pW\\1&FBWdWw&np",[global])),
    <<"AbGTbnbbYlwcbc">> = iolist_to_binary(re:replace("Ab","(?=(b))b|c","\\1GT\\1n&\\1Ylwc\\1c",[])),
    <<"AbGTbnbbYlwcbc">> = iolist_to_binary(re:replace("Ab","(?=(b))b|c","\\1GT\\1n&\\1Ylwc\\1c",[global])),
    <<"AknydJYg">> = iolist_to_binary(re:replace("Ac","(?=(b))b|c","knydJYg\\1",[])),
    <<"AknydJYg">> = iolist_to_binary(re:replace("Ac","(?=(b))b|c","knydJYg\\1",[global])),
    <<"BY">> = iolist_to_binary(re:replace("a","^(.|(.)(?1)\\2)$","BY",[])),
    <<"BY">> = iolist_to_binary(re:replace("a","^(.|(.)(?1)\\2)$","BY",[global])),
    <<"abaWnuGAPabaRVIbabaabagaba">> = iolist_to_binary(re:replace("aba","^(.|(.)(?1)\\2)$","&WnuGAP&RVIb\\1&g&",[])),
    <<"abaWnuGAPabaRVIbabaabagaba">> = iolist_to_binary(re:replace("aba","^(.|(.)(?1)\\2)$","&WnuGAP&RVIb\\1&g&",[global])),
    <<"abcbabOabcbagw">> = iolist_to_binary(re:replace("abcba","^(.|(.)(?1)\\2)$","\\1bO&gw",[])),
    <<"abcbabOabcbagw">> = iolist_to_binary(re:replace("abcba","^(.|(.)(?1)\\2)$","\\1bO&gw",[global])),
    <<"vfWlFqvTQcSsMBue">> = iolist_to_binary(re:replace("ababa","^(.|(.)(?1)\\2)$","vfWlFqvTQcSsMBue",[])),
    <<"vfWlFqvTQcSsMBue">> = iolist_to_binary(re:replace("ababa","^(.|(.)(?1)\\2)$","vfWlFqvTQcSsMBue",[global])),
    <<"gcD">> = iolist_to_binary(re:replace("abcdcba","^(.|(.)(?1)\\2)$","gcD",[])),
    <<"gcD">> = iolist_to_binary(re:replace("abcdcba","^(.|(.)(?1)\\2)$","gcD",[global])),
    <<"AXarLumLDPdeahs">> = iolist_to_binary(re:replace("a","^((.)(?1)\\2|.?)$","AX\\1rLumLDPde&hs",[])),
    <<"AXarLumLDPdeahs">> = iolist_to_binary(re:replace("a","^((.)(?1)\\2|.?)$","AX\\1rLumLDPde&hs",[global])),
    <<"GbIoTYfSk">> = iolist_to_binary(re:replace("aba","^((.)(?1)\\2|.?)$","GbIoTYfSk",[])),
    <<"GbIoTYfSk">> = iolist_to_binary(re:replace("aba","^((.)(?1)\\2|.?)$","GbIoTYfSk",[global])),
    <<"XIWabbaphpabbaDabbaabbauKhDBabbafhy">> = iolist_to_binary(re:replace("abba","^((.)(?1)\\2|.?)$","XIW&php\\1D&&uKhDB\\1fhy",[])),
    <<"XIWabbaphpabbaDabbaabbauKhDBabbafhy">> = iolist_to_binary(re:replace("abba","^((.)(?1)\\2|.?)$","XIW&php\\1D&&uKhDB\\1fhy",[global])),
    <<"eqYabcbaDrabcbaluTHwQ">> = iolist_to_binary(re:replace("abcba","^((.)(?1)\\2|.?)$","eqY\\1Dr\\1luTHwQ",[])),
    <<"eqYabcbaDrabcbaluTHwQ">> = iolist_to_binary(re:replace("abcba","^((.)(?1)\\2|.?)$","eqY\\1Dr\\1luTHwQ",[global])),
    <<"DCSsYSA">> = iolist_to_binary(re:replace("ababa","^((.)(?1)\\2|.?)$","DCSsYSA",[])),
    <<"DCSsYSA">> = iolist_to_binary(re:replace("ababa","^((.)(?1)\\2|.?)$","DCSsYSA",[global])),
    <<"sXOEXqrabccbaNLjeIpAFEqS">> = iolist_to_binary(re:replace("abccba","^((.)(?1)\\2|.?)$","sXOEXqr\\1NLjeIpAFEqS",[])),
    <<"sXOEXqrabccbaNLjeIpAFEqS">> = iolist_to_binary(re:replace("abccba","^((.)(?1)\\2|.?)$","sXOEXqr\\1NLjeIpAFEqS",[global])),
    <<"RhGabcdcbaSVJRvrSbFfks">> = iolist_to_binary(re:replace("abcdcba","^((.)(?1)\\2|.?)$","RhG&SVJRvrSbFfks",[])),
    <<"RhGabcdcbaSVJRvrSbFfks">> = iolist_to_binary(re:replace("abcdcba","^((.)(?1)\\2|.?)$","RhG&SVJRvrSbFfks",[global])),
    <<"VMSsQqabcddcbax">> = iolist_to_binary(re:replace("abcddcba","^((.)(?1)\\2|.?)$","VMSsQq&x",[])),
    <<"VMSsQqabcddcbax">> = iolist_to_binary(re:replace("abcddcba","^((.)(?1)\\2|.?)$","VMSsQq&x",[global])),
    <<"IbabofEGKbgkbaby">> = iolist_to_binary(re:replace("bab","^(.)(\\1|a(?2))","I&ofEGK\\1gk&y",[])),
    <<"IbabofEGKbgkbaby">> = iolist_to_binary(re:replace("bab","^(.)(\\1|a(?2))","I&ofEGK\\1gk&y",[global])),
    <<"abcbaabcbaRSn">> = iolist_to_binary(re:replace("abcba","^(.|(.)(?1)?\\2)$","\\1&RSn",[])),
    <<"abcbaabcbaRSn">> = iolist_to_binary(re:replace("abcba","^(.|(.)(?1)?\\2)$","\\1&RSn",[global])),
    <<"kaOQDaBCniDmabcX">> = iolist_to_binary(re:replace("abc","^(?(?=(a))abc|def)","k\\1OQD\\1BCniDm&X",[])),
    <<"kaOQDaBCniDmabcX">> = iolist_to_binary(re:replace("abc","^(?(?=(a))abc|def)","k\\1OQD\\1BCniDm&X",[global])),
    <<"DxcDd">> = iolist_to_binary(re:replace("abc","^(?(?!(a))def|abc)","DxcDd",[])),
    <<"DxcDd">> = iolist_to_binary(re:replace("abc","^(?(?!(a))def|abc)","DxcDd",[global])),
    <<"VTtmaabcqWBwHabcTFG">> = iolist_to_binary(re:replace("abc","^(?(?=(a)(*ACCEPT))abc|def)","VTtm\\1&qWBwH&TFG",[])),
    <<"VTtmaabcqWBwHabcTFG">> = iolist_to_binary(re:replace("abc","^(?(?=(a)(*ACCEPT))abc|def)","VTtm\\1&qWBwH&TFG",[global])),
    <<"cVqmxH">> = iolist_to_binary(re:replace("abc","^(?(?!(a)(*ACCEPT))def|abc)","cVqmxH",[])),
    <<"cVqmxH">> = iolist_to_binary(re:replace("abc","^(?(?!(a)(*ACCEPT))def|abc)","cVqmxH",[global])),
    <<"VPevbaIl">> = iolist_to_binary(re:replace("a123a","^(?1)\\d{3}(a)","VPevb\\1Il",[])),
    <<"VPevbaIl">> = iolist_to_binary(re:replace("a123a","^(?1)\\d{3}(a)","VPevb\\1Il",[global])),
    <<"Alan Other <user.ain>">> = iolist_to_binary(re:replace("Alan Other <user.ain>","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","\\1KCKqqqW&OhQmC&c",[])),
    <<"Alan Other <user.ain>">> = iolist_to_binary(re:replace("Alan Other <user.ain>","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","\\1KCKqqqW&OhQmC&c",[global])),
    <<"<user.ain>">> = iolist_to_binary(re:replace("<user.ain>","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","\\1\\1AofrA\\1",[])),
    <<"<user.ain>">> = iolist_to_binary(re:replace("<user.ain>","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","\\1\\1AofrA\\1",[global])),
    <<"user.ain">> = iolist_to_binary(re:replace("user.ain","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","YU&W&&&br&b&&T\\1&",[])),
    <<"user.ain">> = iolist_to_binary(re:replace("user.ain","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","YU&W&&&br&b&&T\\1&",[global])),
    <<"yluser@[]lrGgeOFdq">> = iolist_to_binary(re:replace("user@[]","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","yl&lrGgeOFdq",[])),
    <<"yluser@[]lrGgeOFdq">> = iolist_to_binary(re:replace("user@[]","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","yl&lrGgeOFdq",[global])),
    <<"RVQuser@[domain literal]nWTFmuu">> = iolist_to_binary(re:replace("user@[domain literal]","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","RVQ&nWTFmuu",[])),
    <<"RVQuser@[domain literal]nWTFmuu">> = iolist_to_binary(re:replace("user@[domain literal]","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","RVQ&nWTFmuu",[global])),
    <<"Ssuser@[domain literal with \"[square brackets\"] inside]nuser@[domain literal with \"[square brackets\"] inside]jAuser@[domain literal with \"[square brackets\"] inside]WrFxNxT">> = iolist_to_binary(re:replace("user@[domain literal with \"[square brackets\"] inside]","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","Ss&n&jA&WrFx\\1NxT\\1",[])),
    <<"Ssuser@[domain literal with \"[square brackets\"] inside]nuser@[domain literal with \"[square brackets\"] inside]jAuser@[domain literal with \"[square brackets\"] inside]WrFxNxT">> = iolist_to_binary(re:replace("user@[domain literal with \"[square brackets\"] inside]","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","Ss&n&jA&WrFx\\1NxT\\1",[global])),
    <<"\"A. Other\" <user.1234.ain> (a comment)">> = iolist_to_binary(re:replace("\"A. Other\" <user.1234.ain> (a comment)","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","oyk\\1GJTnwyJ",[])),
    <<"\"A. Other\" <user.1234.ain> (a comment)">> = iolist_to_binary(re:replace("\"A. Other\" <user.1234.ain> (a comment)","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","oyk\\1GJTnwyJ",[global])),
    <<"A. Other <user.1234.ain> (a comment)">> = iolist_to_binary(re:replace("A. Other <user.1234.ain> (a comment)","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","r\\1P",[])),
    <<"A. Other <user.1234.ain> (a comment)">> = iolist_to_binary(re:replace("A. Other <user.1234.ain> (a comment)","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","r\\1P",[global])),
    <<"\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"-re.lay">> = iolist_to_binary(re:replace("\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"-re.lay","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","mVY\\1&iTtvcE",[])),
    <<"\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"-re.lay">> = iolist_to_binary(re:replace("\"/s=user/ou=host/o=place/prmd=uu.yy/admd= /c=gb/\"-re.lay","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","mVY\\1&iTtvcE",[global])),
    <<"A missing angle <user.where">> = iolist_to_binary(re:replace("A missing angle <user.where","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","L&ssxlIODj&n\\1\\1ukQ",[])),
    <<"A missing angle <user.where">> = iolist_to_binary(re:replace("A missing angle <user.where","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","L&ssxlIODj&n\\1\\1ukQ",[global])),
    <<"The quick brown fox">> = iolist_to_binary(re:replace("The quick brown fox","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","aPbcQm&Yu",[])),
    <<"The quick brown fox">> = iolist_to_binary(re:replace("The quick brown fox","(?ix)(?(DEFINE)
(?<addr_spec>       (?&local_part) \\@ (?&domain) )
(?<angle_addr>      (?&CFWS)?+ < (?&addr_spec) > (?&CFWS)?+ )
(?<atext>           [a-z\\d!#\\$%&'*+-\\x{2f}=?^_`{|}~] )
(?<atom>            (?&CFWS)?+ (?&atext)+ (?&CFWS)?+ )
(?<ccontent>        (?&ctext) | (?&quoted_pair) | (?&comment) )
(?<ctext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ ()\\\\] )
(?<comment>         \\( (?: (?&FWS)?+ (?&ccontent) )*+ (?&FWS)?+ \\) )
(?<CFWS>            (?: (?&FWS)?+ (?&comment) )* (?# NOT possessive)
                    (?: (?&FWS)?+ (?&comment) | (?&FWS) ) )
(?<dcontent>        (?&dtext) | (?&quoted_pair) )
(?<display_name>    (?&phrase) )
(?<domain>          (?&dot_atom) | (?&domain_literal) )
(?<domain_literal>  (?&CFWS)?+ \\[ (?: (?&FWS)?+ (?&dcontent) )* (?&FWS)?+ \\]
                    (?&CFWS)?+ )
(?<dot_atom>        (?&CFWS)?+ (?&dot_atom_text) (?&CFWS)?+ )
(?<dot_atom_text>   (?&atext)++ (?: \\. (?&atext)++)*+ )
(?<dtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \\[\\]\\\\] )
(?<FWS>             (?: [\\t\\ ]*+ \\n)?+ [\\t\\ ]++ )
(?<local_part>      (?&dot_atom) | (?&quoted_string)  )
(?<mailbox>         (?&name_addr) | (?&addr_spec) )
(?<name_addr>       (?&display_name)? (?&angle_addr) )
(?<phrase>          (?&word)++ )
(?<qcontent>        (?&qtext) | (?&quoted_pair) )
(?<quoted_pair>     \" (?&text) )
(?<quoted_string>   (?&CFWS)?+ \" (?: (?&FWS)?+ (?&qcontent))* (?&FWS)?+ \"
                    (?&CFWS)?+ )
(?<qtext>           [^\\x{9}\\x{10}\\x{13}\\x{7f}-\\x{ff}\\ \"\\\\] )
(?<text>            [^\\r\\n] )
(?<word>            (?&atom) | (?&quoted_string) )
) # End DEFINE
^(?&mailbox)$","aPbcQm&Yu",[global])),
    <<"< >">> = iolist_to_binary(re:replace("< >","<(?xxx:[a b])>","G\\1q&",[])),
    <<"< >">> = iolist_to_binary(re:replace("< >","<(?xxx:[a b])>","G\\1q&",[global])),
    <<"12-24jQnJbi12-24tUxBujcSC">> = iolist_to_binary(re:replace("12-24","[[:digit:]-]+","&jQnJbi&tUxBujcSC",[])),
    <<"12-24jQnJbi12-24tUxBujcSC">> = iolist_to_binary(re:replace("12-24","[[:digit:]-]+","&jQnJbi&tUxBujcSC",[global])),
    ok.
run55() ->
    <<"((?<=((*ACCEPT)) )\\1?\\b) ">> = iolist_to_binary(re:replace("((?<=((*ACCEPT)) )\\1?\\b) ","((?<=((*ACCEPT)) )\\1?\\b) ","DNWp&\\1",[])),
    <<"((?<=((*ACCEPT)) )\\1?\\b) ">> = iolist_to_binary(re:replace("((?<=((*ACCEPT)) )\\1?\\b) ","((?<=((*ACCEPT)) )\\1?\\b) ","DNWp&\\1",[global])),
    <<"XFYYUCYYjUSvYYbLskbVFDSRZ">> = iolist_to_binary(re:replace("XYYZ","((?<=((*ACCEPT))X)\\1?Y)\\1","F&UC&jUSv&bLskbVFDSR",[])),
    <<"XFYYUCYYjUSvYYbLskbVFDSRZ">> = iolist_to_binary(re:replace("XYYZ","((?<=((*ACCEPT))X)\\1?Y)\\1","F&UC&jUSv&bLskbVFDSR",[global])),
    <<"XxYZ">> = iolist_to_binary(re:replace("XYYZ","((?<=((*ACCEPT))X)\\1?Y(*ACCEPT))\\1","x",[])),
    <<"XxxZ">> = iolist_to_binary(re:replace("XYYZ","((?<=((*ACCEPT))X)\\1?Y(*ACCEPT))\\1","x",[global])),
    <<"uvwVXaa">> = iolist_to_binary(re:replace("aa","(?(DEFINE)(?<optional_a>a?)X)^(?&optional_a)a$","uv\\1wVX\\1&",[])),
    <<"uvwVXaa">> = iolist_to_binary(re:replace("aa","(?(DEFINE)(?<optional_a>a?)X)^(?&optional_a)a$","uv\\1wVX\\1&",[global])),
    <<"aXqaqcahUB">> = iolist_to_binary(re:replace("a","(?(DEFINE)(?<optional_a>a?)X)^(?&optional_a)a$","aXq&qc&hUB",[])),
    <<"aXqaqcahUB">> = iolist_to_binary(re:replace("a","(?(DEFINE)(?<optional_a>a?)X)^(?&optional_a)a$","aXq&qc&hUB",[global])),
    <<"abaadaBabaaXbaefaOwsSNUSdK">> = iolist_to_binary(re:replace("abaa","^(a?)b(?1)a","&d\\1B&Xb\\1ef\\1OwsSNUSdK",[])),
    <<"abaadaBabaaXbaefaOwsSNUSdK">> = iolist_to_binary(re:replace("abaa","^(a?)b(?1)a","&d\\1B&Xb\\1ef\\1OwsSNUSdK",[global])),
    <<"YRabaaaVaajPdaajabamabaKMm">> = iolist_to_binary(re:replace("aba","^(a?)b(?1)a","YR&\\1aV\\1\\1jPd\\1\\1j&m&KMm",[])),
    <<"YRabaaaVaajPdaajabamabaKMm">> = iolist_to_binary(re:replace("aba","^(a?)b(?1)a","YR&\\1aV\\1\\1jPd\\1\\1j&m&KMm",[global])),
    <<"CKJwaLFbaaMsbaaLr">> = iolist_to_binary(re:replace("baa","^(a?)b(?1)a","CKJwaLF&Ms&\\1\\1Lr",[])),
    <<"CKJwaLFbaaMsbaaLr">> = iolist_to_binary(re:replace("baa","^(a?)b(?1)a","CKJwaLF&Ms&\\1\\1Lr",[global])),
    <<"eMVQRJEebaVBfXba">> = iolist_to_binary(re:replace("ba","^(a?)b(?1)a","e\\1MVQRJEe&V\\1BfX&",[])),
    <<"eMVQRJEebaVBfXba">> = iolist_to_binary(re:replace("ba","^(a?)b(?1)a","e\\1MVQRJEe&V\\1BfX&",[global])),
    <<"MkJwuACGqDMabaaaUnx">> = iolist_to_binary(re:replace("abaa","^(a?)+b(?1)a","M\\1kJwuACGqDM\\1&aUnx",[])),
    <<"MkJwuACGqDMabaaaUnx">> = iolist_to_binary(re:replace("abaa","^(a?)+b(?1)a","M\\1kJwuACGqDM\\1&aUnx",[global])),
    <<"h">> = iolist_to_binary(re:replace("aba","^(a?)+b(?1)a","h",[])),
    <<"h">> = iolist_to_binary(re:replace("aba","^(a?)+b(?1)a","h",[global])),
    <<"RCbaaBnbaabaanS">> = iolist_to_binary(re:replace("baa","^(a?)+b(?1)a","RC&Bn&\\1\\1&nS",[])),
    <<"RCbaaBnbaabaanS">> = iolist_to_binary(re:replace("baa","^(a?)+b(?1)a","RC&Bn&\\1\\1&nS",[global])),
    <<"abagbabaxOODdgKqbaOJ">> = iolist_to_binary(re:replace("ba","^(a?)+b(?1)a","a\\1&g&&xOODd\\1g\\1Kq&\\1OJ",[])),
    <<"abagbabaxOODdgKqbaOJ">> = iolist_to_binary(re:replace("ba","^(a?)+b(?1)a","a\\1&g&&xOODd\\1g\\1Kq&\\1OJ",[global])),
    <<"TsVxnH">> = iolist_to_binary(re:replace("abaa","^(a?)++b(?1)a","TsVxnH\\1",[])),
    <<"TsVxnH">> = iolist_to_binary(re:replace("abaa","^(a?)++b(?1)a","TsVxnH\\1",[global])),
    <<"aknabasabaxIQjWA">> = iolist_to_binary(re:replace("aba","^(a?)++b(?1)a","akn&\\1\\1\\1s\\1&xIQjWA",[])),
    <<"aknabasabaxIQjWA">> = iolist_to_binary(re:replace("aba","^(a?)++b(?1)a","akn&\\1\\1\\1s\\1&xIQjWA",[global])),
    <<"F">> = iolist_to_binary(re:replace("baa","^(a?)++b(?1)a","F",[])),
    <<"F">> = iolist_to_binary(re:replace("baa","^(a?)++b(?1)a","F",[global])),
    <<"bITLsMJKkm">> = iolist_to_binary(re:replace("ba","^(a?)++b(?1)a","bITLs\\1MJKk\\1\\1m",[])),
    <<"bITLsMJKkm">> = iolist_to_binary(re:replace("ba","^(a?)++b(?1)a","bITLs\\1MJKk\\1\\1m",[global])),
    <<"ubIJDMWAKIIbGhn">> = iolist_to_binary(re:replace("b","^(a?)+b","u&IJDM\\1WAKII&G\\1hn",[])),
    <<"ubIJDMWAKIIbGhn">> = iolist_to_binary(re:replace("b","^(a?)+b","u&IJDM\\1WAKII&G\\1hn",[global])),
    <<"KPwyWqtephabcFNSg">> = iolist_to_binary(re:replace("ab","^(a?)+b","KPwy\\1Wqteph&cFN\\1Sg\\1",[])),
    <<"KPwyWqtephabcFNSg">> = iolist_to_binary(re:replace("ab","^(a?)+b","KPwy\\1Wqteph&cFN\\1Sg\\1",[global])),
    <<"HHvvo">> = iolist_to_binary(re:replace("aaab","^(a?)+b","HHvvo",[])),
    <<"HHvvo">> = iolist_to_binary(re:replace("aaab","^(a?)+b","HHvvo",[global])),
    <<"QVIAad">> = iolist_to_binary(re:replace("aab","(?=a+)a(a+)++b","QVIA\\1d",[])),
    <<"QVIAad">> = iolist_to_binary(re:replace("aab","(?=a+)a(a+)++b","QVIA\\1d",[global])),
    <<"qjrOIaanRtGbfbc">> = iolist_to_binary(re:replace("abc","a(?=.(*:X))(*SKIP:X)(*F)|(.)","qjrOI&&nRtGbf",[])),
    <<"qjrOIaanRtGbfqjrOIbbnRtGbfqjrOIccnRtGbf">> = iolist_to_binary(re:replace("abc","a(?=.(*:X))(*SKIP:X)(*F)|(.)","qjrOI&&nRtGbf",[global])),
    <<"wbc">> = iolist_to_binary(re:replace("abc","a(?>(*:X))(*SKIP:X)(*F)|(.)","w",[])),
    <<"www">> = iolist_to_binary(re:replace("abc","a(?>(*:X))(*SKIP:X)(*F)|(.)","w",[global])),
    <<"akeXPouTAhbXevPvyjQTc">> = iolist_to_binary(re:replace("abc","a(?:(*:X))(*SKIP:X)(*F)|(.)","keXPouTAh&XevPvyjQT",[])),
    <<"akeXPouTAhbXevPvyjQTkeXPouTAhcXevPvyjQT">> = iolist_to_binary(re:replace("abc","a(?:(*:X))(*SKIP:X)(*F)|(.)","keXPouTAh&XevPvyjQT",[global])),
    <<"abcRjabcsfrR">> = iolist_to_binary(re:replace("abc","(?>a(*:1))(?>b(*:1))(*SKIP:1)x|.*","&Rj&sfrR",[])),
    <<"abcRjabcsfrRRjsfrR">> = iolist_to_binary(re:replace("abc","(?>a(*:1))(?>b(*:1))(*SKIP:1)x|.*","&Rj&sfrR",[global])),
    <<"prYdoWFMgrcQIUdFSO">> = iolist_to_binary(re:replace("abc","(?>a(*:1))(?>b)(*SKIP:1)x|.*","\\1prYdoWF\\1MgrcQIUdFSO",[])),
    <<"prYdoWFMgrcQIUdFSOprYdoWFMgrcQIUdFSO">> = iolist_to_binary(re:replace("abc","(?>a(*:1))(?>b)(*SKIP:1)x|.*","\\1prYdoWF\\1MgrcQIUdFSO",[global])),
    <<"MOanbyBtGHNaobc">> = iolist_to_binary(re:replace("abc","a(*ACCEPT:X)b","MO&nbyB\\1tGHNao",[])),
    <<"MOanbyBtGHNaobc">> = iolist_to_binary(re:replace("abc","a(*ACCEPT:X)b","MO&nbyB\\1tGHNao",[global])),
    ok.
run56() ->
    <<"yxJFsgWaxyzhb">> = iolist_to_binary(re:replace("axyz","(?=a(*ACCEPT:QQ)bc)axyz","yxJFsgW&hb",[])),
    <<"yxJFsgWaxyzhb">> = iolist_to_binary(re:replace("axyz","(?=a(*ACCEPT:QQ)bc)axyz","yxJFsgW&hb",[global])),
    <<"EmmhYababc">> = iolist_to_binary(re:replace("abc","(?(DEFINE)(a(*ACCEPT:X)))(?1)b","EmmhY&&",[])),
    <<"EmmhYababc">> = iolist_to_binary(re:replace("abc","(?(DEFINE)(a(*ACCEPT:X)))(?1)b","EmmhY&&",[global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","a(*F:X)b","RD",[])),
    <<"abc">> = iolist_to_binary(re:replace("abc","a(*F:X)b","RD",[global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(?(DEFINE)(a(*F:X)))(?1)b","HVPtJ&k\\1\\1h&TDNQ\\1F&",[])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(?(DEFINE)(a(*F:X)))(?1)b","HVPtJ&k\\1\\1h&TDNQ\\1F&",[global])),
    <<"GYWUPwDc">> = iolist_to_binary(re:replace("abc","a(*COMMIT:X)b","GYWUPwD",[])),
    <<"GYWUPwDc">> = iolist_to_binary(re:replace("abc","a(*COMMIT:X)b","GYWUPwD",[global])),
    <<"fEkabrabc">> = iolist_to_binary(re:replace("abc","(?(DEFINE)(a(*COMMIT:X)))(?1)b","f\\1\\1Ek&r\\1\\1&",[])),
    <<"fEkabrabc">> = iolist_to_binary(re:replace("abc","(?(DEFINE)(a(*COMMIT:X)))(?1)b","f\\1\\1Ek&r\\1\\1&",[global])),
    <<"aaaatbdlqoaJUC">> = iolist_to_binary(re:replace("aaaabd","a+(*:Z)b(*COMMIT:X)(*SKIP:Z)c|.*","t&lqoaJUC",[])),
    <<"aaaatbdlqoaJUCtlqoaJUC">> = iolist_to_binary(re:replace("aaaabd","a+(*:Z)b(*COMMIT:X)(*SKIP:Z)c|.*","t&lqoaJUC",[global])),
    <<"aaaabd">> = iolist_to_binary(re:replace("aaaabd","a+(*:Z)b(*COMMIT:X)(*SKIP:X)c|.*","Vh\\1CaWxBWkPj&",[])),
    <<"aaaabd">> = iolist_to_binary(re:replace("aaaabd","a+(*:Z)b(*COMMIT:X)(*SKIP:X)c|.*","Vh\\1CaWxBWkPj&",[global])),
    <<"axabc">> = iolist_to_binary(re:replace("axabc","a(*COMMIT:X)b","keB",[])),
    <<"axabc">> = iolist_to_binary(re:replace("axabc","a(*COMMIT:X)b","keB",[global])),
    <<"aBCDE FhGHyUT">> = iolist_to_binary(re:replace("aBCDE F","(?i)A(?^)B(?^x:C D)(?^i)e f","&hGHyUT",[])),
    <<"aBCDE FhGHyUT">> = iolist_to_binary(re:replace("aBCDE F","(?i)A(?^)B(?^x:C D)(?^i)e f","&hGHyUT",[global])),
    <<"aBCDEF">> = iolist_to_binary(re:replace("aBCDEF","(?i)A(?^)B(?^x:C D)(?^i)e f","\\1\\1&al\\1\\1wRkdRudO\\1gVi",[])),
    <<"aBCDEF">> = iolist_to_binary(re:replace("aBCDEF","(?i)A(?^)B(?^x:C D)(?^i)e f","\\1\\1&al\\1\\1wRkdRudO\\1gVi",[global])),
    <<"AbCDe f">> = iolist_to_binary(re:replace("AbCDe f","(?i)A(?^)B(?^x:C D)(?^i)e f","Bj\\1vlyeNRa\\1kKKd",[])),
    <<"AbCDe f">> = iolist_to_binary(re:replace("AbCDe f","(?i)A(?^)B(?^x:C D)(?^i)e f","Bj\\1vlyeNRa\\1kKKd",[global])),
    <<"abchwEupkeifoobarxyz">> = iolist_to_binary(re:replace("abcfoobarxyz","(*pla:foo).{6}","hwEupk\\1e\\1i&",[])),
    <<"abchwEupkeifoobarxyz">> = iolist_to_binary(re:replace("abcfoobarxyz","(*pla:foo).{6}","hwEupk\\1e\\1i&",[global])),
    <<"abcfooba">> = iolist_to_binary(re:replace("abcfooba","(*pla:foo).{6}","TIskAGiopxb\\1oXHqh",[])),
    <<"abcfooba">> = iolist_to_binary(re:replace("abcfooba","(*pla:foo).{6}","TIskAGiopxb\\1oXHqh",[global])),
    <<"abcfoobarkSiunbmxyz">> = iolist_to_binary(re:replace("abcfoobarxyz","(*positive_lookahead:foo).{6}","&kSi\\1u\\1nbm",[])),
    <<"abcfoobarkSiunbmxyz">> = iolist_to_binary(re:replace("abcfoobarxyz","(*positive_lookahead:foo).{6}","&kSi\\1u\\1nbm",[global])),
    <<"WkCqBltfoobarHiYuyKEbaz">> = iolist_to_binary(re:replace("foobarbaz","(?(*pla:foo).{6}|a..)","W\\1\\1kCqBlt&Hi\\1YuyKE",[])),
    <<"WkCqBltfoobarHiYuyKEbaz">> = iolist_to_binary(re:replace("foobarbaz","(?(*pla:foo).{6}|a..)","W\\1\\1kCqBlt&Hi\\1YuyKE",[global])),
    <<"lBhbKjabcSfoobar">> = iolist_to_binary(re:replace("abcfoobar","(?(*pla:foo).{6}|a..)","l\\1\\1\\1Bhb\\1Kj&S",[])),
    <<"lBhbKjabcSlBhbKjfoobarS">> = iolist_to_binary(re:replace("abcfoobar","(?(*pla:foo).{6}|a..)","l\\1\\1\\1Bhb\\1Kj&S",[global])),
    <<"TnbXLTibaz">> = iolist_to_binary(re:replace("foobarbaz","(?(*positive_lookahead:foo).{6}|a..)","Tn\\1bXLTi\\1",[])),
    <<"TnbXLTibaz">> = iolist_to_binary(re:replace("foobarbaz","(?(*positive_lookahead:foo).{6}|a..)","Tn\\1bXLTi\\1",[global])),
    <<"iSfoobar">> = iolist_to_binary(re:replace("abcfoobar","(?(*positive_lookahead:foo).{6}|a..)","i\\1\\1S",[])),
    <<"iSiS">> = iolist_to_binary(re:replace("abcfoobar","(?(*positive_lookahead:foo).{6}|a..)","i\\1\\1S",[global])),
    <<"abcfooPPMbbarbarnlbarFnbcFteu">> = iolist_to_binary(re:replace("abcfoobar","(*plb:foo)bar","PPMb&&nl&FnbcFteu",[])),
    <<"abcfooPPMbbarbarnlbarFnbcFteu">> = iolist_to_binary(re:replace("abcfoobar","(*plb:foo)bar","PPMb&&nl&FnbcFteu",[global])),
    <<"abcbarfoo">> = iolist_to_binary(re:replace("abcbarfoo","(*plb:foo)bar","V\\1UmuVj",[])),
    <<"abcbarfoo">> = iolist_to_binary(re:replace("abcbarfoo","(*plb:foo)bar","V\\1UmuVj",[global])),
    <<"abcfoofQbarbarjOmbrqfbarAbBVYRO">> = iolist_to_binary(re:replace("abcfoobar","(*positive_lookbehind:foo)bar","fQ&&jOmbrqf&AbBVY\\1RO",[])),
    <<"abcfoofQbarbarjOmbrqfbarAbBVYRO">> = iolist_to_binary(re:replace("abcfoobar","(*positive_lookbehind:foo)bar","fQ&&jOmbrqf&AbBVY\\1RO",[global])),
    <<"abcbarfoo">> = iolist_to_binary(re:replace("abcbarfoo","(*positive_lookbehind:foo)bar","yxxigMcOS&rk",[])),
    <<"abcbarfoo">> = iolist_to_binary(re:replace("abcbarfoo","(*positive_lookbehind:foo)bar","yxxigMcOS&rk",[global])),
    <<"abcfoodxgiHSxbarBeVbarE">> = iolist_to_binary(re:replace("abcfoobar","(?(*plb:foo)bar|baz)","dx\\1giHSx&BeV&E",[])),
    <<"abcfoodxgiHSxbarBeVbarE">> = iolist_to_binary(re:replace("abcfoobar","(?(*plb:foo)bar|baz)","dx\\1giHSx&BeV&E",[global])),
    <<"DwfbazPJXbazSNfoobar">> = iolist_to_binary(re:replace("bazfoobar","(?(*plb:foo)bar|baz)","Dwf&PJX\\1\\1&SN",[])),
    <<"DwfbazPJXbazSNfooDwfbarPJXbarSN">> = iolist_to_binary(re:replace("bazfoobar","(?(*plb:foo)bar|baz)","Dwf&PJX\\1\\1&SN",[global])),
    <<"abclQfoobar">> = iolist_to_binary(re:replace("abcbazfoobar","(?(*plb:foo)bar|baz)","l\\1Q",[])),
    <<"abclQfoolQ">> = iolist_to_binary(re:replace("abcbazfoobar","(?(*plb:foo)bar|baz)","l\\1Q",[global])),
    <<"foobazfoomytQYMtByQalFhPaqAF">> = iolist_to_binary(re:replace("foobazfoobar","(?(*plb:foo)bar|baz)","\\1mytQYMtByQalFhPaqAF",[])),
    <<"foobazfoomytQYMtByQalFhPaqAF">> = iolist_to_binary(re:replace("foobazfoobar","(?(*plb:foo)bar|baz)","\\1mytQYMtByQalFhPaqAF",[global])),
    ok.
run57() ->
    <<"abcfooJcbartLdoGHtuOHxJ">> = iolist_to_binary(re:replace("abcfoobar","(?(*positive_lookbehind:foo)bar|baz)","Jc&tLdoGHt\\1uOHxJ",[])),
    <<"abcfooJcbartLdoGHtuOHxJ">> = iolist_to_binary(re:replace("abcfoobar","(?(*positive_lookbehind:foo)bar|baz)","Jc&tLdoGHt\\1uOHxJ",[global])),
    <<"jnJTrfoobar">> = iolist_to_binary(re:replace("bazfoobar","(?(*positive_lookbehind:foo)bar|baz)","jnJTr",[])),
    <<"jnJTrfoojnJTr">> = iolist_to_binary(re:replace("bazfoobar","(?(*positive_lookbehind:foo)bar|baz)","jnJTr",[global])),
    <<"abcSSoEgfoobar">> = iolist_to_binary(re:replace("abcbazfoobar","(?(*positive_lookbehind:foo)bar|baz)","SS\\1\\1oE\\1g",[])),
    <<"abcSSoEgfooSSoEg">> = iolist_to_binary(re:replace("abcbazfoobar","(?(*positive_lookbehind:foo)bar|baz)","SS\\1\\1oE\\1g",[global])),
    <<"foobazfooOdJuWtvQ">> = iolist_to_binary(re:replace("foobazfoobar","(?(*positive_lookbehind:foo)bar|baz)","OdJuWtvQ",[])),
    <<"foobazfooOdJuWtvQ">> = iolist_to_binary(re:replace("foobazfoobar","(?(*positive_lookbehind:foo)bar|baz)","OdJuWtvQ",[global])),
    <<"abcuoOBfoo">> = iolist_to_binary(re:replace("abcbarfoo","(*nlb:foo)bar","u\\1oO\\1B\\1\\1",[])),
    <<"abcuoOBfoo">> = iolist_to_binary(re:replace("abcbarfoo","(*nlb:foo)bar","u\\1oO\\1B\\1\\1",[global])),
    <<"abcfoobar">> = iolist_to_binary(re:replace("abcfoobar","(*nlb:foo)bar","\\1UtmYVc\\1&mq\\1fPDm",[])),
    <<"abcfoobar">> = iolist_to_binary(re:replace("abcfoobar","(*nlb:foo)bar","\\1UtmYVc\\1&mq\\1fPDm",[global])),
    <<"abcmgfoo">> = iolist_to_binary(re:replace("abcbarfoo","(*negative_lookbehind:foo)bar","m\\1g",[])),
    <<"abcmgfoo">> = iolist_to_binary(re:replace("abcbarfoo","(*negative_lookbehind:foo)bar","m\\1g",[global])),
    <<"abcfoobar">> = iolist_to_binary(re:replace("abcfoobar","(*negative_lookbehind:foo)bar","P&RwBtwCmc&VfNb\\1\\1s",[])),
    <<"abcfoobar">> = iolist_to_binary(re:replace("abcfoobar","(*negative_lookbehind:foo)bar","P&RwBtwCmc&VfNb\\1\\1s",[global])),
    <<"abcfooaa">> = iolist_to_binary(re:replace("abcfoobaz","(?(*nlb:foo)bar|baz)","a\\1a",[])),
    <<"abcfooaa">> = iolist_to_binary(re:replace("abcfoobaz","(?(*nlb:foo)bar|baz)","a\\1a",[global])),
    <<"abcQVHlseDxWoyVopbaz">> = iolist_to_binary(re:replace("abcbarbaz","(?(*nlb:foo)bar|baz)","QVHlseDxWoyVop",[])),
    <<"abcQVHlseDxWoyVopbaz">> = iolist_to_binary(re:replace("abcbarbaz","(?(*nlb:foo)bar|baz)","QVHlseDxWoyVop",[global])),
    <<"abcfoobar">> = iolist_to_binary(re:replace("abcfoobar","(?(*nlb:foo)bar|baz)","vOE\\1VceUN&",[])),
    <<"abcfoobar">> = iolist_to_binary(re:replace("abcfoobar","(?(*nlb:foo)bar|baz)","vOE\\1VceUN&",[global])),
    <<"abcfooVaQAuDRbazGQKSMbhX">> = iolist_to_binary(re:replace("abcfoobaz","(?(*negative_lookbehind:foo)bar|baz)","VaQAu\\1DR&GQKS\\1MbhX",[])),
    <<"abcfooVaQAuDRbazGQKSMbhX">> = iolist_to_binary(re:replace("abcfoobaz","(?(*negative_lookbehind:foo)bar|baz)","VaQAu\\1DR&GQKS\\1MbhX",[global])),
    <<"abcLbarbaz">> = iolist_to_binary(re:replace("abcbarbaz","(?(*negative_lookbehind:foo)bar|baz)","L\\1&",[])),
    <<"abcLbarbaz">> = iolist_to_binary(re:replace("abcbarbaz","(?(*negative_lookbehind:foo)bar|baz)","L\\1&",[global])),
    <<"abcfoobar">> = iolist_to_binary(re:replace("abcfoobar","(?(*negative_lookbehind:foo)bar|baz)","O\\1",[])),
    <<"abcfoobar">> = iolist_to_binary(re:replace("abcfoobar","(?(*negative_lookbehind:foo)bar|baz)","O\\1",[global])),
    <<"EDLXM">> = iolist_to_binary(re:replace("aaab","(*atomic:a+)\\w","EDLXM",[])),
    <<"EDLXM">> = iolist_to_binary(re:replace("aaab","(*atomic:a+)\\w","EDLXM",[global])),
    <<"aaaa">> = iolist_to_binary(re:replace("aaaa","(*atomic:a+)\\w","K&vfWficUMXYUhCR",[])),
    <<"aaaa">> = iolist_to_binary(re:replace("aaaa","(*atomic:a+)\\w","K&vfWficUMXYUhCR",[global])),
    <<"lVNcLhkqs">> = iolist_to_binary(re:replace("pokus.","   (?<word> \\w+ )*    \\.   ","lVNcLhkqs",[extended,caseless])),
    <<"lVNcLhkqs">> = iolist_to_binary(re:replace("pokus.","   (?<word> \\w+ )*    \\.   ","lVNcLhkqs",[extended,caseless,global])),
    <<"WAysWU">> = iolist_to_binary(re:replace("pokus.","(?(DEFINE) (?<word> \\w+ ) ) (?&word)*   \\.","WA\\1ysWU",[extended,caseless])),
    <<"WAysWU">> = iolist_to_binary(re:replace("pokus.","(?(DEFINE) (?<word> \\w+ ) ) (?&word)*   \\.","WA\\1ysWU",[extended,caseless,global])),
    <<"HvYt">> = iolist_to_binary(re:replace("pokus.","(?(DEFINE) (?<word> \\w+ ) ) ( (?&word)* )   \\.","Hv\\1Yt",[extended,caseless])),
    <<"HvYt">> = iolist_to_binary(re:replace("pokus.","(?(DEFINE) (?<word> \\w+ ) ) ( (?&word)* )   \\.","Hv\\1Yt",[extended,caseless,global])),
    <<"mkEpokus.lOsMTmDx">> = iolist_to_binary(re:replace("pokus.","(?&word)*  (?(DEFINE) (?<word> \\w+ ) )  \\.","mkE&lOsM\\1TmDx",[extended,caseless])),
    <<"mkEpokus.lOsMTmDx">> = iolist_to_binary(re:replace("pokus.","(?&word)*  (?(DEFINE) (?<word> \\w+ ) )  \\.","mkE&lOsM\\1TmDx",[extended,caseless,global])),
    <<"rTnhokusFhwuhokuspokus.hokusOCC">> = iolist_to_binary(re:replace("pokus.hokus","(?&word)*  \\. (?<word> \\w+ )","rTn\\1Fhwu\\1&OCC",[extended,caseless])),
    <<"rTnhokusFhwuhokuspokus.hokusOCC">> = iolist_to_binary(re:replace("pokus.hokus","(?&word)*  \\. (?<word> \\w+ )","rTn\\1Fhwu\\1&OCC",[extended,caseless,global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(?:a|ab){1}+c","WgwMatYijEPVVhET",[])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(?:a|ab){1}+c","WgwMatYijEPVVhET",[global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(a|ab){1}+c","DFl\\1diXfsqAo&gy&&",[])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(a|ab){1}+c","DFl\\1diXfsqAo&gy&&",[global])),
    <<"aaaa">> = iolist_to_binary(re:replace("aaaa","(a+){1}+a","&&LQG\\1\\1PDsB&W\\1qi",[])),
    <<"aaaa">> = iolist_to_binary(re:replace("aaaa","(a+){1}+a","&&LQG\\1\\1PDsB&W\\1qi",[global])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(?(DEFINE)(a|ab))(?1){1}+c","qFvS",[])),
    <<"abc">> = iolist_to_binary(re:replace("abc","(?(DEFINE)(a|ab))(?1){1}+c","qFvS",[global])),
    <<"xduXkuthyKkfDvdGK">> = iolist_to_binary(re:replace("abc","(?:a|(?=b)|.)*\\z","xduXkuthyK\\1kfDvdGK",[])),
    <<"xduXkuthyKkfDvdGKxduXkuthyKkfDvdGK">> = iolist_to_binary(re:replace("abc","(?:a|(?=b)|.)*\\z","xduXkuthyK\\1kfDvdGK",[global])),
    <<"Tbc">> = iolist_to_binary(re:replace("abc","(?:a|(?=b)|.)*","T",[])),
    <<"TTTT">> = iolist_to_binary(re:replace("abc","(?:a|(?=b)|.)*","T",[global])),
    <<"abcd">> = iolist_to_binary(re:replace("abcd","(?<=a(*SKIP)x)|c","tK\\1X\\1ycVaGLc\\1RU\\1&",[])),
    <<"abcd">> = iolist_to_binary(re:replace("abcd","(?<=a(*SKIP)x)|c","tK\\1X\\1ycVaGLc\\1RU\\1&",[global])),
    <<"abciVdkkBjFkdmlfslVAM">> = iolist_to_binary(re:replace("abcd","(?<=a(*SKIP)x)|d","iV&kkBjFk&mlfslVAM",[])),
    <<"abciVdkkBjFkdmlfslVAM">> = iolist_to_binary(re:replace("abcd","(?<=a(*SKIP)x)|d","iV&kkBjFk&mlfslVAM",[global])),
    <<"ao">> = iolist_to_binary(re:replace("ab","(?<=(?=(?<=a)))b","o",[])),
    <<"ao">> = iolist_to_binary(re:replace("ab","(?<=(?=(?<=a)))b","o",[global])),
    ok.
run58() ->
    <<"wLxnFakabcAX">> = iolist_to_binary(re:replace("abc","^(?<A>a)(?(<A>)b)((?<=b).*)$","wLxnF\\1k&AX",[])),
    <<"wLxnFakabcAX">> = iolist_to_binary(re:replace("abc","^(?<A>a)(?(<A>)b)((?<=b).*)$","wLxnF\\1k&AX",[global])),
    <<"RkacioIataaaaT">> = iolist_to_binary(re:replace("aaaa","^(a\\1?){4}$","Rk\\1cioI\\1t&T",[])),
    <<"RkacioIataaaaT">> = iolist_to_binary(re:replace("aaaa","^(a\\1?){4}$","Rk\\1cioI\\1t&T",[global])),
    <<"WSYDaO">> = iolist_to_binary(re:replace("aaaaaa","^(a\\1?){4}$","WSYDaO",[])),
    <<"WSYDaO">> = iolist_to_binary(re:replace("aaaaaa","^(a\\1?){4}$","WSYDaO",[global])),
    <<"WA11111133Xdd11111133XTedlmqyrPY">> = iolist_to_binary(re:replace("111133X","^((\\1+)|\\d)+133X$","WA\\1&dd\\1&TedlmqyrPY",[])),
    <<"WA11111133Xdd11111133XTedlmqyrPY">> = iolist_to_binary(re:replace("111133X","^((\\1+)|\\d)+133X$","WA\\1&dd\\1&TedlmqyrPY",[global])),
    <<"JwThe quick brown fox jumps over the lazy dogtThe quick brown fox jumps over the lazy dogThe quick brown fox jumps over the lazy dogJ.">> = iolist_to_binary(re:replace("The quick brown fox jumps over the lazy dog.","^(?>.*?([A-Z])(?!.*\\1)){26}","Jw&t&&J",[caseless])),
    <<"JwThe quick brown fox jumps over the lazy dogtThe quick brown fox jumps over the lazy dogThe quick brown fox jumps over the lazy dogJ.">> = iolist_to_binary(re:replace("The quick brown fox jumps over the lazy dog.","^(?>.*?([A-Z])(?!.*\\1)){26}","Jw&t&&J",[caseless,global])),
    <<"waezihzCezjEsBaGzR.">> = iolist_to_binary(re:replace("Jackdaws love my big sphinx of quartz.","^(?>.*?([A-Z])(?!.*\\1)){26}","wae\\1ih\\1Ce\\1jEsBaG\\1R",[caseless])),
    <<"waezihzCezjEsBaGzR.">> = iolist_to_binary(re:replace("Jackdaws love my big sphinx of quartz.","^(?>.*?([A-Z])(?!.*\\1)){26}","wae\\1ih\\1Ce\\1jEsBaG\\1R",[caseless,global])),
    <<"vPack my box with five dozen liquor jugssNX.">> = iolist_to_binary(re:replace("Pack my box with five dozen liquor jugs.","^(?>.*?([A-Z])(?!.*\\1)){26}","v&\\1NX",[caseless])),
    <<"vPack my box with five dozen liquor jugssNX.">> = iolist_to_binary(re:replace("Pack my box with five dozen liquor jugs.","^(?>.*?([A-Z])(?!.*\\1)){26}","v&\\1NX",[caseless,global])),
    <<"The quick brown fox jumps over the lazy cat.">> = iolist_to_binary(re:replace("The quick brown fox jumps over the lazy cat.","^(?>.*?([A-Z])(?!.*\\1)){26}","pmNFtwlMXJ\\1wfQ",[caseless])),
    <<"The quick brown fox jumps over the lazy cat.">> = iolist_to_binary(re:replace("The quick brown fox jumps over the lazy cat.","^(?>.*?([A-Z])(?!.*\\1)){26}","pmNFtwlMXJ\\1wfQ",[caseless,global])),
    <<"Hackdaws love my big sphinx of quartz.">> = iolist_to_binary(re:replace("Hackdaws love my big sphinx of quartz.","^(?>.*?([A-Z])(?!.*\\1)){26}","E&nKG",[caseless])),
    <<"Hackdaws love my big sphinx of quartz.">> = iolist_to_binary(re:replace("Hackdaws love my big sphinx of quartz.","^(?>.*?([A-Z])(?!.*\\1)){26}","E&nKG",[caseless,global])),
    <<"Pack my fox with five dozen liquor jugs.">> = iolist_to_binary(re:replace("Pack my fox with five dozen liquor jugs.","^(?>.*?([A-Z])(?!.*\\1)){26}","E\\1mXmY\\1yXMvMP&sIUn&b",[caseless])),
    <<"Pack my fox with five dozen liquor jugs.">> = iolist_to_binary(re:replace("Pack my fox with five dozen liquor jugs.","^(?>.*?([A-Z])(?!.*\\1)){26}","E\\1mXmY\\1yXMvMP&sIUn&b",[caseless,global])),
    <<"AXYZ">> = iolist_to_binary(re:replace("AXYZ","(?<=X(?(DEFINE)(A)))X(*F)","sctyV\\1",[])),
    <<"AXYZ">> = iolist_to_binary(re:replace("AXYZ","(?<=X(?(DEFINE)(A)))X(*F)","sctyV\\1",[global])),
    <<"AXYEYyELepBwYDneZ">> = iolist_to_binary(re:replace("AXYZ","(?<=X(?(DEFINE)(A))).","&E&yE\\1LepBw&Dne",[])),
    <<"AXYEYyELepBwYDneZ">> = iolist_to_binary(re:replace("AXYZ","(?<=X(?(DEFINE)(A))).","&E&yE\\1LepBw&Dne",[global])),
    <<"AXYEnmKFsmZ">> = iolist_to_binary(re:replace("AXYZ","(?<=X(?(DEFINE)(.*))Y).","EnmKFsm&",[])),
    <<"AXYEnmKFsmZ">> = iolist_to_binary(re:replace("AXYZ","(?<=X(?(DEFINE)(.*))Y).","EnmKFsm&",[global])),
    <<"AXYpXGcB">> = iolist_to_binary(re:replace("AXYZ","(?<=X(?(DEFINE)(Y))(?1)).","pXGcB",[])),
    <<"AXYpXGcB">> = iolist_to_binary(re:replace("AXYZ","(?<=X(?(DEFINE)(Y))(?1)).","pXGcB",[global])),
    <<"yqRflvWfdword">> = iolist_to_binary(re:replace("word","(?(DEFINE)(?<foo>bar))(?<![-a-z0-9])word","yqR\\1flvW\\1fd&",[])),
    <<"yqRflvWfdword">> = iolist_to_binary(re:replace("word","(?(DEFINE)(?<foo>bar))(?<![-a-z0-9])word","yqR\\1flvW\\1fd&",[global])),
    <<"caqa{1,2,3}bfAa{1,2,3}bVd">> = iolist_to_binary(re:replace("a{1,2,3}b","a{1,2,3}b","caq&fA&Vd",[])),
    <<"caqa{1,2,3}bfAa{1,2,3}bVd">> = iolist_to_binary(re:replace("a{1,2,3}b","a{1,2,3}b","caq&fA&Vd",[global])),
    <<">BYnSX<">> = iolist_to_binary(re:replace(">748364<","\\214748364","BY\\1nSX",[])),
    <<">BYnSX<">> = iolist_to_binary(re:replace(">748364<","\\214748364","BY\\1nSX",[global])),
    <<">dha{65536<">> = iolist_to_binary(re:replace(">a{65536<","a{65536","d\\1h\\1&",[])),
    <<">dha{65536<">> = iolist_to_binary(re:replace(">a{65536<","a{65536","d\\1h\\1&",[global])),
    <<"abarYJdMtasq">> = iolist_to_binary(re:replace("abac","a\\K.(?0)*","rYJd\\1Mtasq\\1",[])),
    <<"abarYJdMtasq">> = iolist_to_binary(re:replace("abac","a\\K.(?0)*","rYJd\\1Mtasq\\1",[global])),
    <<"abaoabac">> = iolist_to_binary(re:replace("abac","(a\\K.(?1)*)","o\\1",[])),
    <<"abaoabac">> = iolist_to_binary(re:replace("abac","(a\\K.(?1)*)","o\\1",[global])),
    <<"abcWSUNxSjyjPQXxigacxyz">> = iolist_to_binary(re:replace("abcdefgacxyz","(?<=ab?c)...","W\\1SUNxSjyjPQXxi",[])),
    <<"abcWSUNxSjyjPQXxigacWSUNxSjyjPQXxi">> = iolist_to_binary(re:replace("abcdefgacxyz","(?<=ab?c)...","W\\1SUNxSjyjPQXxi",[global])),
    <<"abciFgacxyzPQR123">> = iolist_to_binary(re:replace("abcdefgacxyzPQR123","(?<=PQR|ab?c)...","iF",[])),
    <<"abciFgaciFPQRiF">> = iolist_to_binary(re:replace("abcdefgacxyzPQR123","(?<=PQR|ab?c)...","iF",[global])),
    <<"abcoxdefvpqchdefcfPpHmTCgacxyzPQR123">> = iolist_to_binary(re:replace("abcdefgacxyzPQR123","(?<=ab?c|PQR)...","ox&vpq\\1ch&cfPpHmTC",[])),
    <<"abcoxdefvpqchdefcfPpHmTCgacoxxyzvpqchxyzcfPpHmTCPQRox123vpqch123cfPpHmTC">> = iolist_to_binary(re:replace("abcdefgacxyzPQR123","(?<=ab?c|PQR)...","ox&vpq\\1ch&cfPpHmTC",[global])),
    <<"abcEPsAiuAXGaggacxyzPQR123">> = iolist_to_binary(re:replace("abcdefgacxyzPQR123","(?<=PQ|ab?c)...","EPsAiuAXGag",[])),
    <<"abcEPsAiuAXGaggacEPsAiuAXGagPQEPsAiuAXGag3">> = iolist_to_binary(re:replace("abcdefgacxyzPQR123","(?<=PQ|ab?c)...","EPsAiuAXGag",[global])),
    <<"abciTRKirHaAmudefLgacxyzPQR123">> = iolist_to_binary(re:replace("abcdefgacxyzPQR123","(?<=ab?c|PQ)...","iTR\\1KirHaAm\\1u&L",[])),
    <<"abciTRKirHaAmudefLgaciTRKirHaAmuxyzLPQiTRKirHaAmuR12L3">> = iolist_to_binary(re:replace("abcdefgacxyzPQR123","(?<=ab?c|PQ)...","iTR\\1KirHaAm\\1u&L",[global])),
    <<"acfhopmcccrjzzzaefX2zzzadeefX3zzzX4zzz">> = iolist_to_binary(re:replace("acfX1zzzaefX2zzzadeefX3zzzX4zzz","(?<=a(b?c|d?e?e)f)X.","hopm\\1\\1\\1rj",[])),
    <<"acfhopmcccrjzzzaefhopmeeerjzzzadeefhopmdeedeedeerjzzzX4zzz">> = iolist_to_binary(re:replace("acfX1zzzaefX2zzzadeefX3zzzX4zzz","(?<=a(b?c|d?e?e)f)X.","hopm\\1\\1\\1rj",[global])),
    ok.
run59() ->
    <<"acfX1zzzaefX2zzzadeefX3zzzGX4aHbVyX4X4KVzzz">> = iolist_to_binary(re:replace("acfX1zzzaefX2zzzadeefX3zzzX4zzz","(?<!a(b?c|d?e?e)f)X.","G&aHbV\\1y&\\1&KV\\1\\1",[])),
    <<"acfX1zzzaefX2zzzadeefX3zzzGX4aHbVyX4X4KVzzz">> = iolist_to_binary(re:replace("acfX1zzzaefX2zzzadeefX3zzzX4zzz","(?<!a(b?c|d?e?e)f)X.","G&aHbV\\1y&\\1&KV\\1\\1",[global])),
    <<"abcvJmSlMyqFdTefg">> = iolist_to_binary(re:replace("abcdefg","(?(?<=ab?c)d|e)","vJmS\\1lM\\1yq\\1F&T",[])),
    <<"abcvJmSlMyqFdTvJmSlMyqFeTfg">> = iolist_to_binary(re:replace("abcdefg","(?(?<=ab?c)d|e)","vJmS\\1lM\\1yq\\1F&T",[global])),
    <<"acdROgEefg">> = iolist_to_binary(re:replace("acdefg","(?(?<=ab?c)d|e)","&RO\\1gE",[])),
    <<"acdROgEefg">> = iolist_to_binary(re:replace("acdefg","(?(?<=ab?c)d|e)","&RO\\1gE",[global])),
    <<"axdAVraXfg">> = iolist_to_binary(re:replace("axdefg","(?(?<=ab?c)d|e)","AVraX",[])),
    <<"axdAVraXfg">> = iolist_to_binary(re:replace("axdefg","(?(?<=ab?c)d|e)","AVraX",[global])),
    <<"ABCrftoDgfVofMMeQD">> = iolist_to_binary(re:replace("ABCD","(?<=\\d{2,3}|ABC).","rfto&gfVofMM\\1eQ&",[])),
    <<"ABCrftoDgfVofMMeQD">> = iolist_to_binary(re:replace("ABCD","(?<=\\d{2,3}|ABC).","rfto&gfVofMM\\1eQ&",[global])),
    <<"1234N1234HQVjk">> = iolist_to_binary(re:replace("1234X","(?<=(\\d{1,255}))X","N\\1HQVjk",[])),
    <<"1234N1234HQVjk">> = iolist_to_binary(re:replace("1234X","(?<=(\\d{1,255}))X","N\\1HQVjk",[global])),
    <<"ZXacbccdGLeLtFYccgLpecJfYZ">> = iolist_to_binary(re:replace("ZXacbccdXYZ","(?<=a(b?c){3}d)X","GLeLtFY\\1\\1gLpecJf",[])),
    <<"ZXacbccdGLeLtFYccgLpecJfYZ">> = iolist_to_binary(re:replace("ZXacbccdXYZ","(?<=a(b?c){3}d)X","GLeLtFY\\1\\1gLpecJf",[global])),
    <<"ZXadwcLYZ">> = iolist_to_binary(re:replace("ZXadXYZ","(?<=a(b?c){0}d)X","wcL\\1",[])),
    <<"ZXadwcLYZ">> = iolist_to_binary(re:replace("ZXadXYZ","(?<=a(b?c){0}d)X","wcL\\1",[global])),
    <<"ZXadRUVUoonAhCsbWrFjwfbZ">> = iolist_to_binary(re:replace("ZXadXYZ","(?<=a?(b?c){0}d)X.","RUVUoonAhCsbWrFjwfb",[])),
    <<"ZXadRUVUoonAhCsbWrFjwfbZ">> = iolist_to_binary(re:replace("ZXadXYZ","(?<=a?(b?c){0}d)X.","RUVUoonAhCsbWrFjwfb",[global])),
    <<"
XymEfDGX">> = iolist_to_binary(re:replace("
X","(?<=\\R)X","&ymEfDG&",[])),
    <<"
XymEfDGX">> = iolist_to_binary(re:replace("
X","(?<=\\R)X","&ymEfDG&",[global])),
    <<"a
VWaTi">> = iolist_to_binary(re:replace("a
X","(?<=\\R)X","VWaTi",[])),
    <<"a
VWaTi">> = iolist_to_binary(re:replace("a
X","(?<=\\R)X","VWaTi",[global])),
    <<"a
QYqX">> = iolist_to_binary(re:replace("a
X","(?<=\\R)X","QYq&",[])),
    <<"a
QYqX">> = iolist_to_binary(re:replace("a
X","(?<=\\R)X","QYq&",[global])),
    <<"XCRABGGrABXLfMKFABB">> = iolist_to_binary(re:replace("XBBB","a{,3}B","CRA&G\\1G\\1r\\1A&XLfMKFA",[])),
    <<"XCRABGGrABXLfMKFACRABGGrABXLfMKFACRABGGrABXLfMKFA">> = iolist_to_binary(re:replace("XBBB","a{,3}B","CRA&G\\1G\\1r\\1A&XLfMKFA",[global])),
    <<"XpBB">> = iolist_to_binary(re:replace("XaBBB","a{,3}B","p",[])),
    <<"Xppp">> = iolist_to_binary(re:replace("XaBBB","a{,3}B","p",[global])),
    <<"XavnuwGVQnbaaBMBB">> = iolist_to_binary(re:replace("XaaBBB","a{,3}B","avnuw\\1\\1GVQ\\1nb&M",[])),
    <<"XavnuwGVQnbaaBMavnuwGVQnbBMavnuwGVQnbBM">> = iolist_to_binary(re:replace("XaaBBB","a{,3}B","avnuw\\1\\1GVQ\\1nb&M",[global])),
    <<"XdbJHaaaBQmNvUjBB">> = iolist_to_binary(re:replace("XaaaBBB","a{,3}B","dbJH&QmNvU\\1j",[])),
    <<"XdbJHaaaBQmNvUjdbJHBQmNvUjdbJHBQmNvUj">> = iolist_to_binary(re:replace("XaaaBBB","a{,3}B","dbJH&QmNvU\\1j",[global])),
    <<"XaCjOjBB">> = iolist_to_binary(re:replace("XaaaaBBB","a{,3}B","\\1CjOj",[])),
    <<"XaCjOjCjOjCjOj">> = iolist_to_binary(re:replace("XaaaaBBB","a{,3}B","\\1CjOj",[global])),
    <<"XKpYyerFiCpuOBB">> = iolist_to_binary(re:replace("Xa{,}BBB","a{,}B","KpYyerF\\1iCpuO",[])),
    <<"XKpYyerFiCpuOBB">> = iolist_to_binary(re:replace("Xa{,}BBB","a{,}B","KpYyerF\\1iCpuO",[global])),
    <<"XBBB">> = iolist_to_binary(re:replace("XBBB","a{,}B","YmcadB&nCCREKHHXlMoH",[])),
    <<"XBBB">> = iolist_to_binary(re:replace("XBBB","a{,}B","YmcadB&nCCREKHHXlMoH",[global])),
    <<"XaBBB">> = iolist_to_binary(re:replace("XaBBB","a{,}B","OvTfjYJC\\1XmGdYVUwWCW",[])),
    <<"XaBBB">> = iolist_to_binary(re:replace("XaBBB","a{,}B","OvTfjYJC\\1XmGdYVUwWCW",[global])),
    <<"ZZFDbNbagX{gDbDDd}YY">> = iolist_to_binary(re:replace("ZZX{}YY","X{","FDbNbag&gDbDDd",[])),
    <<"ZZFDbNbagX{gDbDDd}YY">> = iolist_to_binary(re:replace("ZZX{}YY","X{","FDbNbag&gDbDDd",[global])),
    <<"ZZsX{AhjxkMNX{ACQoCXVcBC}">> = iolist_to_binary(re:replace("ZZX{ABC}","X{A","s&hjxkMN&CQoCXVc",[])),
    <<"ZZsX{AhjxkMNX{ACQoCXVcBC}">> = iolist_to_binary(re:replace("ZZX{ABC}","X{A","s&hjxkMN&CQoCXVc",[global])),
    <<"ZZRdrPCVLRX{}ILnYZ">> = iolist_to_binary(re:replace("ZZX{}YZ","X{}","RdrPCVLR&ILn\\1",[])),
    <<"ZZRdrPCVLRX{}ILnYZ">> = iolist_to_binary(re:replace("ZZX{}YZ","X{}","RdrPCVLR&ILn\\1",[global])),
    <<"ZZbKbX{1234X{1234MX{1234X{1234HkX{1234tlX{1234T56">> = iolist_to_binary(re:replace("ZZX{123456","X{1234","bKb\\1&&M&&Hk&tl&T",[])),
    <<"ZZbKbX{1234X{1234MX{1234X{1234HkX{1234tlX{1234T56">> = iolist_to_binary(re:replace("ZZX{123456","X{1234","bKb\\1&&M&&Hk&tl&T",[global])),
    <<"ZZX{12ABC}gUOdBxWpuY">> = iolist_to_binary(re:replace("ZZX{12ABC}Y","X{12ABC}","&gUO\\1dB\\1\\1x\\1\\1\\1Wpu",[])),
    <<"ZZX{12ABC}gUOdBxWpuY">> = iolist_to_binary(re:replace("ZZX{12ABC}Y","X{12ABC}","&gUO\\1dB\\1\\1x\\1\\1\\1Wpu",[global])),
    <<"ZZCX{1,XhvafX{1,X{1,FX{1,dgX{1,n...">> = iolist_to_binary(re:replace("ZZX{1,...","X{1,","C&Xhvaf&\\1&\\1\\1F&dg&n",[])),
    <<"ZZCX{1,XhvafX{1,X{1,FX{1,dgX{1,n...">> = iolist_to_binary(re:replace("ZZX{1,...","X{1,","C&Xhvaf&\\1&\\1\\1F&dg&n",[global])),
    <<"ZZVF}abc">> = iolist_to_binary(re:replace("ZZX{,9}abc","X{,9","V\\1F",[])),
    <<"ZZVF}abc">> = iolist_to_binary(re:replace("ZZX{,9}abc","X{,9","V\\1F",[global])),
    <<"ZZTNX{,9]..">> = iolist_to_binary(re:replace("ZZX{,9]..","X{,9]","\\1TN&\\1",[])),
    <<"ZZTNX{,9]..">> = iolist_to_binary(re:replace("ZZX{,9]..","X{,9]","\\1TN&\\1",[global])),
    <<"xxAAoHKKlAAOsTAQzz">> = iolist_to_binary(re:replace("xxAABBzz","(A)(?-1)(?+1)(B)","A\\1oHKKl\\1\\1OsT\\1Q",[])),
    <<"xxAAoHKKlAAOsTAQzz">> = iolist_to_binary(re:replace("xxAABBzz","(A)(?-1)(?+1)(B)","A\\1oHKKl\\1\\1OsT\\1Q",[global])),
    <<"XnVISfRIANBaCAhAABAABAABiabX">> = iolist_to_binary(re:replace("XAABX","(A)(\\g{ -2 }B)","nVISfRI\\1NBaC\\1h&&&iab",[])),
    <<"XnVISfRIANBaCAhAABAABAABiabX">> = iolist_to_binary(re:replace("XAABX","(A)(\\g{ -2 }B)","nVISfRI\\1NBaC\\1h&&&iab",[global])),
    ok.
run60() ->
    <<"XuAABipAipAAyiAABAbAABVX">> = iolist_to_binary(re:replace("XAABX","(A)((?-2)B)","u&ip\\1ip\\1\\1yi&\\1b&V",[])),
    <<"XuAABipAipAAyiAABAbAABVX">> = iolist_to_binary(re:replace("XAABX","(A)((?-2)B)","u&ip\\1ip\\1\\1yi&\\1b&V",[global])),
    <<"--wAjTGXoySgBSd--">> = iolist_to_binary(re:replace("--aX--","a\\c\\X","wAjTGXoySgBSd",[])),
    <<"--wAjTGXoySgBSd--">> = iolist_to_binary(re:replace("--aX--","a\\c\\X","wAjTGXoySgBSd",[global])),
    <<"bcHIJOeNBWAOXb">> = iolist_to_binary(re:replace("baab","(a)\\g{ 1 }","cHIJOeNBWAOX",[])),
    <<"bcHIJOeNBWAOXb">> = iolist_to_binary(re:replace("baab","(a)\\g{ 1 }","cHIJOeNBWAOX",[global])),
    <<"Xaawbaaaagaaaaa">> = iolist_to_binary(re:replace("Xaaaaa","a{ 1,2 }","&wb&&g&",[])),
    <<"Xaawbaaaagaaaawbaaaagaaawbaaga">> = iolist_to_binary(re:replace("Xaaaaa","a{ 1,2 }","&wb&&g&",[global])),
    <<"XXSEMaaaaa">> = iolist_to_binary(re:replace("Xaaaaa","a{ 1 , 2 }","XSEM&",[])),
    <<"XXSEMaaXSEMaaXSEMa">> = iolist_to_binary(re:replace("Xaaaaa","a{ 1 , 2 }","XSEM&",[global])),
    <<"XQmAqwBScoVababEX">> = iolist_to_binary(re:replace("XabababX","(?'name'ab)\\k{ name }(?P=name)","QmAqwBScoV\\1\\1E",[])),
    <<"XQmAqwBScoVababEX">> = iolist_to_binary(re:replace("XabababX","(?'name'ab)\\k{ name }(?P=name)","QmAqwBScoV\\1\\1E",[global])),
    <<"OMTiwdqw">> = iolist_to_binary(re:replace("A{,}B","A{,}B","OMTiwdqw",[])),
    <<"OMTiwdqw">> = iolist_to_binary(re:replace("A{,}B","A{,}B","OMTiwdqw",[global])),
    <<"NxA{ , }BtwnfgviUXLq">> = iolist_to_binary(re:replace("A{ , }B","A{ , }B","N\\1x&twnfgviUXLq",[])),
    <<"NxA{ , }BtwnfgviUXLq">> = iolist_to_binary(re:replace("A{ , }B","A{ , }B","N\\1x&twnfgviUXLq",[global])),
    <<"vIdLQAAACC">> = iolist_to_binary(re:replace("AAAAAACC","A{ ,3}","vI\\1dL\\1Q",[])),
    <<"vIdLQvIdLQvIdLQCvIdLQCvIdLQ">> = iolist_to_binary(re:replace("AAAAAACC","A{ ,3}","vI\\1dL\\1Q",[global])),
    <<"BBeCC">> = iolist_to_binary(re:replace("BBAAAAAACC","A{ 3, }","e",[])),
    <<"BBeCC">> = iolist_to_binary(re:replace("BBAAAAAACC","A{ 3, }","e",[global])),
    <<"isvEuyKowYXlOom[abcdef]">> = iolist_to_binary(re:replace("[abcdef]","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","isvEuyKowYXlOom&",[extended])),
    <<"isvEuyKowYXlOom[abcdef]">> = iolist_to_binary(re:replace("[abcdef]","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","isvEuyKowYXlOom&",[extended,global])),
    <<"AdTV[abc\\]def]JEYuVB">> = iolist_to_binary(re:replace("[abc\\]def]","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","AdTV\\1JEYuVB",[extended])),
    <<"AdTV[abc\\]def]JEYuVB">> = iolist_to_binary(re:replace("[abc\\]def]","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","AdTV\\1JEYuVB",[extended,global])),
    <<"yJa.b|abcdNa.b|abcdyB">> = iolist_to_binary(re:replace("a.b|abcd","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","yJ&N\\1yB",[extended])),
    <<"yJa.b|abcdNa.b|abcdyB">> = iolist_to_binary(re:replace("a.b|abcd","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","yJ&N\\1yB",[extended,global])),
    <<"uaGCKNavdWab()d">> = iolist_to_binary(re:replace("ab()d","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","uaGCKNavdW\\1",[extended])),
    <<"uaGCKNavdWab()d">> = iolist_to_binary(re:replace("ab()d","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","uaGCKNavdW\\1",[extended,global])),
    <<"ab{1,3}dITgBpab{1,3}dBJFrab{1,3}dPTab{1,3}d">> = iolist_to_binary(re:replace("ab{1,3}d","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","&ITgBp&BJFr\\1PT\\1",[extended])),
    <<"ab{1,3}dITgBpab{1,3}dBJFrab{1,3}dPTab{1,3}d">> = iolist_to_binary(re:replace("ab{1,3}d","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","&ITgBp&BJFr\\1PT\\1",[extended,global])),
    <<"DRwRRJab{,3}dab{,3}dsab{,3}dOXDATy">> = iolist_to_binary(re:replace("ab{,3}d","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","DRwRRJ&&s&OXDATy",[extended])),
    <<"DRwRRJab{,3}dab{,3}dsab{,3}dOXDATy">> = iolist_to_binary(re:replace("ab{,3}d","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","DRwRRJ&&s&OXDATy",[extended,global])),
    <<"qogab(*FAIL)d(*COMMIT)(*SKIP)(*THEN:abc)gXPBQjq">> = iolist_to_binary(re:replace("ab(*FAIL)d(*COMMIT)(*SKIP)(*THEN:abc)","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","qog\\1gXPBQjq",[extended])),
    <<"qogab(*FAIL)d(*COMMIT)(*SKIP)(*THEN:abc)gXPBQjq">> = iolist_to_binary(re:replace("ab(*FAIL)d(*COMMIT)(*SKIP)(*THEN:abc)","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","qog\\1gXPBQjq",[extended,global])),
    <<"SVab(*MARK:xyz)ASuTab(*MARK:xyz)">> = iolist_to_binary(re:replace("ab(*MARK:xyz)","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","SV\\1ASuT\\1",[extended])),
    <<"SVab(*MARK:xyz)ASuTab(*MARK:xyz)">> = iolist_to_binary(re:replace("ab(*MARK:xyz)","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","SV\\1ASuT\\1",[extended,global])),
    <<"eTO">> = iolist_to_binary(re:replace("(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[,;:])(?=.{8,16})(?!.*[\\s])","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","eTO",[extended])),
    <<"eTO">> = iolist_to_binary(re:replace("(?=.*[A-Z])(?=.*[a-z])(?=.*[0-9])(?=.*[,;:])(?=.{8,16})(?!.*[\\s])","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","eTO",[extended,global])),
    <<"HAJabcd\\t\\n\\r\\f\\a\\e\\071\\x3b\\^\\\\\\?caxyzwabcd\\t\\n\\r\\f\\a\\e\\071\\x3b\\^\\\\\\?caxyz">> = iolist_to_binary(re:replace("abcd\\t\\n\\r\\f\\a\\e\\071\\x3b\\^\\\\\\?caxyz","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","HAJ&w\\1",[extended])),
    <<"HAJabcd\\t\\n\\r\\f\\a\\e\\071\\x3b\\^\\\\\\?caxyzwabcd\\t\\n\\r\\f\\a\\e\\071\\x3b\\^\\\\\\?caxyz">> = iolist_to_binary(re:replace("abcd\\t\\n\\r\\f\\a\\e\\071\\x3b\\^\\\\\\?caxyz","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","HAJ&w\\1",[extended,global])),
    <<"EMvXhBG">> = iolist_to_binary(re:replace("a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","EMvXhBG",[extended])),
    <<"EMvXhBG">> = iolist_to_binary(re:replace("a*abc?xyz+pqr{3}ab{2,}xy{4,5}pq{0,6}AB{0,}zz","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","EMvXhBG",[extended,global])),
    <<"r\\G(?:(?=(\\1.|)(.))){1,13}?(?!.*\\2.*\\2)\\1\\K\\2W\\G(?:(?=(\\1.|)(.))){1,13}?(?!.*\\2.*\\2)\\1\\K\\2lOQEcegVcvQp\\G(?:(?=(\\1.|)(.))){1,13}?(?!.*\\2.*\\2)\\1\\K\\2r">> = iolist_to_binary(re:replace("\\G(?:(?=(\\1.|)(.))){1,13}?(?!.*\\2.*\\2)\\1\\K\\2","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","r\\1W&lOQEcegVcvQp\\1r",[extended])),
    <<"r\\G(?:(?=(\\1.|)(.))){1,13}?(?!.*\\2.*\\2)\\1\\K\\2W\\G(?:(?=(\\1.|)(.))){1,13}?(?!.*\\2.*\\2)\\1\\K\\2lOQEcegVcvQp\\G(?:(?=(\\1.|)(.))){1,13}?(?!.*\\2.*\\2)\\1\\K\\2r">> = iolist_to_binary(re:replace("\\G(?:(?=(\\1.|)(.))){1,13}?(?!.*\\2.*\\2)\\1\\K\\2","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","r\\1W&lOQEcegVcvQp\\1r",[extended,global])),
    <<"ab)d">> = iolist_to_binary(re:replace("ab)d","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","JABc&T",[extended])),
    <<"ab)d">> = iolist_to_binary(re:replace("ab)d","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","JABc&T",[extended,global])),
    <<"ab(d">> = iolist_to_binary(re:replace("ab(d","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","\\1nEIdws&\\1Yo",[extended])),
    <<"ab(d">> = iolist_to_binary(re:replace("ab(d","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","\\1nEIdws&\\1Yo",[extended,global])),
    <<"{4,5}">> = iolist_to_binary(re:replace("{4,5}","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","w&d",[extended])),
    <<"{4,5}">> = iolist_to_binary(re:replace("{4,5}","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","w&d",[extended,global])),
    <<"a[]b">> = iolist_to_binary(re:replace("a[]b","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","sp\\1rnh",[extended])),
    <<"a[]b">> = iolist_to_binary(re:replace("a[]b","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","sp\\1rnh",[extended,global])),
    <<"(a)(?(1)a|b|c)">> = iolist_to_binary(re:replace("(a)(?(1)a|b|c)","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","&h\\1DhrD&\\1Lif",[extended])),
    <<"(a)(?(1)a|b|c)">> = iolist_to_binary(re:replace("(a)(?(1)a|b|c)","^
(?<re>
# A regular expression is zero or more of these items.
  (?:
  # An item is one of these:
    (?:
      [^?+*{}()\\[\\]\\\\|]++|  # Non-meta characters or unquoted .
      \\\\.|                  # Quoted .

      \\[                    # Class, which is [
      (?:                   # Followed by
        \\^?\\\\.|             # Optional ^ and any escaped character
        \\^[^\\\\]|            # OR ^ and not escaped character
        [^\\\\^]              # OR neither ^ nor \\
      )                     # Followed by
      (?:[^\\]\\\\]+|\\\\.)*+    # Zero or more (not ] or \\) OR escaped dot
      \\]|                   # Class ends with ]

      \\(                    # Parenthesized group
        (?:                 # Start with optional
          \\?[:=!]|          # ? followed by : = !
          \\?<[=!]|          # OR ?< followed by = or !
          \\?>               # OR ?>
        )?
        (?&re)??            # Then a nested <re>
      \\)|                   # End parenthesized group

      \\(\\?                  # Other parenthesized items
        (?:                 # (? followed by
          R|                # R
          [+-]?\\d++         # Or optional +- and digits
        )
      \\)|                   # End parens

      \\(\\*                  # Verbs
        (?:
          COMMIT|
          FAIL|
          MARK:[^)]*|
          (?:PRUNE|SKIP|THEN)(?::[^\\)]*+)?
        )
      \\)
    )                       # End list of items

    # Followed by an optional quantifier

    (?:
      (?:
        [?+*]     # ?+*
        |         # OR
        \\{\\d+     # { digits
        (?:,\\d*)? # optionally followed by ,digits
        \\}        # then closing }
        |         # OR
        \\{,\\d+}   # {,digits}
      )
      [?+]?       # optional ungreedy or possessive
    )?

    | # OR an \"item\" is a branch ending

    \\|

  )*  # Zero or more top-level items.
)     # End regex group.
$","&h\\1DhrD&\\1Lif",[extended,global])),
    <<"12ADFFjeCFCevYb">> = iolist_to_binary(re:replace("12ADC","^..A(*SKIP)B|C","FF\\1je&F&ev\\1Yb",[])),
    <<"12ADFFjeCFCevYb">> = iolist_to_binary(re:replace("12ADC","^..A(*SKIP)B|C","FF\\1je&F&ev\\1Yb",[global])),
    <<"a">> = iolist_to_binary(re:replace("a","(?<!a?)","lk&&ep",[])),
    <<"a">> = iolist_to_binary(re:replace("a","(?<!a?)","lk&&ep",[global])),
    ok.
