
[;1mÂ Â spawn_monitor(Fun)[0m

  Returns the process identifier of a new process, started by the
  application of [;;4mFun[0m to the empty list [;;4m[][0m, and a reference for a
  monitor created to the new process. Otherwise works like [;;4mspawn/3[0m.

[;1mÂ Â spawn_monitor(Node, Fun)[0m

[;;4mSince[0m:
  OTP 23.0

  Returns the process identifier of a new process, started by the
  application of [;;4mFun[0m to the empty list [;;4m[][0m on the node [;;4mNode[0m,
  and a reference for a monitor created to the new process.
  Otherwise works like [;;4mspawn/3[0m.

  If the node identified by [;;4mNode[0m does not support distributed [;;4m[0m
  [;;4mspawn_monitor()[0m, the call will fail with a [;;4mnotsup[0m exception.

[;1mÂ Â spawn_monitor(Module, Function, Args)[0m

  A new process is started by the application of [;;4mModule:Function[0m
  to [;;4mArgs[0m. The process is monitored at the same time. Returns the
  process identifier and a reference for the monitor. Otherwise
  works like [;;4mspawn/3[0m.

[;1mÂ Â spawn_monitor(Node, Module, Function, Args)[0m

[;;4mSince[0m:
  OTP 23.0

  A new process is started by the application of [;;4mModule:Function[0m
  to [;;4mArgs[0m on the node [;;4mNode[0m. The process is monitored at the same
  time. Returns the process identifier and a reference for the
  monitor. Otherwise works like [;;4mspawn/3[0m.

  If the node identified by [;;4mNode[0m does not support distributed [;;4m[0m
  [;;4mspawn_monitor()[0m, the call will fail with a [;;4mnotsup[0m exception.
