
exact_api.erl:17:14: The call exact_api:set_type
         (A ::
              #digraph{vtab :: 'notable',
                       etab :: 'notable',
                       ntab :: 'notable',
                       cyclic :: 'true'}) does not have an opaque term of type 
          digraph:graph() as 1st argument
exact_api.erl:23:20: The call digraph:delete
         (G ::
              #digraph{vtab :: 'notable',
                       etab :: 'notable',
                       ntab :: 'notable',
                       cyclic :: 'true'}) does not have an opaque term of type 
          digraph:graph() as 1st argument
exact_api.erl:55:5: The attempt to match a term of type 
          exact_adt:exact_adt() against the pattern 
          {'exact_adt'} breaks the opacity of the term
exact_api.erl:59:39: The call exact_adt:exact_adt_set_type2
         (A :: #exact_adt{}) does not have an opaque term of type 
          exact_adt:exact_adt() as 1st argument
is_rec.erl:19:8: Guard test is_record
         (A :: simple1_adt:d1(),
          'r',
          2) can never succeed
is_rec.erl:23:8: Guard test is_record
         ({simple1_adt:d1(), 1},
          'r',
          2) can never succeed
is_rec.erl:57:8: Guard test is_record
         (A :: simple1_adt:d1(),
          'r',
          2) can never succeed
is_rec.erl:61:8: The record 
          #r{f1 :: simple1_adt:d1()} violates the declared type for #r{}
rec_api.erl:104:5: Matching of pattern 
          {'r2', 10} tagged with a record name violates the declared type of 
          #r2{f1 :: 10}
rec_api.erl:113:5: The pattern 
          {'r3', 'a'} can never match the type 
          #r3{f1 :: queue:queue(_)}
rec_api.erl:118:18: Record construction 
          #r3{f1 :: 10} violates the declared type of field f1 ::
          queue:queue(_)
rec_api.erl:123:5: Matching of pattern 
          {'r3', 10} tagged with a record name violates the declared type of 
          #r3{f1 :: 10}
rec_api.erl:24:18: Record construction 
          #r1{f1 :: 10} violates the declared type of field f1 ::
          rec_api:a()
rec_api.erl:29:5: Matching of pattern 
          {'r1', 10} tagged with a record name violates the declared type of 
          #r1{f1 :: 10}
rec_api.erl:33:10: The attempt to match a term of type 
          rec_adt:a() against the pattern 
          'a' breaks the opacity of the term
rec_api.erl:33:5: The attempt to match a term of type 
          rec_adt:r1() against the pattern 
          {'r1', 'a'} breaks the opacity of the term
rec_api.erl:35:2: The specification for rec_api:adt_t1/1 has an opaque subtype 
          rec_adt:r1() which is violated by the success typing 
          (#r1{f1 :: 'a'}) -> #r1{f1 :: 'a'}
rec_api.erl:40:2: The specification for rec_api:adt_r1/0 has an opaque subtype 
          rec_adt:r1() which is violated by the success typing 
          () -> #r1{f1 :: rec_api:a()}
rec_api.erl:85:13: Record construction 
          #r{f :: rec_adt:f(), o :: 2} violates the declared type of field f ::
          rec_api:f()
rec_api.erl:99:18: Record construction 
          #r2{f1 :: 10} violates the declared type of field f1 ::
          rec_api:a()
simple1_api.erl:102:5: Guard test 
          simple1_api:o2() =:= 
          A :: simple1_api:o1() can never succeed
simple1_api.erl:108:5: The test 
          simple1_api:o1() =:= 
          simple1_api:o2() can never evaluate to 'true'
simple1_api.erl:113:5: The test 
          simple1_api:d1() =:= 
          simple1_api:d2() can never evaluate to 'true'
simple1_api.erl:118:5: Guard test 
          simple1_api:d2() =:= 
          A :: simple1_api:d1() can never succeed
simple1_api.erl:123:5: The test 
          simple1_api:d1() =/= 
          simple1_api:d2() can never evaluate to 'false'
simple1_api.erl:128:5: The test 
          simple1_api:d1() /= 
          simple1_api:d2() can never evaluate to 'false'
simple1_api.erl:142:5: The test 
          simple1_adt:o1() =:= 
          simple1_adt:o2() can never evaluate to 'true'
simple1_api.erl:148:5: Guard test 
          simple1_adt:o2() =:= 
          A :: simple1_adt:o1() can never succeed
simple1_api.erl:154:5: The test 
          simple1_adt:o1() =/= 
          simple1_adt:o2() can never evaluate to 'false'
simple1_api.erl:160:5: The test 
          simple1_adt:o1() /= 
          simple1_adt:o2() can never evaluate to 'false'
simple1_api.erl:165:5: The test 
          simple1_adt:c1() =:= 
          simple1_adt:c2() can never evaluate to 'true'
simple1_api.erl:181:8: Guard test 
          A :: simple1_adt:d1() =< 
          B :: simple1_adt:d2() contains opaque terms as 1st and 2nd arguments
simple1_api.erl:185:8: Guard test 
          'a' =< 
          B :: simple1_adt:d2() contains an opaque term as 2nd argument
simple1_api.erl:189:8: Guard test 
          A :: simple1_adt:d1() =< 
          'd' contains an opaque term as 1st argument
simple1_api.erl:221:8: Guard test 
          A :: simple1_api:i1() > 
          3 can never succeed
simple1_api.erl:225:8: Guard test 
          A :: simple1_adt:i1() > 
          3 can never succeed
simple1_api.erl:233:8: Guard test 
          A :: simple1_adt:i1() < 
          3 contains an opaque term as 1st argument
simple1_api.erl:239:8: Guard test 
          A :: 1 > 
          3 can never succeed
simple1_api.erl:243:8: Guard test 
          A :: 1 > 
          3 can never succeed
simple1_api.erl:257:8: Guard test is_function
         (T :: simple1_api:o1()) can never succeed
simple1_api.erl:265:8: Guard test is_function
         (T :: simple1_adt:o1()) can never succeed
simple1_api.erl:274:8: Guard test is_function
         (T :: simple1_api:o1(),
          A :: simple1_api:i1()) can never succeed
simple1_api.erl:284:8: Guard test is_function
         (T :: simple1_adt:o1(),
          A :: simple1_adt:i1()) can never succeed
simple1_api.erl:306:8: Guard test 
          B :: simple1_api:b2() =:= 
          'true' can never succeed
simple1_api.erl:315:8: Guard test 
          A :: simple1_api:b1() =:= 
          'false' can never succeed
simple1_api.erl:319:16: Guard test not(and
         ('true',
          'true')) can never succeed
simple1_api.erl:333:2: Invalid type specification for function simple1_api:bool_t7/0.
 The success typing is simple1_api:bool_t7
          () -> none()
 But the spec is simple1_api:bool_t7
          () -> integer()
 The return types do not overlap
simple1_api.erl:337:8: Clause guard cannot succeed.
simple1_api.erl:342:8: Guard test 
          B :: simple1_adt:b2() =:= 
          'true' can never succeed
simple1_api.erl:361:2: Invalid type specification for function simple1_api:bool_t8/0.
 The success typing is simple1_api:bool_t8
          () -> none()
 But the spec is simple1_api:bool_t8
          () -> integer()
 The return types do not overlap
simple1_api.erl:365:8: Clause guard cannot succeed.
simple1_api.erl:374:2: Invalid type specification for function simple1_api:bool_t9/0.
 The success typing is simple1_api:bool_t9
          () -> none()
 But the spec is simple1_api:bool_t9
          () -> integer()
 The return types do not overlap
simple1_api.erl:378:8: Clause guard cannot succeed.
simple1_api.erl:407:12: The size 
          simple1_adt:i1() breaks the opacity of A
simple1_api.erl:432:9: The pattern 
          <<_:B>> can never match the type 
          any()
simple1_api.erl:460:9: The attempt to match a term of type 
          simple1_adt:bit1() against the pattern 
          <<_/binary>> breaks the opacity of the term
simple1_api.erl:499:9: The call 'foo':A
         (A :: simple1_api:i()) requires that A is of type 
          atom() not 
          simple1_api:i()
simple1_api.erl:503:9: The call 'foo':A
         (A :: simple1_adt:i()) requires that A is of type 
          atom() not 
          simple1_adt:i()
simple1_api.erl:507:5: The call A:'foo'
         (A :: simple1_api:i()) requires that A is of type 
          atom() not 
          simple1_api:i()
simple1_api.erl:511:5: The call A:'foo'
         (A :: simple1_adt:i()) requires that A is of type 
          atom() not 
          simple1_adt:i()
simple1_api.erl:519:9: Guard test 
          A :: simple1_adt:d2() == 
          B :: simple1_adt:d1() can never succeed
simple1_api.erl:521:9: Guard test 
          A :: simple1_adt:d2() == 
          A :: simple1_adt:d2() contains opaque terms as 1st and 2nd arguments
simple1_api.erl:534:9: Guard test 
          A :: simple1_adt:d1() >= 
          3 contains an opaque term as 1st argument
simple1_api.erl:536:9: Guard test 
          A :: simple1_adt:d1() == 
          3 can never succeed
simple1_api.erl:538:9: Guard test 
          A :: simple1_adt:d1() =:= 
          3 can never succeed
simple1_api.erl:540:9: Guard test 
          A :: simple1_adt:d1() == 
          A :: simple1_adt:d1() contains opaque terms as 1st and 2nd arguments
simple1_api.erl:91:2: The specification for simple1_api:tup/0 has an opaque subtype 
          simple1_adt:tuple1() which is violated by the success typing 
          () -> {'a', 'b'}
simple2_api.erl:100:19: The call lists:flatten
         (A :: simple1_adt:tuple1()) contains an opaque term as 1st argument when a structured term of type 
          [any()] is expected
simple2_api.erl:100:19: The call lists:flatten
         (A :: simple1_adt:tuple1()) will never return since it differs in the 1st argument from the success typing arguments: 
         ([any()])
simple2_api.erl:116:19: The call lists:flatten
         ({simple1_adt:tuple1()}) will never return since it differs in the 1st argument from the success typing arguments: 
         ([any()])
simple2_api.erl:35:17: The call erlang:send
         (A :: simple1_adt:d1(),
          'foo') contains an opaque term as 1st argument when terms of different types are expected in these positions
simple2_api.erl:59:24: The call lists:keysearch
         (1,
          A :: simple1_adt:d1(),
          []) will never return since it differs in the 2nd argument from the success typing arguments: 
         (any(),
          pos_integer(),
          maybe_improper_list())
simple2_api.erl:67:29: The call lists:keysearch
         ('key',
          1,
          A :: simple1_adt:tuple1()) will never return since it differs in the 3rd argument from the success typing arguments: 
         (any(),
          pos_integer(),
          maybe_improper_list())
simple2_api.erl:96:37: The call lists:keyreplace
         ('a',
          1,
          [{1, 2}],
          A :: simple1_adt:tuple1()) contains an opaque term as 4th argument when terms of different types are expected in these positions
