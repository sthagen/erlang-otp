<?xml version="1.0" encoding="utf-8" ?>
<!DOCTYPE chapter SYSTEM "chapter.dtd">

<chapter>
  <header>
    <copyright>
      <year>2003</year><year>2021</year>
      <holder>Ericsson AB. All Rights Reserved.</holder>
    </copyright>
    <legalnotice>
      Licensed under the Apache License, Version 2.0 (the "License");
      you may not use this file except in compliance with the License.
      You may obtain a copy of the License at
 
          http://www.apache.org/licenses/LICENSE-2.0

      Unless required by applicable law or agreed to in writing, software
      distributed under the License is distributed on an "AS IS" BASIS,
      WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
      See the License for the specific language governing permissions and
      limitations under the License.
    
    </legalnotice>

    <title>Specialized Decodes</title>
    <prepared>EAB/UAB/UKH/KD Bertil Karlsson</prepared>
    <docno></docno>
    <date>2003-04-24</date>
    <rev>D</rev>
    <file>asn1_spec.xml</file>
  </header>
  <marker id="SpecializedDecodes"></marker>
  <p>When performance is of highest priority and one is interested in
  a limited part of the ASN.1 encoded message before deciding what to
  do with the rest of it, an option is to decode only a part of the
  message. This situation can be a server that has to decide the
  addressee of a message. The addressee can be interested in the
  entire message, but the server can be a bottleneck that you want to
  spare any unnecessary load.</p>
  <p>Instead of making two <em>complete decodes</em> (the normal case of
    decode), one in the server and one in the addressee, it is only
    necessary to make one <em>specialized decode</em> (in the server)
    and another complete decode (in the addressee). This section
    describes the following specialized decode functionality:</p>
    <list type="bulleted">
      <item><em>Exclusive decode</em></item>
      <item><em>Selected decode</em></item>
    </list>
  <p>This functionality is only provided when using <c>BER</c>
  (option <c>ber</c>).</p>

  <section>
    <title>Exclusive Decode</title>
    <p>The basic idea with exclusive decode is to specify which parts
    of the message you want to exclude from being decoded. These parts
    remain encoded and are returned in the value structure as
    binaries. The undecoded parts can be decoded later by calling the
    <c>decode_part/2</c> function.</p>

    <section>
      <title>Procedure</title>
      <p>To perform an exclusive decode:
        </p>
      <list type="bulleted">
        <item><em>Step 1:</em> Decide the name of the function for the
	 exclusive decode.</item>
        <item><p><em>Step 2:</em> Include the following instructions in
	 a configuration file:</p>
	 <list type="bulleted">
	   <item>The name of the exclusive decode function</item>
	   <item>The name of the ASN.1 specification</item>
	   <item>A notation that tells which parts of the message
	   structure to be excluded from decode</item>
	   </list></item>
        <item><em>Step 3</em> Compile with the additional option
         <c>asn1config</c>. The compiler searches for a configuration
         file with the same name as the ASN.1 specification but with
         extension <c>.asn1config</c>. This configuration file is not
	 the same as used for compilation of a set of files. See Section
	 <seeguide marker="#UndecodedPart">Writing an Exclusive Decode
	 Instruction.</seeguide></item>
      </list>
    </section>

    <section>
      <title>User Interface</title>
      <p>The runtime user interface for exclusive decode consists of
        the following two functions:</p>
	<list type="bulleted">
	  <item>A function for an exclusive decode, whose name the user
	  decides in the configuration file</item>
	  <item>The compiler generates a <c>decode_part/2</c>
          function when exclusive decode is chosen. This function decodes
          the parts that were left undecoded during the exclusive
          decode.</item>
	</list>
      <p>Both functions are described in the following.</p>
      <p>If the exclusive decode function has, for example, the name
        <c>decode_exclusive</c> and an ASN.1 encoded message
        <c>Bin</c> is to be exclusive decoded, the call is as follows:</p>
      <pre>
{ok,ExclMessage} = 'MyModule':decode_exclusive(Bin)</pre>
      <marker id="UndecodedPart"></marker>
      <p>The result <c>ExclMessage</c> has the same structure as a
        complete decode would have, except for the parts of the top type
        that were not decoded. The undecoded parts are on their places
        in the structure on format <c>{TypeKey,UndecodedValue}</c>.
        </p>
      <p>Each undecoded part that is to be decoded must be fed into
        function <c>decode_part/2</c> as follows:</p>
      <pre>
{ok,PartMessage} = 'MyModule':decode_part(TypeKey, UndecodedValue)</pre>
    </section>

    <section>
      <marker id="Exclusive Instruction"></marker>
      <title>Writing an Exclusive Decode Instruction</title>
      <p>This instruction is written in the configuration file
        in the following format:</p>
      <pre>
ExclusiveDecodeInstruction = {exclusive_decode,{ModuleName,DecodeInstructions}}.

ModuleName = atom()

DecodeInstructions = [DecodeInstruction]+

DecodeInstruction = {ExclusiveDecodeFunctionName,TypeList}

ExclusiveDecodeFunctionName = atom()

TypeList = [TopType,ElementList]

ElementList = [Element]+

Element = {Name,parts} |
          {Name,undecoded} |
          {Name,ElementList}

TopType = atom()

Name = atom()</pre>
      <p>The instruction must be a valid Erlang term ended by a dot.
        </p>
      <p>In <c>TypeList</c> the path from the top type to each
      undecoded subcomponent is described. <c>TopType</c> is the name
      of a top-level type in the ASN.1 specification. The action for
      each component in <c>ElementList</c> is described by one of:</p>

      <list type="bulleted">
        <item><c>{Name,parts}</c></item>
        <item><c>{Name,undecoded}</c></item>
        <item><c>{Name,ElementList}</c></item>
      </list>
      <p>The use and effect of the actions are as follows:</p>
      <taglist>
        <tag><c>{Name,undecoded}</c></tag>
        <item>Leaves the element undecoded. The type of <c>Name</c> can
        be any ASN.1 type. The value of element <c>Name</c> is
        returned as a tuple (as mentioned in the previous section) in
        the value structure of the top type.</item>

        <tag><c>{Name,parts}</c></tag>
        <item>The type of <c>Name</c> must be either <c>SEQUENCE OF</c>
        or <c>SET OF</c>. The action implies that the different
        components of <c>Name</c> are left undecoded. The value of
        <c>Name</c> is returned as a tuple (as mentioned in the
        previous section) where the second element is a list of
        binaries. This is because the representation of a <c>SEQUENCE
        OF</c> or a <c>SET OF</c> in Erlang is a list of its internal
        type. Any of the elements in this list or the entire list can
        be decoded by function <c>decodepart</c>.</item>

        <tag><c>{Name,ElementList}</c></tag>
        <item>This action is used when one or more of the subtypes of
        <c>Name</c> is exclusively decoded.</item>
      </taglist>
      <p><c>Name</c> in these actions can be a component name of a
        <c>SEQUENCE OF</c> or a <c>SET OF</c>, or a name of an alternative
         in a <c>CHOICE</c>.
        </p>
    </section>

    <section>
      <title>Example</title>
      <p>In this examples, the definitions from the following ASN.1
        specification are used:</p>
      <marker id="Asn1spec"></marker>
      <codeinclude file="GUI.asn1" tag="" type="none"></codeinclude>
      <p>If <c>Button</c> is a top type and it is needed to exclude
        component <c>number</c> from decode, <c>TypeList</c> in the
        instruction in the configuration file is
        <c>['Button',[{number,undecoded}]]</c>. If you call the decode
        function <c>decode_Button_exclusive</c>, <c>DecodeInstruction</c> is
        <c>{decode_Button_exclusive,['Button',[{number,undecoded}]]}</c>.
        </p>
      <p>Another top type is <c>Window</c> whose subcomponent
        actions in type <c>Status</c> and the parts of component
        <c>buttonList</c> are to be left undecoded. For this type, the
        function is named <c>decode__Window_exclusive</c>. The complete
        <c>Exclusive_Decode_Instruction</c> configuration is as follows:</p>
      <codeinclude file="GUI.asn1config" tag="" type="none"></codeinclude>
      <p>The following figure shows the bytes of a <c>Window:status</c>
        message. The components <c>buttonList</c> and <c>actions</c> are
	excluded from decode. Only <c>state</c> and <c>enabled</c> are decoded
	when <c>decode__Window_exclusive</c> is called.</p>
      <p></p>
      <image file="exclusive_Win_But.gif">
        <icaption>Bytes of a Window:status Message</icaption>
      </image>
      <p></p>
      <p>Here follows an example of how the module. Note that option <c>no_ok_wrapper</c>
      is used to make the make example more concise.</p>
      <pre>
1> <input>asn1ct:compile('GUI', [ber,asn1config,no_ok_wrapper]).</input>
ok
2> <input>rr('GUI').</input>
['Action','Button','Status']
3> <input>ButtonMsg = #'Button'{number=123,on=true}.</input>
#'Button'{number = 123,on = true}
4> <input>ButtonBytes = 'GUI':encode('Button', ButtonMsg).</input>
&lt;&lt;48,6,128,1,123,129,1,255&gt;&gt;
5> <input>ExclusiveMsgButton = 'GUI':decode_Button_exclusive(ButtonBytes).</input>
#'Button'{number = {'Button_number',&lt;&lt;128,1,123&gt;&gt;},
          on = true}
6> <input>{UndecKey,UndecBytes} = ExclusiveMsgButton#'Button'.number.</input>
{'Button_number',&lt;&lt;128,1,123&gt;&gt;}
7> <input>'GUI':decode_part(UndecKey, UndecBytes).</input>
123
8> <input>WindowMsg =
{status,{'Status',35,
   [{'Button',3,true},
    {'Button',4,false},
    {'Button',5,true},
    {'Button',6,true},
    {'Button',7,false}],
   false,
   {possibleActions,[{'Action',16,{'Button',17,true}}]}}}.</input>
{status,#'Status'{state = 35,
        buttonList = [#'Button'{number = 3,on = true},
                      #'Button'{number = 4,on = false},
                      #'Button'{number = 5,on = true},
                      #'Button'{number = 6,on = true},
                      #'Button'{number = 7,on = false}],
        enabled = false,
        actions = {possibleActions,[#'Action'{number = 16,
                                              handle = #'Button'{number = 17,on = true}}]}}}
9> <input>WindowBytes = 'GUI':encode('Window', WindowMsg).</input>
&lt;&lt;161,65,128,1,35,161,40,48,6,128,1,3,129,1,255,48,6,128,
  1,4,129,1,0,48,6,128,1,5,129,...&gt;&gt;
10> <input>{status,#'Status'{buttonList={UndecWindowKey,UndecWindowParts}}} =
'GUI':decode_Window_exclusive(WindowBytes).</input>
{status,#'Status'{state = 35,
                  buttonList = {'Status_buttonList',[&lt;&lt;48,6,128,1,3,129,1,
                                                       255&gt;&gt;,
                                                     &lt;&lt;48,6,128,1,4,129,1,0&gt;&gt;,
                                                     &lt;&lt;48,6,128,1,5,129,1,255&gt;&gt;,
                                                     &lt;&lt;48,6,128,1,6,129,1,255&gt;&gt;,
                                                     &lt;&lt;48,6,128,1,7,129,1,0&gt;>]},
                  enabled = false,
                  actions = {'Status_actions',&lt;&lt;163,15,160,13,48,11,128,
                                                1,16,161,6,128,1,17,129,
                                                1,255>>}}}
11> <input>'GUI':decode_part(UndecWindowKey, UndecWindowParts).</input>
[#'Button'{number = 3,on = true},
 #'Button'{number = 4,on = false},
 #'Button'{number = 5,on = true},
 #'Button'{number = 6,on = true},
 #'Button'{number = 7,on = false}]
12> <input>'GUI':decode_part(UndecWindowKey, hd(UndecWindowParts)).</input>
#'Button'{number = 3,on = true}
13> <input>{status,#'Status'{actions={ChoiceKey,ChoiceUndec}}} = v(10).</input>
{status,#'Status'{state = 35,
                  buttonList = {'Status_buttonList',[&lt;&lt;48,6,128,1,3,129,1,
                                                       255&gt;&gt;,
                                                     &lt;&lt;48,6,128,1,4,129,1,0&gt;&gt;,
                                                     &lt;&lt;48,6,128,1,5,129,1,255&gt;&gt;,
                                                     &lt;&lt;48,6,128,1,6,129,1,255&gt;&gt;,
                                                     &lt;&lt;48,6,128,1,7,129,1,0&gt;&gt;]},
                  enabled = false,
                  actions = {'Status_actions',&lt;&lt;163,15,160,13,48,11,128,
                                                1,16,161,6,128,1,17,129,
                                                1,255&gt;&gt;}}}
14> <input>'GUI':decode_part(ChoiceKey, ChoiceUndec).</input>
{possibleActions,[#'Action'{number = 16,
                            handle = #'Button'{number = 17,on = true}}]}</pre>
    </section>
  </section>

  <section>
    <title>Selective Decode</title>
    <p>Selective decode decodes a single subtype of a constructed
    value. This is the fastest method to extract a subvalue. Selective
    decode is typically used when one want to inspect, for example, a
    version number to be able to decide what to do with the entire
    value.</p>

    <section>
      <title>Procedure</title>
      <p>To perform a selective decode:
        </p>
      <list type="bulleted">
        <item><p><em>Step 1:</em> Include the following instructions in
	 the configuration file:</p>
         <list type="bulleted">
           <item>The name of the user function</item>
           <item>The name of the ASN.1 specification</item>
           <item>A notation that tells which part of the type to be
           decoded</item>
	 </list></item>
        <item><em>Step 2:</em> Compile with the additional option
         <c>asn1config</c>. The compiler searches for a configuration file
         with the same name as the ASN.1 specification, but with extension
         <c>.asn1config</c>. In the same file you can also provide
	 configuration specifications for exclusive decode.
         The generated Erlang module has the
         usual functionality for encode/decode preserved and the
         specialized decode functionality added. </item>
      </list>
    </section>

    <section>
      <title>User Interface</title>
      <p>The only new user interface function is the one provided by the
        user in the configuration file.</p>
      <p>For example, if the configuration file includes the specification
        <c>{selective_decode,{'ModuleName',[{selected_decode_Window,TypeList}]}}</c>
        do the selective decode by
        <c>{ok,Result} = 'ModuleName':selected_decode_Window(EncodedBinary).</c></p>
    </section>

    <section>
      <marker id="Selective Instruction"></marker>
      <title>Writing a Selective Decode Instruction</title>
      <p>One or more selective decode functions can be described in a
        configuration file. Use the following notation:</p>
      <pre>
SelectiveDecodeInstruction = {selective_decode,{ModuleName,DecodeInstructions}}.

ModuleName = atom()

DecodeInstructions = [DecodeInstruction]+

DecodeInstruction = {SelectiveDecodeFunctionName,TypeList}

SelectiveDecodeFunctionName = atom()

TypeList = [TopType|ElementList]

ElementList = Name|ListSelector

Name = atom()

ListSelector = [integer()]</pre>
      <p>The instruction must be a valid Erlang term ended by a dot.
        </p>
      <list type="bulleted">
        <item><c>ModuleName</c> is the same as the name of the ASN.1
        specification, but without the extension.</item>
      <item><c>DecodeInstruction</c> is a tuple with your chosen
        function name and the components from the top type that leads
        to the single type you want to decode. Ensure to choose a name
        of your function that is not the same as any of the generated
        functions.</item>
      <item> The first element of <c>TypeList</c> is the top type of the
        encoded message. In <c>ElementList</c>, it is followed by
        each of the component names that leads to selected type.</item>
      <item>Each name in <c>ElementList</c> must be a constructed type
        except the last name, which can be any type.</item>
      <item><c>ListSelector</c> makes it possible to choose one of the
        encoded components in a <c>SEQUENCE OF</c> or a <c>SET OF</c>.
        It is also possible to go further in that component and pick a
        subtype of that to decode. So, in the <c>TypeList</c>:
        <c>['Window',status,buttonList,[1],number]</c>, component
        <c>buttonList</c> must be of type <c>SEQUENCE OF</c> or
        <c>SET OF</c>.</item>
      </list>
      <p>In the example, component <c>number</c> of the first of the encoded
        elements in the <c>SEQUENCE OF</c> <c>buttonList</c> is selected.
        This applies on the ASN.1 specification in Section
        <seeguide marker="#Asn1spec">Writing an Exclusive Decode
        Instruction</seeguide>.
        </p>
    </section>

    <section>
      <title>Example</title>
      <p>In this example, the same ASN.1 specification as in Section
        <seeguide marker="#Asn1spec">Writing an Exclusive Decode Instruction</seeguide>
         is used. The following is a valid selective decode instruction:</p>
      <pre>
{selective_decode,
    {'GUI',
        [{selected_decode_Window1,
            ['Window',status,buttonList, 
             [1],
             number]},
 {selected_decode_Action,
     ['Action',handle,number]},
 {selected_decode_Window2,
     ['Window',
      status,
      actions,
      possibleActions,
      [1],
      handle,number]}]}}.</pre>
      <p>The first instruction,
        <c>{selected_decode_Window1,['Window',status,buttonList,[1],number]}</c>
        is described in the previous section.</p>
      <p> The second instruction,
        <c>{selected_decode_Action,['Action',handle,number]}</c>, takes
        component <c>number</c> in the <c>handle</c> component of type
        <c>Action</c>. If the value is
        <c>ValAction = {'Action',17,{'Button',4711,false}}</c>, the internal
        value 4711 is to be picked by <c>selected_decode_Action</c>. In an
        Erlang terminal it looks as follows:</p>
      <pre>
1> <input>asn1ct:compile('GUI', [ber,asn1config,no_ok_wrapper]).</input>
ok
2> <input>ValAction = {'Action',17,{'Button',4711,false}}.</input>
{'Action',17,{'Button',4711,false}}
3> <input>Bytes = 'GUI':encode('Action',ValAction).</input>
&lt;&lt;48,18,2,1,17,160,13,172,11,171,9,48,7,128,2,18,103,129,1,0&gt;&gt;
4> <input>'GUI':selected_decode_Action(Bytes).</input>
4711</pre>
      <p>The third instruction,
        <c>['Window',status,actions,possibleActions,[1],handle,number]</c>,
        works as follows:</p>
      <list type="bulleted">
        <item><em>Step 1:</em> Starts with type <c>Window</c>.</item>
        <item><em>Step 2:</em> Takes component <c>status</c> of <c>Window</c>
         that is of type <c>Status</c>.</item>
        <item><em>Step 3:</em> Takes <em>actions</em> of type
        <c>Status</c>.</item>
        <item><em>Step 4:</em> Takes <c>possibleActions</c> of the internally
         defined <c>CHOICE</c> type.</item>
        <item><em>Step 5:</em> Goes into the first component of
         <c>SEQUENCE OF</c> by <c>[1]</c>. That component is of type
         <c>Action</c>.</item>
        <item><em>Step 6:</em> Takes component <c>handle</c>.</item>
        <item><em>Step 7:</em> Takes component <c>number</c> of type
        <c>Button</c>.</item>
      </list>
      <p>The following figure shows which components are in <c>TypeList</c>
        <c>['Window',status,actions,possibleActions,[1],handle,number]</c>:</p>
      <p></p>
      <image file="selective_TypeList.gif">
        <icaption>Elements Specified in Configuration File for Selective Decode of a Subvalue in a Window Message</icaption>
      </image>
      <p>In the following figure, only the marked element is decoded by
        <c>selected_decode_Window2</c>:</p>
      <p></p>
      <image file="selective_Window2.gif">
        <icaption>Bytes of a Window:status Message</icaption>
      </image>
      <p>With the following example, you can examine that both
        <c>selected_decode_Window2</c> and
        <c>selected_decode_Window1</c> decodes the intended subvalue
        of value <c>Val</c>:</p>
      <pre>
1> <input>Val = {status,{'Status',12,
                    [{'Button',13,true},
                     {'Button',14,false},
                     {'Button',15,true},
                     {'Button',16,false}],
                    true,
                    {possibleActions,[{'Action',17,{'Button',18,false}},
                                      {'Action',19,{'Button',20,true}},
                                      {'Action',21,{'Button',22,false}}]}}}.</input>
2> <input>Bin = 'GUI':encode('Window',Val).</input>
&lt;&lt;161,89,128,1,12,161,32,48,6,128,1,13,129,1,255,48,6,128,
  1,14,129,1,0,48,6,128,1,15,129,...&gt;&gt;
4> <input>'GUI':selected_decode_Window1(Bin).</input>
13
5> <input>'GUI':selected_decode_Window2(Bin).</input>
18</pre>
    </section>
  </section>
</chapter>

