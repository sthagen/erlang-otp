##
## %CopyrightBegin%
##
## Copyright Ericsson AB 2021-2022. All Rights Reserved.
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at
##
##     http://www.apache.org/licenses/LICENSE-2.0
##
## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.
##
## %CopyrightEnd%
##

[doc Tests of using enable_feature as an option to erlc]

[include features.luxinc]

[macro syntax-error expr]
    ?syntax error before: $expr
[endmacro]

[invoke setup]

[newshell cmds]
    !export OTP_TEST_FEATURES=true
    ?SH-PROMPT:
    -Unknown option
    # DO not user erlc server as it seems that under "sometimes" new
    # servers are added and left lingering
    !export ERLC_USE_SERVER=$erlcserver
    ?SH-PROMPT:
    [invoke compile ignorant.erl ""]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile ignorant.erl "+'{enable_feature, ifn_expr}'"]
    ?syntax error before:
    ?syntax error before: ifn
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile ignorant.erl "+'{enable_feature, while_expr}'"]
    ?syntax error before: while
    ?syntax error before: while
    ?syntax error before: until
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile ignorant.erl "+'{enable_feature, ifn_expr}' +'{enable_feature, while_expr}'"]
    ?syntax error before:
    ?syntax error before: while
    ?syntax error before: until
    ?syntax error before: ifn
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile f_ifn.erl ""]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_ifn.erl "'+{enable_feature, ifn_expr}'"]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_ifn.erl "'+{enable_feature, while_expr}'"]
    [invoke syntax-error while]
    [invoke syntax-error until]
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile f_ifn.erl "-enable-feature while_expr"]
    [invoke syntax-error while]
    [invoke syntax-error until]
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile f_ifn.erl "'+{enable_feature, while_expr}' '+{enable_feature, ifn_expr}'"]
    [invoke syntax-error while]
    [invoke syntax-error until]
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile f_ifn.erl "-enable-feature while_expr -enable-feature ifn_expr"]
    [invoke syntax-error while]
    [invoke syntax-error until]
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile f_maybe.erl ""]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_maybe.erl "'+{enable_feature, while_expr}'"]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_maybe.erl "-enable-feature while_expr"]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_maybe.erl "'+{enable_feature, ifn_expr}'"]
    ?syntax error before:
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile f_maybe.erl "-enable-feature ifn_expr"]
    ?syntax error before:
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile f_maybe.erl "'+{enable_feature, while_expr}' '+{enable_feature, ifn_expr}'"]
    ?syntax error before:
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile f_maybe.erl "-enable-feature while_expr -enable-feature ifn_expr"]
    ?syntax error before:
    ?SH-PROMPT:
    [invoke notok]

    [invoke compile f_maybe_ifn.erl ""]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_maybe_ifn.erl "'+{enable_feature, while_expr}'"]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_maybe_ifn.erl "-enable-feature while_expr"]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_maybe_ifn.erl "'+{enable_feature, ifn_expr}'"]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_maybe_ifn.erl "-enable-feature ifn_expr"]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_maybe_ifn.erl "'+{enable_feature, while_expr}' '+{enable_feature, ifn_expr}'"]
    ?SH-PROMPT:
    [invoke ok]

    [invoke compile f_maybe_ifn.erl "-enable-feature while_expr -enable-feature ifn_expr"]
    ?SH-PROMPT:
    [invoke ok]

    # Long options
    [invoke compile f_ifn.erl "-enable-feature ifn_expr"]
    ?SH-PROMPT:
    [invoke ok]

    # This file has instances of -compile({enable_feature, ..}) inside
    [invoke compile f_directives.erl ""]
    ?SH-PROMPT:
    [invoke ok]

[newshell erl]
    !export OTP_TEST_FEATURES=true
    ?SH-PROMPT:
    -undefined function
    [invoke start-erl ""]
    [invoke erl-compile ignorant.erl []]
    ???{ok,ignorant}
    ?$ERLPROMPT

    [invoke erl-compile ignorant.erl [{enable_feature,ifn_expr}]]
    ?syntax error before:
    ?syntax error before:
    ?error
    ?$ERLPROMPT

    [invoke erl-compile ignorant.erl [{enable_feature,ifn_expr},{enable_feature,while_expr}]]
    ?syntax error before:
    ?syntax error before: while
    ?syntax error before: until
    ?syntax error before: ifn
    ?error
    ?$ERLPROMPT

    [invoke erl-compile f_directives.erl []]
    ???{ok,f_directives}
    ?$ERLPROMPT

    # As we have not enabled any features, this load should not be
    # allowed (if we have inserted the features used in the meta chunk).
    !l(f_directives).
    ??{error,not_allowed}
    ?$ERLPROMPT

    !Fs = erl_features:features_used(f_maybe_ifn).
    [invoke same-members Fs "[cond_expr,maps,while_expr,ifn_expr]"]
    !f(Fs).
    ?$ERLPROMPT

    # Try to load the binary directly
    !{Mod,Bin,FName}=code:get_object_code(f_maybe_ifn).
    ?$ERLPROMPT
    !code:load_binary(Mod,FName,Bin).
    ??{error,not_allowed}
    ?$ERLPROMPT

[shell cmds]
    [invoke compile f_macros.erl ""]
    ?SH-PROMPT:
    [invoke ok]

[shell erl]
    !l(f_macros).
    ?{module,f_macros}
    ?$ERLPROMPT

    !f_macros:has_ifn().
    ?true
    ?$ERLPROMPT

    !f_macros:has_hindly_milner().
    ?false
    ?$ERLPROMPT

    !f_macros:with_hm().
    ?false
    ?$ERLPROMPT

    !f_macros:uses_ifn().
    ?false
    ?$ERLPROMPT

    !f_macros:uses_maybe().
    ?false
    ?$ERLPROMPT

[shell cmds]
    [invoke compile f_macros.erl "-enable-feature ifn_expr"]
    ?SH-PROMPT:
    [invoke ok]

[shell erl]
    !l(f_macros).
    ??{error,not_allowed}
    ?$ERLPROMPT

    # Check which features were used during compilation
    !Fs = erl_features:features_used(f_macros).
    ?$ERLPROMPT
    [invoke same-members Fs "[maps,cond_expr,ifn_expr]"]
    !f(Fs).
    ?$ERLPROMPT

    # Somewhat questionable if we really should allow this in runtime
    # FIXME WE should *not* allow this at runtime.
    !Fs = erl_features:enable_feature(ifn_expr).
    ?$ERLPROMPT
    [invoke same-members Fs "[cond_expr,maps,ifn_expr]"]
    !f(Fs).
    ?$ERLPROMPT

    !l(f_macros).
    ?{module,f_macros}
    ?$ERLPROMPT

    !f_macros:uses_ifn().
    ?true
    ?$ERLPROMPT

    !f_macros:uses_maybe().
    ?false
    ?$ERLPROMPT

    [invoke quit-erl]

    !rm -f $outdir/f_macros.beam
    ?SH-PROMPT:

    [invoke start-erl ""]

    [invoke erl-compile f_macros.erl [{enable_feature,ifn_expr}]]
    ???{ok,f_macros}
    ?$ERLPROMPT

    # This should be allowed as we have not enabled the feature in the
    # runtime
    !l(f_macros).
    ??{error,not_allowed}
    ?$ERLPROMPT

    [invoke quit-erl]

    [invoke start-erl "-enable-feature ifn_expr"]
    !l(f_macros).
    ??{module,f_macros}
    ?$ERLPROMPT

    [invoke quit-erl]

    [invoke start-erl ""]

[shell cmds]
    [invoke compile f_macros.erl "-enable-feature while_expr"]
    ?SH-PROMPT:
    [invoke ok]

[shell erl]
    # FIXME This should not be allowed at runtime..
    !Fs = erl_features:enable_feature(ifn_expr).
    ?$ERLPROMPT
    [invoke same-members Fs "[cond_expr,maps,ifn_expr]"]
    !f(Fs).
    ?$ERLPROMPT

    # FIXME This should not be allowed at runtime..
    !Fs = erl_features:enable_feature(while_expr).
    ?$ERLPROMPT
    [invoke same-members Fs "[cond_expr,maps,ifn_expr,while_expr]"]
    !f(Fs).
    ?$ERLPROMPT

    !l(f_macros).
    ?{module,f_macros}
    ?$ERLPROMPT

    !f_macros:uses_ifn().
    ?false
    ?$ERLPROMPT

    !f_macros:uses_maybe().
    ?true
    ?$ERLPROMPT

[shell cmds]
    [invoke compile f_macros.erl "-enable-feature ifn_expr -enable-feature while_expr"]
    ?SH-PROMPT:
    [invoke ok]

[shell erl]
    !l(f_macros).
    ?{module,f_macros}
    ?$ERLPROMPT

    !f_macros:uses_ifn().
    ?true
    ?$ERLPROMPT

    !f_macros:uses_maybe().
    ?true
    ?$ERLPROMPT


[shell cmds]
    [invoke compile f_disable.erl "-enable-feature ifn_expr -enable-feature while_expr"]
    ?SH-PROMPT:
    [invoke ok]

[shell erl]
    !f_disable:no_ifn().
    # FIXME Should really be 'maybe' since it is enabled
    ???['ifn','while',no_ifn]
    ?$ERLPROMPT

    !f_disable:no_ftrs().
    ???['ifn','while','until',no_maybe]
    ?$ERLPROMPT

[shell cmds]
    [invoke compile ignorant.erl "+warn_keywords"]
    # Note: not all messges are checked
    ?atom 'while' is reserved in the experimental feature 'while_expr'
    ?atom 'until' is reserved in the experimental feature 'while_expr'
    ?atom 'ifn' is reserved in the experimental feature 'ifn_expr'
    [invoke ok]

    [invoke compile ignorant.erl "+warn_keywords -Werror"]
    # Note: not all messges are checked
    ?atom 'while' is reserved in the experimental feature 'while_expr'
    ?atom 'until' is reserved in the experimental feature 'while_expr'
    ?atom 'ifn' is reserved in the experimental feature 'ifn_expr'
    [invoke notok]

    # This file has a directive for keyword warnings
    [invoke compile ignorant_directive.erl ""]
    # Note: not all messges are checked
    ?Warning: atom 'while' is reserved in the experimental feature 'while_expr'
    ?Warning: atom 'until' is reserved in the experimental feature 'while_expr'
    ?Warning: atom 'ifn' is reserved in the experimental feature 'ifn_expr'
    [invoke ok]

    # This file has a directive for keyword warnings
    # NOTE: This behaviour is inconsistent with that of enabling features,
    # where what is in the file takes precedence.
    [invoke compile ignorant_directive.erl "+nowarn_keywords"]
    # Expect no warning
    -Warning
    [invoke ok]

[shell cmds]
    [invoke compile foo.erl "-enable-feature all"]
    [invoke ok]

[shell erl]
    !Fs = erl_features:features_used(foo).
    ?$ERLPROMPT
    [invoke same-members Fs "[unless_expr,ifn_expr,while_expr,cond_expr,maps,ifnot_expr]"]
    !f(Fs).
    ?$ERLPROMPT
    # !maps:from_keys([unless_expr,ifn_expr,maybe_expr,cond_expr,maps,ifnot_expr],true) == maps:from_keys(Fs, true).
    # ?true
    # ?$ERLPROMPT

[shell cmds]
    [invoke compile foo.erl "-enable-feature all -disable-feature unless_expr"]
    [invoke ok]

[shell erl]
    !Fs = erl_features:features_used(foo).
    ?$ERLPROMPT
    !maps:from_keys([ifn_expr,while_expr,cond_expr,maps,ifnot_expr], foo) == maps:from_keys(Fs, foo).
    ?true
    ?$ERLPROMPT
    !f(Fs).
    ?$ERLPROMPT

[cleanup]
    [invoke no-dump]
    !rm -fr $outdir
